
amplifer_fan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ed0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004fe0  08004fe0  00014fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005078  08005078  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005078  08005078  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005078  08005078  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005078  08005078  00015078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800507c  0800507c  0001507c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000074  080050f4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080050f4  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccdc  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ecb  00000000  00000000  0002cd79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba0  00000000  00000000  0002ec48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa8  00000000  00000000  0002f7e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018e7c  00000000  00000000  00030290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a766  00000000  00000000  0004910c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e8d7  00000000  00000000  00053872  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2149  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000348c  00000000  00000000  000e21c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08004fc8 	.word	0x08004fc8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08004fc8 	.word	0x08004fc8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	d1ed      	bne.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__gesf2>:
 8000ce4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ce8:	e006      	b.n	8000cf8 <__cmpsf2+0x4>
 8000cea:	bf00      	nop

08000cec <__lesf2>:
 8000cec:	f04f 0c01 	mov.w	ip, #1
 8000cf0:	e002      	b.n	8000cf8 <__cmpsf2+0x4>
 8000cf2:	bf00      	nop

08000cf4 <__cmpsf2>:
 8000cf4:	f04f 0c01 	mov.w	ip, #1
 8000cf8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cfc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d08:	bf18      	it	ne
 8000d0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d0e:	d011      	beq.n	8000d34 <__cmpsf2+0x40>
 8000d10:	b001      	add	sp, #4
 8000d12:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d16:	bf18      	it	ne
 8000d18:	ea90 0f01 	teqne	r0, r1
 8000d1c:	bf58      	it	pl
 8000d1e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d22:	bf88      	it	hi
 8000d24:	17c8      	asrhi	r0, r1, #31
 8000d26:	bf38      	it	cc
 8000d28:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d2c:	bf18      	it	ne
 8000d2e:	f040 0001 	orrne.w	r0, r0, #1
 8000d32:	4770      	bx	lr
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	d102      	bne.n	8000d40 <__cmpsf2+0x4c>
 8000d3a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d3e:	d105      	bne.n	8000d4c <__cmpsf2+0x58>
 8000d40:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d44:	d1e4      	bne.n	8000d10 <__cmpsf2+0x1c>
 8000d46:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d4a:	d0e1      	beq.n	8000d10 <__cmpsf2+0x1c>
 8000d4c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <__aeabi_cfrcmple>:
 8000d54:	4684      	mov	ip, r0
 8000d56:	4608      	mov	r0, r1
 8000d58:	4661      	mov	r1, ip
 8000d5a:	e7ff      	b.n	8000d5c <__aeabi_cfcmpeq>

08000d5c <__aeabi_cfcmpeq>:
 8000d5c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d5e:	f7ff ffc9 	bl	8000cf4 <__cmpsf2>
 8000d62:	2800      	cmp	r0, #0
 8000d64:	bf48      	it	mi
 8000d66:	f110 0f00 	cmnmi.w	r0, #0
 8000d6a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d6c <__aeabi_fcmpeq>:
 8000d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d70:	f7ff fff4 	bl	8000d5c <__aeabi_cfcmpeq>
 8000d74:	bf0c      	ite	eq
 8000d76:	2001      	moveq	r0, #1
 8000d78:	2000      	movne	r0, #0
 8000d7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7e:	bf00      	nop

08000d80 <__aeabi_fcmplt>:
 8000d80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d84:	f7ff ffea 	bl	8000d5c <__aeabi_cfcmpeq>
 8000d88:	bf34      	ite	cc
 8000d8a:	2001      	movcc	r0, #1
 8000d8c:	2000      	movcs	r0, #0
 8000d8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d92:	bf00      	nop

08000d94 <__aeabi_fcmple>:
 8000d94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d98:	f7ff ffe0 	bl	8000d5c <__aeabi_cfcmpeq>
 8000d9c:	bf94      	ite	ls
 8000d9e:	2001      	movls	r0, #1
 8000da0:	2000      	movhi	r0, #0
 8000da2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da6:	bf00      	nop

08000da8 <__aeabi_fcmpge>:
 8000da8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dac:	f7ff ffd2 	bl	8000d54 <__aeabi_cfrcmple>
 8000db0:	bf94      	ite	ls
 8000db2:	2001      	movls	r0, #1
 8000db4:	2000      	movhi	r0, #0
 8000db6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dba:	bf00      	nop

08000dbc <__aeabi_fcmpgt>:
 8000dbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc0:	f7ff ffc8 	bl	8000d54 <__aeabi_cfrcmple>
 8000dc4:	bf34      	ite	cc
 8000dc6:	2001      	movcc	r0, #1
 8000dc8:	2000      	movcs	r0, #0
 8000dca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dce:	bf00      	nop

08000dd0 <__aeabi_f2iz>:
 8000dd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000dd4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000dd8:	d30f      	bcc.n	8000dfa <__aeabi_f2iz+0x2a>
 8000dda:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000dde:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000de2:	d90d      	bls.n	8000e00 <__aeabi_f2iz+0x30>
 8000de4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000df0:	fa23 f002 	lsr.w	r0, r3, r2
 8000df4:	bf18      	it	ne
 8000df6:	4240      	negne	r0, r0
 8000df8:	4770      	bx	lr
 8000dfa:	f04f 0000 	mov.w	r0, #0
 8000dfe:	4770      	bx	lr
 8000e00:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e04:	d101      	bne.n	8000e0a <__aeabi_f2iz+0x3a>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	d105      	bne.n	8000e16 <__aeabi_f2iz+0x46>
 8000e0a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e0e:	bf08      	it	eq
 8000e10:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e14:	4770      	bx	lr
 8000e16:	f04f 0000 	mov.w	r0, #0
 8000e1a:	4770      	bx	lr
 8000e1c:	0000      	movs	r0, r0
	...

08000e20 <tempADC2>:
	float T = ((u25-Usense)/AVG_slope+25.0);

	*value = T;
}

float tempADC2(u32 adc_data){
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

	return ((((3.3/4096)*adc_data)-1.43)/(4.3/1000.0)+25);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff fad3 	bl	80003d4 <__aeabi_ui2d>
 8000e2e:	a316      	add	r3, pc, #88	; (adr r3, 8000e88 <tempADC2+0x68>)
 8000e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e34:	f7ff fb48 	bl	80004c8 <__aeabi_dmul>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	460c      	mov	r4, r1
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	4621      	mov	r1, r4
 8000e40:	a313      	add	r3, pc, #76	; (adr r3, 8000e90 <tempADC2+0x70>)
 8000e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e46:	f7ff f987 	bl	8000158 <__aeabi_dsub>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	460c      	mov	r4, r1
 8000e4e:	4618      	mov	r0, r3
 8000e50:	4621      	mov	r1, r4
 8000e52:	a311      	add	r3, pc, #68	; (adr r3, 8000e98 <tempADC2+0x78>)
 8000e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e58:	f7ff fc60 	bl	800071c <__aeabi_ddiv>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	460c      	mov	r4, r1
 8000e60:	4618      	mov	r0, r3
 8000e62:	4621      	mov	r1, r4
 8000e64:	f04f 0200 	mov.w	r2, #0
 8000e68:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <tempADC2+0x80>)
 8000e6a:	f7ff f977 	bl	800015c <__adddf3>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	460c      	mov	r4, r1
 8000e72:	4618      	mov	r0, r3
 8000e74:	4621      	mov	r1, r4
 8000e76:	f7ff fdd7 	bl	8000a28 <__aeabi_d2f>
 8000e7a:	4603      	mov	r3, r0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd90      	pop	{r4, r7, pc}
 8000e84:	f3af 8000 	nop.w
 8000e88:	66666666 	.word	0x66666666
 8000e8c:	3f4a6666 	.word	0x3f4a6666
 8000e90:	ae147ae1 	.word	0xae147ae1
 8000e94:	3ff6e147 	.word	0x3ff6e147
 8000e98:	75f6fd22 	.word	0x75f6fd22
 8000e9c:	3f719ce0 	.word	0x3f719ce0
 8000ea0:	40390000 	.word	0x40390000

08000ea4 <reverse>:

	LCD_string(string);
}

void reverse(char* str, int len)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8000eb8:	e018      	b.n	8000eec <reverse+0x48>
        temp = str[i];
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	441a      	add	r2, r3
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	440b      	add	r3, r1
 8000ed0:	7812      	ldrb	r2, [r2, #0]
 8000ed2:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	701a      	strb	r2, [r3, #0]
        i++;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
        j--;
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	dbe2      	blt.n	8000eba <reverse+0x16>
    }
}
 8000ef4:	bf00      	nop
 8000ef6:	371c      	adds	r7, #28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
	...

08000f00 <intToStr>:

int intToStr(int x, char *str, int d) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
    while (x) {
 8000f10:	e01d      	b.n	8000f4e <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <intToStr+0x8c>)
 8000f16:	fb83 1302 	smull	r1, r3, r3, r2
 8000f1a:	1099      	asrs	r1, r3, #2
 8000f1c:	17d3      	asrs	r3, r2, #31
 8000f1e:	1ac9      	subs	r1, r1, r3
 8000f20:	460b      	mov	r3, r1
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	440b      	add	r3, r1
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	1ad1      	subs	r1, r2, r3
 8000f2a:	b2ca      	uxtb	r2, r1
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	1c59      	adds	r1, r3, #1
 8000f30:	6179      	str	r1, [r7, #20]
 8000f32:	4619      	mov	r1, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	440b      	add	r3, r1
 8000f38:	3230      	adds	r2, #48	; 0x30
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <intToStr+0x8c>)
 8000f42:	fb82 1203 	smull	r1, r2, r2, r3
 8000f46:	1092      	asrs	r2, r2, #2
 8000f48:	17db      	asrs	r3, r3, #31
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	60fb      	str	r3, [r7, #12]
    while (x) {
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1de      	bne.n	8000f12 <intToStr+0x12>
    }
    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8000f54:	e007      	b.n	8000f66 <intToStr+0x66>
        str[i++] = '0';
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	1c5a      	adds	r2, r3, #1
 8000f5a:	617a      	str	r2, [r7, #20]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	4413      	add	r3, r2
 8000f62:	2230      	movs	r2, #48	; 0x30
 8000f64:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	dbf3      	blt.n	8000f56 <intToStr+0x56>

    reverse(str, i);
 8000f6e:	6979      	ldr	r1, [r7, #20]
 8000f70:	68b8      	ldr	r0, [r7, #8]
 8000f72:	f7ff ff97 	bl	8000ea4 <reverse>
    str[i] = '\0';
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]

    return i;
 8000f80:	697b      	ldr	r3, [r7, #20]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	66666667 	.word	0x66666667

08000f90 <ftoa>:

void ftoa(float n, char* res, int afterpoint) {
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f7ff ff17 	bl	8000dd0 <__aeabi_f2iz>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8000fa6:	69f8      	ldr	r0, [r7, #28]
 8000fa8:	f7ff fe48 	bl	8000c3c <__aeabi_i2f>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4619      	mov	r1, r3
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f7ff fd8d 	bl	8000ad0 <__aeabi_fsub>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	61bb      	str	r3, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	69f8      	ldr	r0, [r7, #28]
 8000fc0:	f7ff ff9e 	bl	8000f00 <intToStr>
 8000fc4:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d02c      	beq.n	8001026 <ftoa+0x96>
        res[i] = '.'; // add dot
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	222e      	movs	r2, #46	; 0x2e
 8000fd4:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8000fd6:	69b8      	ldr	r0, [r7, #24]
 8000fd8:	f7ff fa1e 	bl	8000418 <__aeabi_f2d>
 8000fdc:	4604      	mov	r4, r0
 8000fde:	460d      	mov	r5, r1
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff fa07 	bl	80003f4 <__aeabi_i2d>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	f04f 0000 	mov.w	r0, #0
 8000fee:	4910      	ldr	r1, [pc, #64]	; (8001030 <ftoa+0xa0>)
 8000ff0:	f002 ffc0 	bl	8003f74 <pow>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	f7ff fa64 	bl	80004c8 <__aeabi_dmul>
 8001000:	4603      	mov	r3, r0
 8001002:	460c      	mov	r4, r1
 8001004:	4618      	mov	r0, r3
 8001006:	4621      	mov	r1, r4
 8001008:	f7ff fd0e 	bl	8000a28 <__aeabi_d2f>
 800100c:	4603      	mov	r3, r0
 800100e:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8001010:	69b8      	ldr	r0, [r7, #24]
 8001012:	f7ff fedd 	bl	8000dd0 <__aeabi_f2iz>
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3301      	adds	r3, #1
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	4413      	add	r3, r2
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff ff6d 	bl	8000f00 <intToStr>
    }
}
 8001026:	bf00      	nop
 8001028:	3720      	adds	r7, #32
 800102a:	46bd      	mov	sp, r7
 800102c:	bdb0      	pop	{r4, r5, r7, pc}
 800102e:	bf00      	nop
 8001030:	40240000 	.word	0x40240000

08001034 <LCD_test>:
 */
//I use a LCD display with 2 row and 16 cool, with Hitachi basic
//i use it in 4 data_bit mode
#include "lcd.h"

void LCD_test(){
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	LCD_goto(0,0);
 8001038:	2100      	movs	r1, #0
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f82d 	bl	800109a <LCD_goto>
	LCD_string("#+++Elso-sor+++#");
 8001040:	4809      	ldr	r0, [pc, #36]	; (8001068 <LCD_test+0x34>)
 8001042:	f000 f815 	bl	8001070 <LCD_string>
	LCD_goto(1,0);
 8001046:	2100      	movs	r1, #0
 8001048:	2001      	movs	r0, #1
 800104a:	f000 f826 	bl	800109a <LCD_goto>
	LCD_string("#+Masodik--sor+#");
 800104e:	4807      	ldr	r0, [pc, #28]	; (800106c <LCD_test+0x38>)
 8001050:	f000 f80e 	bl	8001070 <LCD_string>
	HAL_Delay(1000);
 8001054:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001058:	f000 fe66 	bl	8001d28 <HAL_Delay>
	LCD_cmd(CLEAR);
 800105c:	2001      	movs	r0, #1
 800105e:	f000 f871 	bl	8001144 <LCD_cmd>
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	08004fe0 	.word	0x08004fe0
 800106c:	08004ff4 	.word	0x08004ff4

08001070 <LCD_string>:

void LCD_string(char *str){
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	while(*str){
 8001078:	e007      	b.n	800108a <LCD_string+0x1a>
		LCD_data(*str);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f8d2 	bl	8001228 <LCD_data>
		str++;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	607b      	str	r3, [r7, #4]
	while(*str){
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f3      	bne.n	800107a <LCD_string+0xa>
	}
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <LCD_goto>:

void LCD_goto(u8 row, u8 col){
 800109a:	b580      	push	{r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	460a      	mov	r2, r1
 80010a4:	71fb      	strb	r3, [r7, #7]
 80010a6:	4613      	mov	r3, r2
 80010a8:	71bb      	strb	r3, [r7, #6]
	switch(row){
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <LCD_goto+0x1c>
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d010      	beq.n	80010d6 <LCD_goto+0x3c>
			for(u8 i = col; i>0; i--){
				LCD_cmd(0x14);
			}
		 break;
	}
}
 80010b4:	e01f      	b.n	80010f6 <LCD_goto+0x5c>
			LCD_cmd(0x80);
 80010b6:	2080      	movs	r0, #128	; 0x80
 80010b8:	f000 f844 	bl	8001144 <LCD_cmd>
			for(u8 i = col; i>0; i--){
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	73fb      	strb	r3, [r7, #15]
 80010c0:	e005      	b.n	80010ce <LCD_goto+0x34>
				LCD_cmd(0x14);
 80010c2:	2014      	movs	r0, #20
 80010c4:	f000 f83e 	bl	8001144 <LCD_cmd>
			for(u8 i = col; i>0; i--){
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f6      	bne.n	80010c2 <LCD_goto+0x28>
		 break;
 80010d4:	e00f      	b.n	80010f6 <LCD_goto+0x5c>
			LCD_cmd(0xC0);
 80010d6:	20c0      	movs	r0, #192	; 0xc0
 80010d8:	f000 f834 	bl	8001144 <LCD_cmd>
			for(u8 i = col; i>0; i--){
 80010dc:	79bb      	ldrb	r3, [r7, #6]
 80010de:	73bb      	strb	r3, [r7, #14]
 80010e0:	e005      	b.n	80010ee <LCD_goto+0x54>
				LCD_cmd(0x14);
 80010e2:	2014      	movs	r0, #20
 80010e4:	f000 f82e 	bl	8001144 <LCD_cmd>
			for(u8 i = col; i>0; i--){
 80010e8:	7bbb      	ldrb	r3, [r7, #14]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	73bb      	strb	r3, [r7, #14]
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1f6      	bne.n	80010e2 <LCD_goto+0x48>
		 break;
 80010f4:	bf00      	nop
}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <LCD_enable>:

void LCD_enable(){
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	//need a square  signal _| |_ for LCD enable Port
	//we need a 0-1-0 signalflow, transition
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, RESET);	//make _
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800110a:	480d      	ldr	r0, [pc, #52]	; (8001140 <LCD_enable+0x40>)
 800110c:	f001 fe40 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_Delay(5);		//wait
 8001110:	2005      	movs	r0, #5
 8001112:	f000 fe09 	bl	8001d28 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port,LCD_E_Pin, SET);	//_|
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800111c:	4808      	ldr	r0, [pc, #32]	; (8001140 <LCD_enable+0x40>)
 800111e:	f001 fe37 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_Delay(5);		//wait
 8001122:	2005      	movs	r0, #5
 8001124:	f000 fe00 	bl	8001d28 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port,LCD_E_Pin, RESET);	//	|_
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112e:	4804      	ldr	r0, [pc, #16]	; (8001140 <LCD_enable+0x40>)
 8001130:	f001 fe2e 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001134:	2005      	movs	r0, #5
 8001136:	f000 fdf7 	bl	8001d28 <HAL_Delay>
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40010c00 	.word	0x40010c00

08001144 <LCD_cmd>:

void LCD_cmd(u8 cmd){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	//we need reset RS port, why we send commands for the LCD display
		//the R/W pin is already on GNDm because we only write the display
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin, RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001154:	4832      	ldr	r0, [pc, #200]	; (8001220 <LCD_cmd+0xdc>)
 8001156:	f001 fe1b 	bl	8002d90 <HAL_GPIO_WritePin>
	//we write the data with 2 cycle, first the upper Bits
		//we use PORT MASK just in case
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin,(cmd>>7) & 0x01);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	09db      	lsrs	r3, r3, #7
 800115e:	b2db      	uxtb	r3, r3
 8001160:	461a      	mov	r2, r3
 8001162:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001166:	482f      	ldr	r0, [pc, #188]	; (8001224 <LCD_cmd+0xe0>)
 8001168:	f001 fe12 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin,(cmd>>6) & 0x01);
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	099b      	lsrs	r3, r3, #6
 8001170:	b2db      	uxtb	r3, r3
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	b2db      	uxtb	r3, r3
 8001178:	461a      	mov	r2, r3
 800117a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117e:	4829      	ldr	r0, [pc, #164]	; (8001224 <LCD_cmd+0xe0>)
 8001180:	f001 fe06 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin,(cmd>>5) & 0x01);
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	b2db      	uxtb	r3, r3
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	461a      	mov	r2, r3
 8001192:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001196:	4822      	ldr	r0, [pc, #136]	; (8001220 <LCD_cmd+0xdc>)
 8001198:	f001 fdfa 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin,(cmd>>4) & 0x01);
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	091b      	lsrs	r3, r3, #4
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011ae:	481c      	ldr	r0, [pc, #112]	; (8001220 <LCD_cmd+0xdc>)
 80011b0:	f001 fdee 	bl	8002d90 <HAL_GPIO_WritePin>

	//we write this for LCD with LCD_enable, we send the datas
	LCD_enable();
 80011b4:	f7ff ffa4 	bl	8001100 <LCD_enable>

	//now we write the four lower Bit
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin,(cmd>>3) & 0x01);
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	08db      	lsrs	r3, r3, #3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	461a      	mov	r2, r3
 80011c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ca:	4816      	ldr	r0, [pc, #88]	; (8001224 <LCD_cmd+0xe0>)
 80011cc:	f001 fde0 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin,(cmd>>2) & 0x01);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e2:	4810      	ldr	r0, [pc, #64]	; (8001224 <LCD_cmd+0xe0>)
 80011e4:	f001 fdd4 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin,(cmd>>1) & 0x01);
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	085b      	lsrs	r3, r3, #1
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011fa:	4809      	ldr	r0, [pc, #36]	; (8001220 <LCD_cmd+0xdc>)
 80011fc:	f001 fdc8 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin,(cmd>>0) & 0x01);		//here truly we don`t need the MASK,just in case
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	461a      	mov	r2, r3
 800120a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800120e:	4804      	ldr	r0, [pc, #16]	; (8001220 <LCD_cmd+0xdc>)
 8001210:	f001 fdbe 	bl	8002d90 <HAL_GPIO_WritePin>

	//again write for LCD
	LCD_enable();
 8001214:	f7ff ff74 	bl	8001100 <LCD_enable>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40010c00 	.word	0x40010c00
 8001224:	40010800 	.word	0x40010800

08001228 <LCD_data>:

void LCD_data(u8 data){
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
	//we set the RS Pin, because we send now data
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin,SET);
 8001232:	2201      	movs	r2, #1
 8001234:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001238:	4832      	ldr	r0, [pc, #200]	; (8001304 <LCD_data+0xdc>)
 800123a:	f001 fda9 	bl	8002d90 <HAL_GPIO_WritePin>
	//send data again with 2 cycles
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin, (data>>7) & 0x01);
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	09db      	lsrs	r3, r3, #7
 8001242:	b2db      	uxtb	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	f44f 7100 	mov.w	r1, #512	; 0x200
 800124a:	482f      	ldr	r0, [pc, #188]	; (8001308 <LCD_data+0xe0>)
 800124c:	f001 fda0 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin, (data>>6) & 0x01);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	099b      	lsrs	r3, r3, #6
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	b2db      	uxtb	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001262:	4829      	ldr	r0, [pc, #164]	; (8001308 <LCD_data+0xe0>)
 8001264:	f001 fd94 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin, (data>>5) & 0x01);
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	b2db      	uxtb	r3, r3
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	461a      	mov	r2, r3
 8001276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800127a:	4822      	ldr	r0, [pc, #136]	; (8001304 <LCD_data+0xdc>)
 800127c:	f001 fd88 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin, (data>>4) & 0x01);
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	b2db      	uxtb	r3, r3
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	b2db      	uxtb	r3, r3
 800128c:	461a      	mov	r2, r3
 800128e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001292:	481c      	ldr	r0, [pc, #112]	; (8001304 <LCD_data+0xdc>)
 8001294:	f001 fd7c 	bl	8002d90 <HAL_GPIO_WritePin>
	//we send the data for display
	LCD_enable();
 8001298:	f7ff ff32 	bl	8001100 <LCD_enable>

	//now we send the low 4 bits
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin, (data>>3) & 0x01);
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ae:	4816      	ldr	r0, [pc, #88]	; (8001308 <LCD_data+0xe0>)
 80012b0:	f001 fd6e 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin, (data>>2) & 0x01);
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c6:	4810      	ldr	r0, [pc, #64]	; (8001308 <LCD_data+0xe0>)
 80012c8:	f001 fd62 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin, (data>>1) & 0x01);
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	085b      	lsrs	r3, r3, #1
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	461a      	mov	r2, r3
 80012da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012de:	4809      	ldr	r0, [pc, #36]	; (8001304 <LCD_data+0xdc>)
 80012e0:	f001 fd56 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin, (data>>0) & 0x01);
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <LCD_data+0xdc>)
 80012f4:	f001 fd4c 	bl	8002d90 <HAL_GPIO_WritePin>

	LCD_enable();
 80012f8:	f7ff ff02 	bl	8001100 <LCD_enable>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40010c00 	.word	0x40010c00
 8001308:	40010800 	.word	0x40010800

0800130c <LCD_init>:

void LCD_init(bool curzor, bool blink){
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	460a      	mov	r2, r1
 8001316:	71fb      	strb	r3, [r7, #7]
 8001318:	4613      	mov	r3, r2
 800131a:	71bb      	strb	r3, [r7, #6]
	//we before init
	HAL_Delay(15);
 800131c:	200f      	movs	r0, #15
 800131e:	f000 fd03 	bl	8001d28 <HAL_Delay>
	//we use it in 4bit mode with 2 row - 5*8 pixel
	LCD_cmd(0x20);
 8001322:	2020      	movs	r0, #32
 8001324:	f7ff ff0e 	bl	8001144 <LCD_cmd>

	//just in case we send for Enable PORT 3 cycle
	LCD_enable();
 8001328:	f7ff feea 	bl	8001100 <LCD_enable>
	LCD_enable();
 800132c:	f7ff fee8 	bl	8001100 <LCD_enable>
	LCD_enable();
 8001330:	f7ff fee6 	bl	8001100 <LCD_enable>

	//this hexacodes is from datasheet (LCD 1602, with hitachi base)
	LCD_cmd(0x28);		//set the mode 3 time
 8001334:	2028      	movs	r0, #40	; 0x28
 8001336:	f7ff ff05 	bl	8001144 <LCD_cmd>
	LCD_cmd(0x28);		//we don`t know before the init function wich one mode is the display
 800133a:	2028      	movs	r0, #40	; 0x28
 800133c:	f7ff ff02 	bl	8001144 <LCD_cmd>
	LCD_cmd(0x28);		//when we set the mode only 2 times, the display cant work well
 8001340:	2028      	movs	r0, #40	; 0x28
 8001342:	f7ff feff 	bl	8001144 <LCD_cmd>

	LCD_cmd(CLEAR);			//lcd clear
 8001346:	2001      	movs	r0, #1
 8001348:	f7ff fefc 	bl	8001144 <LCD_cmd>
	LCD_cmd(HOME);			//send the curzor to 0.row 0.cool
 800134c:	2002      	movs	r0, #2
 800134e:	f7ff fef9 	bl	8001144 <LCD_cmd>
	//set the curzor blink and the curzor visibility
	LCD_cmd(0x08 | (1<<LCD_E) | (curzor<<LCD_curzor) | (blink<<LCD_blink));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	b25b      	sxtb	r3, r3
 8001358:	f043 030c 	orr.w	r3, r3, #12
 800135c:	b25a      	sxtb	r2, r3
 800135e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001362:	4313      	orrs	r3, r2
 8001364:	b25b      	sxtb	r3, r3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff feeb 	bl	8001144 <LCD_cmd>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b598      	push	{r3, r4, r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137c:	f000 fc72 	bl	8001c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001380:	f000 f8c0 	bl	8001504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001384:	f000 fa2a 	bl	80017dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001388:	f000 fa0a 	bl	80017a0 <MX_DMA_Init>
  MX_ADC1_Init();
 800138c:	f000 f910 	bl	80015b0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001390:	f000 f96a 	bl	8001668 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001394:	f000 f9b6 	bl	8001704 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001398:	4853      	ldr	r0, [pc, #332]	; (80014e8 <main+0x170>)
 800139a:	f002 fa1b 	bl	80037d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800139e:	4853      	ldr	r0, [pc, #332]	; (80014ec <main+0x174>)
 80013a0:	f002 fa18 	bl	80037d4 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, data_DMAadc, 3);
 80013a4:	2203      	movs	r2, #3
 80013a6:	4952      	ldr	r1, [pc, #328]	; (80014f0 <main+0x178>)
 80013a8:	4852      	ldr	r0, [pc, #328]	; (80014f4 <main+0x17c>)
 80013aa:	f000 fdb7 	bl	8001f1c <HAL_ADC_Start_DMA>
  LCD_init(1,1);
 80013ae:	2101      	movs	r1, #1
 80013b0:	2001      	movs	r0, #1
 80013b2:	f7ff ffab 	bl	800130c <LCD_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_test();
 80013b6:	f7ff fe3d 	bl	8001034 <LCD_test>
	  LCD_goto(0,0);
	  LCD_string("Na mehet...");
	  LCD_goto(1,0);
	  LCD_string("Na mehet...");
	  */
	  LCD_goto(0,0);
 80013ba:	2100      	movs	r1, #0
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff fe6c 	bl	800109a <LCD_goto>
	  temp_f = ((3.3/4096)*data_DMAadc[0]);
 80013c2:	4b4b      	ldr	r3, [pc, #300]	; (80014f0 <main+0x178>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f804 	bl	80003d4 <__aeabi_ui2d>
 80013cc:	a344      	add	r3, pc, #272	; (adr r3, 80014e0 <main+0x168>)
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	f7ff f879 	bl	80004c8 <__aeabi_dmul>
 80013d6:	4603      	mov	r3, r0
 80013d8:	460c      	mov	r4, r1
 80013da:	4618      	mov	r0, r3
 80013dc:	4621      	mov	r1, r4
 80013de:	f7ff fb23 	bl	8000a28 <__aeabi_d2f>
 80013e2:	4602      	mov	r2, r0
 80013e4:	4b44      	ldr	r3, [pc, #272]	; (80014f8 <main+0x180>)
 80013e6:	601a      	str	r2, [r3, #0]
	  ftoa(temp_f, buffer, 2);
 80013e8:	4b43      	ldr	r3, [pc, #268]	; (80014f8 <main+0x180>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2202      	movs	r2, #2
 80013ee:	4943      	ldr	r1, [pc, #268]	; (80014fc <main+0x184>)
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fdcd 	bl	8000f90 <ftoa>
	  if(temp_f < 1.0){
 80013f6:	4b40      	ldr	r3, [pc, #256]	; (80014f8 <main+0x180>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fcbe 	bl	8000d80 <__aeabi_fcmplt>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d006      	beq.n	8001418 <main+0xa0>
		  LCD_string("0");
 800140a:	483d      	ldr	r0, [pc, #244]	; (8001500 <main+0x188>)
 800140c:	f7ff fe30 	bl	8001070 <LCD_string>
	  	  LCD_string(buffer);
 8001410:	483a      	ldr	r0, [pc, #232]	; (80014fc <main+0x184>)
 8001412:	f7ff fe2d 	bl	8001070 <LCD_string>
 8001416:	e002      	b.n	800141e <main+0xa6>
	  }else{
		  LCD_string(buffer);
 8001418:	4838      	ldr	r0, [pc, #224]	; (80014fc <main+0x184>)
 800141a:	f7ff fe29 	bl	8001070 <LCD_string>
	  }

	  LCD_goto(1,0);
 800141e:	2100      	movs	r1, #0
 8001420:	2001      	movs	r0, #1
 8001422:	f7ff fe3a 	bl	800109a <LCD_goto>
	  temp_f = ((3.3/4096)*data_DMAadc[1]);
 8001426:	4b32      	ldr	r3, [pc, #200]	; (80014f0 <main+0x178>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4618      	mov	r0, r3
 800142c:	f7fe ffd2 	bl	80003d4 <__aeabi_ui2d>
 8001430:	a32b      	add	r3, pc, #172	; (adr r3, 80014e0 <main+0x168>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f847 	bl	80004c8 <__aeabi_dmul>
 800143a:	4603      	mov	r3, r0
 800143c:	460c      	mov	r4, r1
 800143e:	4618      	mov	r0, r3
 8001440:	4621      	mov	r1, r4
 8001442:	f7ff faf1 	bl	8000a28 <__aeabi_d2f>
 8001446:	4602      	mov	r2, r0
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <main+0x180>)
 800144a:	601a      	str	r2, [r3, #0]
	  ftoa(temp_f, buffer, 2);
 800144c:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <main+0x180>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2202      	movs	r2, #2
 8001452:	492a      	ldr	r1, [pc, #168]	; (80014fc <main+0x184>)
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fd9b 	bl	8000f90 <ftoa>
	  if(temp_f < 1.0){
 800145a:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <main+0x180>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fc8c 	bl	8000d80 <__aeabi_fcmplt>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <main+0x104>
		  LCD_string("0");
 800146e:	4824      	ldr	r0, [pc, #144]	; (8001500 <main+0x188>)
 8001470:	f7ff fdfe 	bl	8001070 <LCD_string>
		  LCD_string(buffer);
 8001474:	4821      	ldr	r0, [pc, #132]	; (80014fc <main+0x184>)
 8001476:	f7ff fdfb 	bl	8001070 <LCD_string>
 800147a:	e002      	b.n	8001482 <main+0x10a>
	  }else{
		  LCD_string(buffer);
 800147c:	481f      	ldr	r0, [pc, #124]	; (80014fc <main+0x184>)
 800147e:	f7ff fdf7 	bl	8001070 <LCD_string>
	  }

	  LCD_goto(0,8);
 8001482:	2108      	movs	r1, #8
 8001484:	2000      	movs	r0, #0
 8001486:	f7ff fe08 	bl	800109a <LCD_goto>
	  //temp_f = ((3.3/4096)*data_DMAadc[1]);
	  //tempADC(&temp_f, data_DMAadc[2]);
	  //ftoa(temp_f, buffer, 2);
	  temp_f = tempADC2(data_DMAadc[2]);
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <main+0x178>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fcc6 	bl	8000e20 <tempADC2>
 8001494:	4602      	mov	r2, r0
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <main+0x180>)
 8001498:	601a      	str	r2, [r3, #0]
	  ftoa(temp_f, buffer, 2);
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <main+0x180>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2202      	movs	r2, #2
 80014a0:	4916      	ldr	r1, [pc, #88]	; (80014fc <main+0x184>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fd74 	bl	8000f90 <ftoa>
	  if(temp_f < 1.0){
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <main+0x180>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fc65 	bl	8000d80 <__aeabi_fcmplt>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d006      	beq.n	80014ca <main+0x152>
		  LCD_string("0");
 80014bc:	4810      	ldr	r0, [pc, #64]	; (8001500 <main+0x188>)
 80014be:	f7ff fdd7 	bl	8001070 <LCD_string>
		  LCD_string(buffer);
 80014c2:	480e      	ldr	r0, [pc, #56]	; (80014fc <main+0x184>)
 80014c4:	f7ff fdd4 	bl	8001070 <LCD_string>
 80014c8:	e002      	b.n	80014d0 <main+0x158>
	  }else{
		  LCD_string(buffer);
 80014ca:	480c      	ldr	r0, [pc, #48]	; (80014fc <main+0x184>)
 80014cc:	f7ff fdd0 	bl	8001070 <LCD_string>
	  }

	  HAL_Delay(500);
 80014d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014d4:	f000 fc28 	bl	8001d28 <HAL_Delay>
	  LCD_goto(0,0);
 80014d8:	e76f      	b.n	80013ba <main+0x42>
 80014da:	bf00      	nop
 80014dc:	f3af 8000 	nop.w
 80014e0:	66666666 	.word	0x66666666
 80014e4:	3f4a6666 	.word	0x3f4a6666
 80014e8:	20000170 	.word	0x20000170
 80014ec:	200000a0 	.word	0x200000a0
 80014f0:	20000094 	.word	0x20000094
 80014f4:	200000e8 	.word	0x200000e8
 80014f8:	200001b8 	.word	0x200001b8
 80014fc:	20000118 	.word	0x20000118
 8001500:	08005008 	.word	0x08005008

08001504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b094      	sub	sp, #80	; 0x50
 8001508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800150e:	2228      	movs	r2, #40	; 0x28
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fd26 	bl	8003f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001534:	2302      	movs	r3, #2
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001538:	2301      	movs	r3, #1
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800153c:	2310      	movs	r3, #16
 800153e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001540:	2302      	movs	r3, #2
 8001542:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001544:	2300      	movs	r3, #0
 8001546:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8001548:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 800154c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001552:	4618      	mov	r0, r3
 8001554:	f001 fc4e 	bl	8002df4 <HAL_RCC_OscConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800155e:	f000 fa31 	bl	80019c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001562:	230f      	movs	r3, #15
 8001564:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001566:	2302      	movs	r3, #2
 8001568:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	2101      	movs	r1, #1
 800157c:	4618      	mov	r0, r3
 800157e:	f001 feb9 	bl	80032f4 <HAL_RCC_ClockConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001588:	f000 fa1c 	bl	80019c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800158c:	2302      	movs	r3, #2
 800158e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4618      	mov	r0, r3
 8001598:	f002 f816 	bl	80035c8 <HAL_RCCEx_PeriphCLKConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80015a2:	f000 fa0f 	bl	80019c4 <Error_Handler>
  }
}
 80015a6:	bf00      	nop
 80015a8:	3750      	adds	r7, #80	; 0x50
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80015c0:	4b27      	ldr	r3, [pc, #156]	; (8001660 <MX_ADC1_Init+0xb0>)
 80015c2:	4a28      	ldr	r2, [pc, #160]	; (8001664 <MX_ADC1_Init+0xb4>)
 80015c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015c6:	4b26      	ldr	r3, [pc, #152]	; (8001660 <MX_ADC1_Init+0xb0>)
 80015c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <MX_ADC1_Init+0xb0>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015d4:	4b22      	ldr	r3, [pc, #136]	; (8001660 <MX_ADC1_Init+0xb0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <MX_ADC1_Init+0xb0>)
 80015dc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80015e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <MX_ADC1_Init+0xb0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80015e8:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <MX_ADC1_Init+0xb0>)
 80015ea:	2203      	movs	r2, #3
 80015ec:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ee:	481c      	ldr	r0, [pc, #112]	; (8001660 <MX_ADC1_Init+0xb0>)
 80015f0:	f000 fbbc 	bl	8001d6c <HAL_ADC_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80015fa:	f000 f9e3 	bl	80019c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015fe:	2308      	movs	r3, #8
 8001600:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001602:	2301      	movs	r3, #1
 8001604:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001606:	2307      	movs	r3, #7
 8001608:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4814      	ldr	r0, [pc, #80]	; (8001660 <MX_ADC1_Init+0xb0>)
 8001610:	f000 fd7e 	bl	8002110 <HAL_ADC_ConfigChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800161a:	f000 f9d3 	bl	80019c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800161e:	2309      	movs	r3, #9
 8001620:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001622:	2302      	movs	r3, #2
 8001624:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	4619      	mov	r1, r3
 800162a:	480d      	ldr	r0, [pc, #52]	; (8001660 <MX_ADC1_Init+0xb0>)
 800162c:	f000 fd70 	bl	8002110 <HAL_ADC_ConfigChannel>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001636:	f000 f9c5 	bl	80019c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800163a:	2310      	movs	r3, #16
 800163c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800163e:	2303      	movs	r3, #3
 8001640:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	4619      	mov	r1, r3
 8001646:	4806      	ldr	r0, [pc, #24]	; (8001660 <MX_ADC1_Init+0xb0>)
 8001648:	f000 fd62 	bl	8002110 <HAL_ADC_ConfigChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001652:	f000 f9b7 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200000e8 	.word	0x200000e8
 8001664:	40012400 	.word	0x40012400

08001668 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166e:	f107 0308 	add.w	r3, r7, #8
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167c:	463b      	mov	r3, r7
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <MX_TIM2_Init+0x98>)
 8001686:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800168a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 800168c:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <MX_TIM2_Init+0x98>)
 800168e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001692:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_TIM2_Init+0x98>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 349;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <MX_TIM2_Init+0x98>)
 800169c:	f240 125d 	movw	r2, #349	; 0x15d
 80016a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <MX_TIM2_Init+0x98>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_TIM2_Init+0x98>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ae:	4814      	ldr	r0, [pc, #80]	; (8001700 <MX_TIM2_Init+0x98>)
 80016b0:	f002 f840 	bl	8003734 <HAL_TIM_Base_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016ba:	f000 f983 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016c4:	f107 0308 	add.w	r3, r7, #8
 80016c8:	4619      	mov	r1, r3
 80016ca:	480d      	ldr	r0, [pc, #52]	; (8001700 <MX_TIM2_Init+0x98>)
 80016cc:	f002 f9dc 	bl	8003a88 <HAL_TIM_ConfigClockSource>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016d6:	f000 f975 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e2:	463b      	mov	r3, r7
 80016e4:	4619      	mov	r1, r3
 80016e6:	4806      	ldr	r0, [pc, #24]	; (8001700 <MX_TIM2_Init+0x98>)
 80016e8:	f002 fba2 	bl	8003e30 <HAL_TIMEx_MasterConfigSynchronization>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016f2:	f000 f967 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000170 	.word	0x20000170

08001704 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001718:	463b      	mov	r3, r7
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <MX_TIM3_Init+0x94>)
 8001722:	4a1e      	ldr	r2, [pc, #120]	; (800179c <MX_TIM3_Init+0x98>)
 8001724:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39999;
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <MX_TIM3_Init+0x94>)
 8001728:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800172c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <MX_TIM3_Init+0x94>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 699;
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <MX_TIM3_Init+0x94>)
 8001736:	f240 22bb 	movw	r2, #699	; 0x2bb
 800173a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <MX_TIM3_Init+0x94>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <MX_TIM3_Init+0x94>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001748:	4813      	ldr	r0, [pc, #76]	; (8001798 <MX_TIM3_Init+0x94>)
 800174a:	f001 fff3 	bl	8003734 <HAL_TIM_Base_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001754:	f000 f936 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800175e:	f107 0308 	add.w	r3, r7, #8
 8001762:	4619      	mov	r1, r3
 8001764:	480c      	ldr	r0, [pc, #48]	; (8001798 <MX_TIM3_Init+0x94>)
 8001766:	f002 f98f 	bl	8003a88 <HAL_TIM_ConfigClockSource>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001770:	f000 f928 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001774:	2300      	movs	r3, #0
 8001776:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800177c:	463b      	mov	r3, r7
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_TIM3_Init+0x94>)
 8001782:	f002 fb55 	bl	8003e30 <HAL_TIMEx_MasterConfigSynchronization>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800178c:	f000 f91a 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200000a0 	.word	0x200000a0
 800179c:	40000400 	.word	0x40000400

080017a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_DMA_Init+0x38>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <MX_DMA_Init+0x38>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6153      	str	r3, [r2, #20]
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_DMA_Init+0x38>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	200b      	movs	r0, #11
 80017c4:	f000 ff65 	bl	8002692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017c8:	200b      	movs	r0, #11
 80017ca:	f000 ff7e 	bl	80026ca <HAL_NVIC_EnableIRQ>

}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000

080017dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	f107 0310 	add.w	r3, r7, #16
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f0:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <MX_GPIO_Init+0xfc>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a38      	ldr	r2, [pc, #224]	; (80018d8 <MX_GPIO_Init+0xfc>)
 80017f6:	f043 0310 	orr.w	r3, r3, #16
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <MX_GPIO_Init+0xfc>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0310 	and.w	r3, r3, #16
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001808:	4b33      	ldr	r3, [pc, #204]	; (80018d8 <MX_GPIO_Init+0xfc>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a32      	ldr	r2, [pc, #200]	; (80018d8 <MX_GPIO_Init+0xfc>)
 800180e:	f043 0320 	orr.w	r3, r3, #32
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <MX_GPIO_Init+0xfc>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0320 	and.w	r3, r3, #32
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <MX_GPIO_Init+0xfc>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a2c      	ldr	r2, [pc, #176]	; (80018d8 <MX_GPIO_Init+0xfc>)
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b2a      	ldr	r3, [pc, #168]	; (80018d8 <MX_GPIO_Init+0xfc>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001838:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <MX_GPIO_Init+0xfc>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a26      	ldr	r2, [pc, #152]	; (80018d8 <MX_GPIO_Init+0xfc>)
 800183e:	f043 0308 	orr.w	r3, r3, #8
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <MX_GPIO_Init+0xfc>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_panel_GPIO_Port, led_panel_Pin, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001856:	4821      	ldr	r0, [pc, #132]	; (80018dc <MX_GPIO_Init+0x100>)
 8001858:	f001 fa9a 	bl	8002d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, rgb0_Pin|rgb1_Pin|led0_Pin|led1_Pin
 800185c:	2200      	movs	r2, #0
 800185e:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8001862:	481f      	ldr	r0, [pc, #124]	; (80018e0 <MX_GPIO_Init+0x104>)
 8001864:	f001 fa94 	bl	8002d90 <HAL_GPIO_WritePin>
                          |led2_Pin|led3_Pin|led4_Pin|LCD_DATA_6_Pin
                          |LCD_DATA_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_E_Pin|LCD_RS_Pin|LCD_DATA_4_Pin|LCD_DATA_5_Pin, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800186e:	481d      	ldr	r0, [pc, #116]	; (80018e4 <MX_GPIO_Init+0x108>)
 8001870:	f001 fa8e 	bl	8002d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_panel_Pin */
  GPIO_InitStruct.Pin = led_panel_Pin;
 8001874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	2301      	movs	r3, #1
 800187c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2302      	movs	r3, #2
 8001884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_panel_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 0310 	add.w	r3, r7, #16
 800188a:	4619      	mov	r1, r3
 800188c:	4813      	ldr	r0, [pc, #76]	; (80018dc <MX_GPIO_Init+0x100>)
 800188e:	f001 f925 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : rgb0_Pin rgb1_Pin led0_Pin led1_Pin
                           led2_Pin led3_Pin led4_Pin LCD_DATA_6_Pin
                           LCD_DATA_7_Pin */
  GPIO_InitStruct.Pin = rgb0_Pin|rgb1_Pin|led0_Pin|led1_Pin
 8001892:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8001896:	613b      	str	r3, [r7, #16]
                          |led2_Pin|led3_Pin|led4_Pin|LCD_DATA_6_Pin
                          |LCD_DATA_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2302      	movs	r3, #2
 80018a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	4619      	mov	r1, r3
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <MX_GPIO_Init+0x104>)
 80018ac:	f001 f916 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_E_Pin LCD_RS_Pin LCD_DATA_4_Pin LCD_DATA_5_Pin */
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_RS_Pin|LCD_DATA_4_Pin|LCD_DATA_5_Pin;
 80018b0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80018b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b6:	2301      	movs	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2302      	movs	r3, #2
 80018c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	f107 0310 	add.w	r3, r7, #16
 80018c6:	4619      	mov	r1, r3
 80018c8:	4806      	ldr	r0, [pc, #24]	; (80018e4 <MX_GPIO_Init+0x108>)
 80018ca:	f001 f907 	bl	8002adc <HAL_GPIO_Init>

}
 80018ce:	bf00      	nop
 80018d0:	3720      	adds	r7, #32
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40011000 	.word	0x40011000
 80018e0:	40010800 	.word	0x40010800
 80018e4:	40010c00 	.word	0x40010c00

080018e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	if(htim-> Instance == TIM2){
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f8:	d104      	bne.n	8001904 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(led_panel_GPIO_Port, led_panel_Pin);
 80018fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018fe:	482d      	ldr	r0, [pc, #180]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001900:	f001 fa5e 	bl	8002dc0 <HAL_GPIO_TogglePin>
	}
	if(htim-> Instance == TIM3){
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a2b      	ldr	r2, [pc, #172]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d14a      	bne.n	80019a4 <HAL_TIM_PeriodElapsedCallback+0xbc>
		switch(flag0){
 800190e:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b04      	cmp	r3, #4
 8001916:	d847      	bhi.n	80019a8 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8001918:	a201      	add	r2, pc, #4	; (adr r2, 8001920 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800191a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191e:	bf00      	nop
 8001920:	08001935 	.word	0x08001935
 8001924:	0800194d 	.word	0x0800194d
 8001928:	08001965 	.word	0x08001965
 800192c:	0800197d 	.word	0x0800197d
 8001930:	08001995 	.word	0x08001995
			case 0:
				HAL_GPIO_TogglePin(led0_GPIO_Port, led0_Pin);
 8001934:	2108      	movs	r1, #8
 8001936:	4822      	ldr	r0, [pc, #136]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001938:	f001 fa42 	bl	8002dc0 <HAL_GPIO_TogglePin>
				flag0++;
 800193c:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	3301      	adds	r3, #1
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001948:	701a      	strb	r2, [r3, #0]
			 break;
 800194a:	e02e      	b.n	80019aa <HAL_TIM_PeriodElapsedCallback+0xc2>
			case 1:
				HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 800194c:	2110      	movs	r1, #16
 800194e:	481c      	ldr	r0, [pc, #112]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001950:	f001 fa36 	bl	8002dc0 <HAL_GPIO_TogglePin>
				flag0++;
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	3301      	adds	r3, #1
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4b17      	ldr	r3, [pc, #92]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001960:	701a      	strb	r2, [r3, #0]
			 break;
 8001962:	e022      	b.n	80019aa <HAL_TIM_PeriodElapsedCallback+0xc2>
			case 2:
				HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 8001964:	2120      	movs	r1, #32
 8001966:	4816      	ldr	r0, [pc, #88]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001968:	f001 fa2a 	bl	8002dc0 <HAL_GPIO_TogglePin>
				flag0++;
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	3301      	adds	r3, #1
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001978:	701a      	strb	r2, [r3, #0]
			 break;
 800197a:	e016      	b.n	80019aa <HAL_TIM_PeriodElapsedCallback+0xc2>
			case 3:
				HAL_GPIO_TogglePin(led3_GPIO_Port, led3_Pin);
 800197c:	2140      	movs	r1, #64	; 0x40
 800197e:	4810      	ldr	r0, [pc, #64]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001980:	f001 fa1e 	bl	8002dc0 <HAL_GPIO_TogglePin>
				flag0++;
 8001984:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	3301      	adds	r3, #1
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001990:	701a      	strb	r2, [r3, #0]
			 break;
 8001992:	e00a      	b.n	80019aa <HAL_TIM_PeriodElapsedCallback+0xc2>
			case 4:
				HAL_GPIO_TogglePin(led4_GPIO_Port, led4_Pin);
 8001994:	2180      	movs	r1, #128	; 0x80
 8001996:	480a      	ldr	r0, [pc, #40]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001998:	f001 fa12 	bl	8002dc0 <HAL_GPIO_TogglePin>
				flag0 = 0;
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
			 break;
 80019a2:	e002      	b.n	80019aa <HAL_TIM_PeriodElapsedCallback+0xc2>
			default:
				break;
		}
	}
 80019a4:	bf00      	nop
 80019a6:	e000      	b.n	80019aa <HAL_TIM_PeriodElapsedCallback+0xc2>
				break;
 80019a8:	bf00      	nop
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40011000 	.word	0x40011000
 80019b8:	40000400 	.word	0x40000400
 80019bc:	20000090 	.word	0x20000090
 80019c0:	40010800 	.word	0x40010800

080019c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ca:	e7fe      	b.n	80019ca <Error_Handler+0x6>

080019cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_MspInit+0x5c>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <HAL_MspInit+0x5c>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6193      	str	r3, [r2, #24]
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_MspInit+0x5c>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_MspInit+0x5c>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <HAL_MspInit+0x5c>)
 80019f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f4:	61d3      	str	r3, [r2, #28]
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_MspInit+0x5c>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <HAL_MspInit+0x60>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <HAL_MspInit+0x60>)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40010000 	.word	0x40010000

08001a30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a28      	ldr	r2, [pc, #160]	; (8001aec <HAL_ADC_MspInit+0xbc>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d149      	bne.n	8001ae4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a50:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <HAL_ADC_MspInit+0xc0>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a26      	ldr	r2, [pc, #152]	; (8001af0 <HAL_ADC_MspInit+0xc0>)
 8001a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a5a:	6193      	str	r3, [r2, #24]
 8001a5c:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_ADC_MspInit+0xc0>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a68:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <HAL_ADC_MspInit+0xc0>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	4a20      	ldr	r2, [pc, #128]	; (8001af0 <HAL_ADC_MspInit+0xc0>)
 8001a6e:	f043 0308 	orr.w	r3, r3, #8
 8001a72:	6193      	str	r3, [r2, #24]
 8001a74:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <HAL_ADC_MspInit+0xc0>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a80:	2303      	movs	r3, #3
 8001a82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a84:	2303      	movs	r3, #3
 8001a86:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4819      	ldr	r0, [pc, #100]	; (8001af4 <HAL_ADC_MspInit+0xc4>)
 8001a90:	f001 f824 	bl	8002adc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a94:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001a96:	4a19      	ldr	r2, [pc, #100]	; (8001afc <HAL_ADC_MspInit+0xcc>)
 8001a98:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a9a:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa0:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001aa6:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001ab6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001aba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001abc:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001abe:	2220      	movs	r2, #32
 8001ac0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ac8:	480b      	ldr	r0, [pc, #44]	; (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001aca:	f000 fe19 	bl	8002700 <HAL_DMA_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001ad4:	f7ff ff76 	bl	80019c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a07      	ldr	r2, [pc, #28]	; (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001adc:	621a      	str	r2, [r3, #32]
 8001ade:	4a06      	ldr	r2, [pc, #24]	; (8001af8 <HAL_ADC_MspInit+0xc8>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ae4:	bf00      	nop
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40012400 	.word	0x40012400
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40010c00 	.word	0x40010c00
 8001af8:	2000012c 	.word	0x2000012c
 8001afc:	40020008 	.word	0x40020008

08001b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b10:	d114      	bne.n	8001b3c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_TIM_Base_MspInit+0x78>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	4a18      	ldr	r2, [pc, #96]	; (8001b78 <HAL_TIM_Base_MspInit+0x78>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	61d3      	str	r3, [r2, #28]
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <HAL_TIM_Base_MspInit+0x78>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	201c      	movs	r0, #28
 8001b30:	f000 fdaf 	bl	8002692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b34:	201c      	movs	r0, #28
 8001b36:	f000 fdc8 	bl	80026ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b3a:	e018      	b.n	8001b6e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <HAL_TIM_Base_MspInit+0x7c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d113      	bne.n	8001b6e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <HAL_TIM_Base_MspInit+0x78>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	4a0b      	ldr	r2, [pc, #44]	; (8001b78 <HAL_TIM_Base_MspInit+0x78>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	61d3      	str	r3, [r2, #28]
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_TIM_Base_MspInit+0x78>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2100      	movs	r1, #0
 8001b62:	201d      	movs	r0, #29
 8001b64:	f000 fd95 	bl	8002692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b68:	201d      	movs	r0, #29
 8001b6a:	f000 fdae 	bl	80026ca <HAL_NVIC_EnableIRQ>
}
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40000400 	.word	0x40000400

08001b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <NMI_Handler+0x4>

08001b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <HardFault_Handler+0x4>

08001b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <MemManage_Handler+0x4>

08001b92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <BusFault_Handler+0x4>

08001b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <UsageFault_Handler+0x4>

08001b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr

08001bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr

08001bc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc6:	f000 f893 	bl	8001cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <DMA1_Channel1_IRQHandler+0x10>)
 8001bd6:	f000 fe4d 	bl	8002874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	2000012c 	.word	0x2000012c

08001be4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <TIM2_IRQHandler+0x10>)
 8001bea:	f001 fe45 	bl	8003878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000170 	.word	0x20000170

08001bf8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <TIM3_IRQHandler+0x10>)
 8001bfe:	f001 fe3b 	bl	8003878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200000a0 	.word	0x200000a0

08001c0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c18:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c1a:	e003      	b.n	8001c24 <LoopCopyDataInit>

08001c1c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001c1e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c20:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c22:	3104      	adds	r1, #4

08001c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c24:	480a      	ldr	r0, [pc, #40]	; (8001c50 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001c28:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c2a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c2c:	d3f6      	bcc.n	8001c1c <CopyDataInit>
  ldr r2, =_sbss
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001c30:	e002      	b.n	8001c38 <LoopFillZerobss>

08001c32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001c34:	f842 3b04 	str.w	r3, [r2], #4

08001c38 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001c3a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c3c:	d3f9      	bcc.n	8001c32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c3e:	f7ff ffe5 	bl	8001c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c42:	f002 f96b 	bl	8003f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c46:	f7ff fb97 	bl	8001378 <main>
  bx lr
 8001c4a:	4770      	bx	lr
  ldr r3, =_sidata
 8001c4c:	08005080 	.word	0x08005080
  ldr r0, =_sdata
 8001c50:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c54:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001c58:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001c5c:	200001c0 	.word	0x200001c0

08001c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c60:	e7fe      	b.n	8001c60 <ADC1_2_IRQHandler>
	...

08001c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_Init+0x28>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <HAL_Init+0x28>)
 8001c6e:	f043 0310 	orr.w	r3, r3, #16
 8001c72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c74:	2003      	movs	r0, #3
 8001c76:	f000 fd01 	bl	800267c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f000 f808 	bl	8001c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c80:	f7ff fea4 	bl	80019cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40022000 	.word	0x40022000

08001c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_InitTick+0x54>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_InitTick+0x58>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 fd19 	bl	80026e6 <HAL_SYSTICK_Config>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00e      	b.n	8001cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b0f      	cmp	r3, #15
 8001cc2:	d80a      	bhi.n	8001cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ccc:	f000 fce1 	bl	8002692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd0:	4a06      	ldr	r2, [pc, #24]	; (8001cec <HAL_InitTick+0x5c>)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e000      	b.n	8001cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20000008 	.word	0x20000008
 8001cec:	20000004 	.word	0x20000004

08001cf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_IncTick+0x1c>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_IncTick+0x20>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a03      	ldr	r2, [pc, #12]	; (8001d10 <HAL_IncTick+0x20>)
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	20000008 	.word	0x20000008
 8001d10:	200001bc 	.word	0x200001bc

08001d14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return uwTick;
 8001d18:	4b02      	ldr	r3, [pc, #8]	; (8001d24 <HAL_GetTick+0x10>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	200001bc 	.word	0x200001bc

08001d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d30:	f7ff fff0 	bl	8001d14 <HAL_GetTick>
 8001d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d40:	d005      	beq.n	8001d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_Delay+0x40>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d4e:	bf00      	nop
 8001d50:	f7ff ffe0 	bl	8001d14 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d8f7      	bhi.n	8001d50 <HAL_Delay+0x28>
  {
  }
}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000008 	.word	0x20000008

08001d6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e0be      	b.n	8001f0c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d109      	bne.n	8001db0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff fe40 	bl	8001a30 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 faf7 	bl	80023a4 <ADC_ConversionStop_Disable>
 8001db6:	4603      	mov	r3, r0
 8001db8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f040 8099 	bne.w	8001efa <HAL_ADC_Init+0x18e>
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f040 8095 	bne.w	8001efa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dd8:	f023 0302 	bic.w	r3, r3, #2
 8001ddc:	f043 0202 	orr.w	r2, r3, #2
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001dec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	7b1b      	ldrb	r3, [r3, #12]
 8001df2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001df4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e04:	d003      	beq.n	8001e0e <HAL_ADC_Init+0xa2>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d102      	bne.n	8001e14 <HAL_ADC_Init+0xa8>
 8001e0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e12:	e000      	b.n	8001e16 <HAL_ADC_Init+0xaa>
 8001e14:	2300      	movs	r3, #0
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7d1b      	ldrb	r3, [r3, #20]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d119      	bne.n	8001e58 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	7b1b      	ldrb	r3, [r3, #12]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d109      	bne.n	8001e40 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	3b01      	subs	r3, #1
 8001e32:	035a      	lsls	r2, r3, #13
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	e00b      	b.n	8001e58 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	f043 0220 	orr.w	r2, r3, #32
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	f043 0201 	orr.w	r2, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	4b28      	ldr	r3, [pc, #160]	; (8001f14 <HAL_ADC_Init+0x1a8>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	68b9      	ldr	r1, [r7, #8]
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e88:	d003      	beq.n	8001e92 <HAL_ADC_Init+0x126>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d104      	bne.n	8001e9c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	051b      	lsls	r3, r3, #20
 8001e9a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <HAL_ADC_Init+0x1ac>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d10b      	bne.n	8001ed8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	f023 0303 	bic.w	r3, r3, #3
 8001ece:	f043 0201 	orr.w	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ed6:	e018      	b.n	8001f0a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001edc:	f023 0312 	bic.w	r3, r3, #18
 8001ee0:	f043 0210 	orr.w	r2, r3, #16
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	f043 0201 	orr.w	r2, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ef8:	e007      	b.n	8001f0a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	f043 0210 	orr.w	r2, r3, #16
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	ffe1f7fd 	.word	0xffe1f7fd
 8001f18:	ff1f0efe 	.word	0xff1f0efe

08001f1c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a64      	ldr	r2, [pc, #400]	; (80020c4 <HAL_ADC_Start_DMA+0x1a8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d004      	beq.n	8001f40 <HAL_ADC_Start_DMA+0x24>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a63      	ldr	r2, [pc, #396]	; (80020c8 <HAL_ADC_Start_DMA+0x1ac>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d106      	bne.n	8001f4e <HAL_ADC_Start_DMA+0x32>
 8001f40:	4b60      	ldr	r3, [pc, #384]	; (80020c4 <HAL_ADC_Start_DMA+0x1a8>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f040 80b3 	bne.w	80020b4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_ADC_Start_DMA+0x40>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e0ae      	b.n	80020ba <HAL_ADC_Start_DMA+0x19e>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 f9cb 	bl	8002300 <ADC_Enable>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f6e:	7dfb      	ldrb	r3, [r7, #23]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f040 809a 	bne.w	80020aa <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f7e:	f023 0301 	bic.w	r3, r3, #1
 8001f82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a4e      	ldr	r2, [pc, #312]	; (80020c8 <HAL_ADC_Start_DMA+0x1ac>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d105      	bne.n	8001fa0 <HAL_ADC_Start_DMA+0x84>
 8001f94:	4b4b      	ldr	r3, [pc, #300]	; (80020c4 <HAL_ADC_Start_DMA+0x1a8>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d115      	bne.n	8001fcc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d026      	beq.n	8002008 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fc2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fca:	e01d      	b.n	8002008 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a39      	ldr	r2, [pc, #228]	; (80020c4 <HAL_ADC_Start_DMA+0x1a8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d004      	beq.n	8001fec <HAL_ADC_Start_DMA+0xd0>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a38      	ldr	r2, [pc, #224]	; (80020c8 <HAL_ADC_Start_DMA+0x1ac>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d10d      	bne.n	8002008 <HAL_ADC_Start_DMA+0xec>
 8001fec:	4b35      	ldr	r3, [pc, #212]	; (80020c4 <HAL_ADC_Start_DMA+0x1a8>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d007      	beq.n	8002008 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002000:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	f023 0206 	bic.w	r2, r3, #6
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002020:	e002      	b.n	8002028 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	4a25      	ldr	r2, [pc, #148]	; (80020cc <HAL_ADC_Start_DMA+0x1b0>)
 8002036:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	4a24      	ldr	r2, [pc, #144]	; (80020d0 <HAL_ADC_Start_DMA+0x1b4>)
 800203e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	4a23      	ldr	r2, [pc, #140]	; (80020d4 <HAL_ADC_Start_DMA+0x1b8>)
 8002046:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0202 	mvn.w	r2, #2
 8002050:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002060:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a18      	ldr	r0, [r3, #32]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	334c      	adds	r3, #76	; 0x4c
 800206c:	4619      	mov	r1, r3
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f000 fb9f 	bl	80027b4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002080:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002084:	d108      	bne.n	8002098 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002094:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002096:	e00f      	b.n	80020b8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020a6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80020a8:	e006      	b.n	80020b8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80020b2:	e001      	b.n	80020b8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40012400 	.word	0x40012400
 80020c8:	40012800 	.word	0x40012800
 80020cc:	08002419 	.word	0x08002419
 80020d0:	08002495 	.word	0x08002495
 80020d4:	080024b1 	.word	0x080024b1

080020d8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
	...

08002110 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x20>
 800212c:	2302      	movs	r3, #2
 800212e:	e0dc      	b.n	80022ea <HAL_ADC_ConfigChannel+0x1da>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b06      	cmp	r3, #6
 800213e:	d81c      	bhi.n	800217a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	3b05      	subs	r3, #5
 8002152:	221f      	movs	r2, #31
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	4019      	ands	r1, r3
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	3b05      	subs	r3, #5
 800216c:	fa00 f203 	lsl.w	r2, r0, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	635a      	str	r2, [r3, #52]	; 0x34
 8002178:	e03c      	b.n	80021f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b0c      	cmp	r3, #12
 8002180:	d81c      	bhi.n	80021bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	3b23      	subs	r3, #35	; 0x23
 8002194:	221f      	movs	r2, #31
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	4019      	ands	r1, r3
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	3b23      	subs	r3, #35	; 0x23
 80021ae:	fa00 f203 	lsl.w	r2, r0, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	631a      	str	r2, [r3, #48]	; 0x30
 80021ba:	e01b      	b.n	80021f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	3b41      	subs	r3, #65	; 0x41
 80021ce:	221f      	movs	r2, #31
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	4019      	ands	r1, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	3b41      	subs	r3, #65	; 0x41
 80021e8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b09      	cmp	r3, #9
 80021fa:	d91c      	bls.n	8002236 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68d9      	ldr	r1, [r3, #12]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	3b1e      	subs	r3, #30
 800220e:	2207      	movs	r2, #7
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	4019      	ands	r1, r3
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	6898      	ldr	r0, [r3, #8]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4613      	mov	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	4413      	add	r3, r2
 8002226:	3b1e      	subs	r3, #30
 8002228:	fa00 f203 	lsl.w	r2, r0, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	60da      	str	r2, [r3, #12]
 8002234:	e019      	b.n	800226a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6919      	ldr	r1, [r3, #16]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4613      	mov	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4413      	add	r3, r2
 8002246:	2207      	movs	r2, #7
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	4019      	ands	r1, r3
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6898      	ldr	r0, [r3, #8]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	fa00 f203 	lsl.w	r2, r0, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b10      	cmp	r3, #16
 8002270:	d003      	beq.n	800227a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002276:	2b11      	cmp	r3, #17
 8002278:	d132      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a1d      	ldr	r2, [pc, #116]	; (80022f4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d125      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d126      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022a0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b10      	cmp	r3, #16
 80022a8:	d11a      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022aa:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a13      	ldr	r2, [pc, #76]	; (80022fc <HAL_ADC_ConfigChannel+0x1ec>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	0c9a      	lsrs	r2, r3, #18
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022c0:	e002      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f9      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x1b2>
 80022ce:	e007      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	f043 0220 	orr.w	r2, r3, #32
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	40012400 	.word	0x40012400
 80022f8:	20000000 	.word	0x20000000
 80022fc:	431bde83 	.word	0x431bde83

08002300 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b01      	cmp	r3, #1
 800231c:	d039      	beq.n	8002392 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f042 0201 	orr.w	r2, r2, #1
 800232c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800232e:	4b1b      	ldr	r3, [pc, #108]	; (800239c <ADC_Enable+0x9c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a1b      	ldr	r2, [pc, #108]	; (80023a0 <ADC_Enable+0xa0>)
 8002334:	fba2 2303 	umull	r2, r3, r2, r3
 8002338:	0c9b      	lsrs	r3, r3, #18
 800233a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800233c:	e002      	b.n	8002344 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	3b01      	subs	r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f9      	bne.n	800233e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800234a:	f7ff fce3 	bl	8001d14 <HAL_GetTick>
 800234e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002350:	e018      	b.n	8002384 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002352:	f7ff fcdf 	bl	8001d14 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d911      	bls.n	8002384 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	f043 0210 	orr.w	r2, r3, #16
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	f043 0201 	orr.w	r2, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e007      	b.n	8002394 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b01      	cmp	r3, #1
 8002390:	d1df      	bne.n	8002352 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000000 	.word	0x20000000
 80023a0:	431bde83 	.word	0x431bde83

080023a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d127      	bne.n	800240e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0201 	bic.w	r2, r2, #1
 80023cc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023ce:	f7ff fca1 	bl	8001d14 <HAL_GetTick>
 80023d2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023d4:	e014      	b.n	8002400 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023d6:	f7ff fc9d 	bl	8001d14 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d90d      	bls.n	8002400 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	f043 0210 	orr.w	r2, r3, #16
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	f043 0201 	orr.w	r2, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e007      	b.n	8002410 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b01      	cmp	r3, #1
 800240c:	d0e3      	beq.n	80023d6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800242e:	2b00      	cmp	r3, #0
 8002430:	d127      	bne.n	8002482 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002448:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800244c:	d115      	bne.n	800247a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002452:	2b00      	cmp	r3, #0
 8002454:	d111      	bne.n	800247a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d105      	bne.n	800247a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	f043 0201 	orr.w	r2, r3, #1
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f7ff fe2c 	bl	80020d8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002480:	e004      	b.n	800248c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4798      	blx	r3
}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f7ff fe21 	bl	80020ea <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024a8:	bf00      	nop
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	f043 0204 	orr.w	r2, r3, #4
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f7ff fe10 	bl	80020fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <__NVIC_SetPriorityGrouping+0x44>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002500:	4013      	ands	r3, r2
 8002502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800250c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002516:	4a04      	ldr	r2, [pc, #16]	; (8002528 <__NVIC_SetPriorityGrouping+0x44>)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	60d3      	str	r3, [r2, #12]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <__NVIC_GetPriorityGrouping+0x18>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	0a1b      	lsrs	r3, r3, #8
 8002536:	f003 0307 	and.w	r3, r3, #7
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	2b00      	cmp	r3, #0
 8002558:	db0b      	blt.n	8002572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	f003 021f 	and.w	r2, r3, #31
 8002560:	4906      	ldr	r1, [pc, #24]	; (800257c <__NVIC_EnableIRQ+0x34>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	2001      	movs	r0, #1
 800256a:	fa00 f202 	lsl.w	r2, r0, r2
 800256e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr
 800257c:	e000e100 	.word	0xe000e100

08002580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	6039      	str	r1, [r7, #0]
 800258a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002590:	2b00      	cmp	r3, #0
 8002592:	db0a      	blt.n	80025aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	b2da      	uxtb	r2, r3
 8002598:	490c      	ldr	r1, [pc, #48]	; (80025cc <__NVIC_SetPriority+0x4c>)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	0112      	lsls	r2, r2, #4
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	440b      	add	r3, r1
 80025a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a8:	e00a      	b.n	80025c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4908      	ldr	r1, [pc, #32]	; (80025d0 <__NVIC_SetPriority+0x50>)
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	3b04      	subs	r3, #4
 80025b8:	0112      	lsls	r2, r2, #4
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	440b      	add	r3, r1
 80025be:	761a      	strb	r2, [r3, #24]
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000e100 	.word	0xe000e100
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	; 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f1c3 0307 	rsb	r3, r3, #7
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	bf28      	it	cs
 80025f2:	2304      	movcs	r3, #4
 80025f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3304      	adds	r3, #4
 80025fa:	2b06      	cmp	r3, #6
 80025fc:	d902      	bls.n	8002604 <NVIC_EncodePriority+0x30>
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3b03      	subs	r3, #3
 8002602:	e000      	b.n	8002606 <NVIC_EncodePriority+0x32>
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43da      	mvns	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	401a      	ands	r2, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800261c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	fa01 f303 	lsl.w	r3, r1, r3
 8002626:	43d9      	mvns	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	4313      	orrs	r3, r2
         );
}
 800262e:	4618      	mov	r0, r3
 8002630:	3724      	adds	r7, #36	; 0x24
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002648:	d301      	bcc.n	800264e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800264a:	2301      	movs	r3, #1
 800264c:	e00f      	b.n	800266e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800264e:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <SysTick_Config+0x40>)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002656:	210f      	movs	r1, #15
 8002658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800265c:	f7ff ff90 	bl	8002580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <SysTick_Config+0x40>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002666:	4b04      	ldr	r3, [pc, #16]	; (8002678 <SysTick_Config+0x40>)
 8002668:	2207      	movs	r2, #7
 800266a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	e000e010 	.word	0xe000e010

0800267c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ff2d 	bl	80024e4 <__NVIC_SetPriorityGrouping>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002692:	b580      	push	{r7, lr}
 8002694:	b086      	sub	sp, #24
 8002696:	af00      	add	r7, sp, #0
 8002698:	4603      	mov	r3, r0
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
 800269e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026a4:	f7ff ff42 	bl	800252c <__NVIC_GetPriorityGrouping>
 80026a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	6978      	ldr	r0, [r7, #20]
 80026b0:	f7ff ff90 	bl	80025d4 <NVIC_EncodePriority>
 80026b4:	4602      	mov	r2, r0
 80026b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ba:	4611      	mov	r1, r2
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff ff5f 	bl	8002580 <__NVIC_SetPriority>
}
 80026c2:	bf00      	nop
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	4603      	mov	r3, r0
 80026d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff35 	bl	8002548 <__NVIC_EnableIRQ>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff ffa2 	bl	8002638 <SysTick_Config>
 80026f4:	4603      	mov	r3, r0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e043      	b.n	800279e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <HAL_DMA_Init+0xa8>)
 800271e:	4413      	add	r3, r2
 8002720:	4a22      	ldr	r2, [pc, #136]	; (80027ac <HAL_DMA_Init+0xac>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	009a      	lsls	r2, r3, #2
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a1f      	ldr	r2, [pc, #124]	; (80027b0 <HAL_DMA_Init+0xb0>)
 8002732:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800274a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800274e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002758:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002764:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002770:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	4313      	orrs	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	bffdfff8 	.word	0xbffdfff8
 80027ac:	cccccccd 	.word	0xcccccccd
 80027b0:	40020000 	.word	0x40020000

080027b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_DMA_Start_IT+0x20>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e04a      	b.n	800286a <HAL_DMA_Start_IT+0xb6>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d13a      	bne.n	800285c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2202      	movs	r2, #2
 80027ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0201 	bic.w	r2, r2, #1
 8002802:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f938 	bl	8002a80 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 020e 	orr.w	r2, r2, #14
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	e00f      	b.n	800284a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0204 	bic.w	r2, r2, #4
 8002838:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 020a 	orr.w	r2, r2, #10
 8002848:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0201 	orr.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	e005      	b.n	8002868 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002864:	2302      	movs	r3, #2
 8002866:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002868:	7dfb      	ldrb	r3, [r7, #23]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	2204      	movs	r2, #4
 8002892:	409a      	lsls	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d04f      	beq.n	800293c <HAL_DMA_IRQHandler+0xc8>
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d04a      	beq.n	800293c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d107      	bne.n	80028c4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0204 	bic.w	r2, r2, #4
 80028c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a66      	ldr	r2, [pc, #408]	; (8002a64 <HAL_DMA_IRQHandler+0x1f0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d029      	beq.n	8002922 <HAL_DMA_IRQHandler+0xae>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a65      	ldr	r2, [pc, #404]	; (8002a68 <HAL_DMA_IRQHandler+0x1f4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d022      	beq.n	800291e <HAL_DMA_IRQHandler+0xaa>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a63      	ldr	r2, [pc, #396]	; (8002a6c <HAL_DMA_IRQHandler+0x1f8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d01a      	beq.n	8002918 <HAL_DMA_IRQHandler+0xa4>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a62      	ldr	r2, [pc, #392]	; (8002a70 <HAL_DMA_IRQHandler+0x1fc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d012      	beq.n	8002912 <HAL_DMA_IRQHandler+0x9e>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a60      	ldr	r2, [pc, #384]	; (8002a74 <HAL_DMA_IRQHandler+0x200>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00a      	beq.n	800290c <HAL_DMA_IRQHandler+0x98>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a5f      	ldr	r2, [pc, #380]	; (8002a78 <HAL_DMA_IRQHandler+0x204>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d102      	bne.n	8002906 <HAL_DMA_IRQHandler+0x92>
 8002900:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002904:	e00e      	b.n	8002924 <HAL_DMA_IRQHandler+0xb0>
 8002906:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800290a:	e00b      	b.n	8002924 <HAL_DMA_IRQHandler+0xb0>
 800290c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002910:	e008      	b.n	8002924 <HAL_DMA_IRQHandler+0xb0>
 8002912:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002916:	e005      	b.n	8002924 <HAL_DMA_IRQHandler+0xb0>
 8002918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800291c:	e002      	b.n	8002924 <HAL_DMA_IRQHandler+0xb0>
 800291e:	2340      	movs	r3, #64	; 0x40
 8002920:	e000      	b.n	8002924 <HAL_DMA_IRQHandler+0xb0>
 8002922:	2304      	movs	r3, #4
 8002924:	4a55      	ldr	r2, [pc, #340]	; (8002a7c <HAL_DMA_IRQHandler+0x208>)
 8002926:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8094 	beq.w	8002a5a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800293a:	e08e      	b.n	8002a5a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	2202      	movs	r2, #2
 8002942:	409a      	lsls	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4013      	ands	r3, r2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d056      	beq.n	80029fa <HAL_DMA_IRQHandler+0x186>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d051      	beq.n	80029fa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10b      	bne.n	800297c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 020a 	bic.w	r2, r2, #10
 8002972:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a38      	ldr	r2, [pc, #224]	; (8002a64 <HAL_DMA_IRQHandler+0x1f0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d029      	beq.n	80029da <HAL_DMA_IRQHandler+0x166>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a37      	ldr	r2, [pc, #220]	; (8002a68 <HAL_DMA_IRQHandler+0x1f4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d022      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x162>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a35      	ldr	r2, [pc, #212]	; (8002a6c <HAL_DMA_IRQHandler+0x1f8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d01a      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x15c>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a34      	ldr	r2, [pc, #208]	; (8002a70 <HAL_DMA_IRQHandler+0x1fc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d012      	beq.n	80029ca <HAL_DMA_IRQHandler+0x156>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a32      	ldr	r2, [pc, #200]	; (8002a74 <HAL_DMA_IRQHandler+0x200>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00a      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x150>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a31      	ldr	r2, [pc, #196]	; (8002a78 <HAL_DMA_IRQHandler+0x204>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d102      	bne.n	80029be <HAL_DMA_IRQHandler+0x14a>
 80029b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029bc:	e00e      	b.n	80029dc <HAL_DMA_IRQHandler+0x168>
 80029be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029c2:	e00b      	b.n	80029dc <HAL_DMA_IRQHandler+0x168>
 80029c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029c8:	e008      	b.n	80029dc <HAL_DMA_IRQHandler+0x168>
 80029ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029ce:	e005      	b.n	80029dc <HAL_DMA_IRQHandler+0x168>
 80029d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029d4:	e002      	b.n	80029dc <HAL_DMA_IRQHandler+0x168>
 80029d6:	2320      	movs	r3, #32
 80029d8:	e000      	b.n	80029dc <HAL_DMA_IRQHandler+0x168>
 80029da:	2302      	movs	r3, #2
 80029dc:	4a27      	ldr	r2, [pc, #156]	; (8002a7c <HAL_DMA_IRQHandler+0x208>)
 80029de:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d034      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80029f8:	e02f      	b.n	8002a5a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	2208      	movs	r2, #8
 8002a00:	409a      	lsls	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d028      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x1e8>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d023      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 020e 	bic.w	r2, r2, #14
 8002a22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d004      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	4798      	blx	r3
    }
  }
  return;
 8002a5a:	bf00      	nop
 8002a5c:	bf00      	nop
}
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40020008 	.word	0x40020008
 8002a68:	4002001c 	.word	0x4002001c
 8002a6c:	40020030 	.word	0x40020030
 8002a70:	40020044 	.word	0x40020044
 8002a74:	40020058 	.word	0x40020058
 8002a78:	4002006c 	.word	0x4002006c
 8002a7c:	40020000 	.word	0x40020000

08002a80 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a96:	2101      	movs	r1, #1
 8002a98:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b10      	cmp	r3, #16
 8002aac:	d108      	bne.n	8002ac0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002abe:	e007      	b.n	8002ad0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	60da      	str	r2, [r3, #12]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr
	...

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b08b      	sub	sp, #44	; 0x2c
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002aea:	2300      	movs	r3, #0
 8002aec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aee:	e127      	b.n	8002d40 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002af0:	2201      	movs	r2, #1
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	f040 8116 	bne.w	8002d3a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b12      	cmp	r3, #18
 8002b14:	d034      	beq.n	8002b80 <HAL_GPIO_Init+0xa4>
 8002b16:	2b12      	cmp	r3, #18
 8002b18:	d80d      	bhi.n	8002b36 <HAL_GPIO_Init+0x5a>
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d02b      	beq.n	8002b76 <HAL_GPIO_Init+0x9a>
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d804      	bhi.n	8002b2c <HAL_GPIO_Init+0x50>
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d031      	beq.n	8002b8a <HAL_GPIO_Init+0xae>
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d01c      	beq.n	8002b64 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b2a:	e048      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d043      	beq.n	8002bb8 <HAL_GPIO_Init+0xdc>
 8002b30:	2b11      	cmp	r3, #17
 8002b32:	d01b      	beq.n	8002b6c <HAL_GPIO_Init+0x90>
          break;
 8002b34:	e043      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b36:	4a89      	ldr	r2, [pc, #548]	; (8002d5c <HAL_GPIO_Init+0x280>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d026      	beq.n	8002b8a <HAL_GPIO_Init+0xae>
 8002b3c:	4a87      	ldr	r2, [pc, #540]	; (8002d5c <HAL_GPIO_Init+0x280>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d806      	bhi.n	8002b50 <HAL_GPIO_Init+0x74>
 8002b42:	4a87      	ldr	r2, [pc, #540]	; (8002d60 <HAL_GPIO_Init+0x284>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d020      	beq.n	8002b8a <HAL_GPIO_Init+0xae>
 8002b48:	4a86      	ldr	r2, [pc, #536]	; (8002d64 <HAL_GPIO_Init+0x288>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d01d      	beq.n	8002b8a <HAL_GPIO_Init+0xae>
          break;
 8002b4e:	e036      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b50:	4a85      	ldr	r2, [pc, #532]	; (8002d68 <HAL_GPIO_Init+0x28c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d019      	beq.n	8002b8a <HAL_GPIO_Init+0xae>
 8002b56:	4a85      	ldr	r2, [pc, #532]	; (8002d6c <HAL_GPIO_Init+0x290>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d016      	beq.n	8002b8a <HAL_GPIO_Init+0xae>
 8002b5c:	4a84      	ldr	r2, [pc, #528]	; (8002d70 <HAL_GPIO_Init+0x294>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <HAL_GPIO_Init+0xae>
          break;
 8002b62:	e02c      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	623b      	str	r3, [r7, #32]
          break;
 8002b6a:	e028      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	3304      	adds	r3, #4
 8002b72:	623b      	str	r3, [r7, #32]
          break;
 8002b74:	e023      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	3308      	adds	r3, #8
 8002b7c:	623b      	str	r3, [r7, #32]
          break;
 8002b7e:	e01e      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	330c      	adds	r3, #12
 8002b86:	623b      	str	r3, [r7, #32]
          break;
 8002b88:	e019      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d102      	bne.n	8002b98 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b92:	2304      	movs	r3, #4
 8002b94:	623b      	str	r3, [r7, #32]
          break;
 8002b96:	e012      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d105      	bne.n	8002bac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ba0:	2308      	movs	r3, #8
 8002ba2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	611a      	str	r2, [r3, #16]
          break;
 8002baa:	e008      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bac:	2308      	movs	r3, #8
 8002bae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	615a      	str	r2, [r3, #20]
          break;
 8002bb6:	e002      	b.n	8002bbe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	623b      	str	r3, [r7, #32]
          break;
 8002bbc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	2bff      	cmp	r3, #255	; 0xff
 8002bc2:	d801      	bhi.n	8002bc8 <HAL_GPIO_Init+0xec>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	e001      	b.n	8002bcc <HAL_GPIO_Init+0xf0>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2bff      	cmp	r3, #255	; 0xff
 8002bd2:	d802      	bhi.n	8002bda <HAL_GPIO_Init+0xfe>
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	e002      	b.n	8002be0 <HAL_GPIO_Init+0x104>
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	3b08      	subs	r3, #8
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	210f      	movs	r1, #15
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	401a      	ands	r2, r3
 8002bf2:	6a39      	ldr	r1, [r7, #32]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8096 	beq.w	8002d3a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c0e:	4b59      	ldr	r3, [pc, #356]	; (8002d74 <HAL_GPIO_Init+0x298>)
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	4a58      	ldr	r2, [pc, #352]	; (8002d74 <HAL_GPIO_Init+0x298>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	6193      	str	r3, [r2, #24]
 8002c1a:	4b56      	ldr	r3, [pc, #344]	; (8002d74 <HAL_GPIO_Init+0x298>)
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c26:	4a54      	ldr	r2, [pc, #336]	; (8002d78 <HAL_GPIO_Init+0x29c>)
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c32:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	220f      	movs	r2, #15
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4013      	ands	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4b      	ldr	r2, [pc, #300]	; (8002d7c <HAL_GPIO_Init+0x2a0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d013      	beq.n	8002c7a <HAL_GPIO_Init+0x19e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4a      	ldr	r2, [pc, #296]	; (8002d80 <HAL_GPIO_Init+0x2a4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00d      	beq.n	8002c76 <HAL_GPIO_Init+0x19a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a49      	ldr	r2, [pc, #292]	; (8002d84 <HAL_GPIO_Init+0x2a8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d007      	beq.n	8002c72 <HAL_GPIO_Init+0x196>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a48      	ldr	r2, [pc, #288]	; (8002d88 <HAL_GPIO_Init+0x2ac>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d101      	bne.n	8002c6e <HAL_GPIO_Init+0x192>
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e006      	b.n	8002c7c <HAL_GPIO_Init+0x1a0>
 8002c6e:	2304      	movs	r3, #4
 8002c70:	e004      	b.n	8002c7c <HAL_GPIO_Init+0x1a0>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e002      	b.n	8002c7c <HAL_GPIO_Init+0x1a0>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_GPIO_Init+0x1a0>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7e:	f002 0203 	and.w	r2, r2, #3
 8002c82:	0092      	lsls	r2, r2, #2
 8002c84:	4093      	lsls	r3, r2
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c8c:	493a      	ldr	r1, [pc, #232]	; (8002d78 <HAL_GPIO_Init+0x29c>)
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	089b      	lsrs	r3, r3, #2
 8002c92:	3302      	adds	r3, #2
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d006      	beq.n	8002cb4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ca6:	4b39      	ldr	r3, [pc, #228]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4938      	ldr	r1, [pc, #224]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]
 8002cb2:	e006      	b.n	8002cc2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cb4:	4b35      	ldr	r3, [pc, #212]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	4933      	ldr	r1, [pc, #204]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d006      	beq.n	8002cdc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cce:	4b2f      	ldr	r3, [pc, #188]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	492e      	ldr	r1, [pc, #184]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
 8002cda:	e006      	b.n	8002cea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cdc:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	4929      	ldr	r1, [pc, #164]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d006      	beq.n	8002d04 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cf6:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	4924      	ldr	r1, [pc, #144]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
 8002d02:	e006      	b.n	8002d12 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d04:	4b21      	ldr	r3, [pc, #132]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	491f      	ldr	r1, [pc, #124]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d006      	beq.n	8002d2c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d1e:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	491a      	ldr	r1, [pc, #104]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60cb      	str	r3, [r1, #12]
 8002d2a:	e006      	b.n	8002d3a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d2c:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	4915      	ldr	r1, [pc, #84]	; (8002d8c <HAL_GPIO_Init+0x2b0>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f47f aed0 	bne.w	8002af0 <HAL_GPIO_Init+0x14>
  }
}
 8002d50:	bf00      	nop
 8002d52:	372c      	adds	r7, #44	; 0x2c
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	10210000 	.word	0x10210000
 8002d60:	10110000 	.word	0x10110000
 8002d64:	10120000 	.word	0x10120000
 8002d68:	10310000 	.word	0x10310000
 8002d6c:	10320000 	.word	0x10320000
 8002d70:	10220000 	.word	0x10220000
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40010000 	.word	0x40010000
 8002d7c:	40010800 	.word	0x40010800
 8002d80:	40010c00 	.word	0x40010c00
 8002d84:	40011000 	.word	0x40011000
 8002d88:	40011400 	.word	0x40011400
 8002d8c:	40010400 	.word	0x40010400

08002d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002da0:	787b      	ldrb	r3, [r7, #1]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002da6:	887a      	ldrh	r2, [r7, #2]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002dac:	e003      	b.n	8002db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dae:	887b      	ldrh	r3, [r7, #2]
 8002db0:	041a      	lsls	r2, r3, #16
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	611a      	str	r2, [r3, #16]
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dd2:	887a      	ldrh	r2, [r7, #2]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	041a      	lsls	r2, r3, #16
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	43d9      	mvns	r1, r3
 8002dde:	887b      	ldrh	r3, [r7, #2]
 8002de0:	400b      	ands	r3, r1
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	611a      	str	r2, [r3, #16]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
	...

08002df4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e26c      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 8087 	beq.w	8002f22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e14:	4b92      	ldr	r3, [pc, #584]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d00c      	beq.n	8002e3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e20:	4b8f      	ldr	r3, [pc, #572]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d112      	bne.n	8002e52 <HAL_RCC_OscConfig+0x5e>
 8002e2c:	4b8c      	ldr	r3, [pc, #560]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e38:	d10b      	bne.n	8002e52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3a:	4b89      	ldr	r3, [pc, #548]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d06c      	beq.n	8002f20 <HAL_RCC_OscConfig+0x12c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d168      	bne.n	8002f20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e246      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5a:	d106      	bne.n	8002e6a <HAL_RCC_OscConfig+0x76>
 8002e5c:	4b80      	ldr	r3, [pc, #512]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a7f      	ldr	r2, [pc, #508]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	e02e      	b.n	8002ec8 <HAL_RCC_OscConfig+0xd4>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x98>
 8002e72:	4b7b      	ldr	r3, [pc, #492]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a7a      	ldr	r2, [pc, #488]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b78      	ldr	r3, [pc, #480]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a77      	ldr	r2, [pc, #476]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e01d      	b.n	8002ec8 <HAL_RCC_OscConfig+0xd4>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0xbc>
 8002e96:	4b72      	ldr	r3, [pc, #456]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a71      	ldr	r2, [pc, #452]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	4b6f      	ldr	r3, [pc, #444]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a6e      	ldr	r2, [pc, #440]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	e00b      	b.n	8002ec8 <HAL_RCC_OscConfig+0xd4>
 8002eb0:	4b6b      	ldr	r3, [pc, #428]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a6a      	ldr	r2, [pc, #424]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	4b68      	ldr	r3, [pc, #416]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a67      	ldr	r2, [pc, #412]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d013      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fe ff20 	bl	8001d14 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed8:	f7fe ff1c 	bl	8001d14 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b64      	cmp	r3, #100	; 0x64
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e1fa      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eea:	4b5d      	ldr	r3, [pc, #372]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0xe4>
 8002ef6:	e014      	b.n	8002f22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7fe ff0c 	bl	8001d14 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f00:	f7fe ff08 	bl	8001d14 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b64      	cmp	r3, #100	; 0x64
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e1e6      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f12:	4b53      	ldr	r3, [pc, #332]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x10c>
 8002f1e:	e000      	b.n	8002f22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d063      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f2e:	4b4c      	ldr	r3, [pc, #304]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f3a:	4b49      	ldr	r3, [pc, #292]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d11c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x18c>
 8002f46:	4b46      	ldr	r3, [pc, #280]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d116      	bne.n	8002f80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f52:	4b43      	ldr	r3, [pc, #268]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <HAL_RCC_OscConfig+0x176>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d001      	beq.n	8002f6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e1ba      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6a:	4b3d      	ldr	r3, [pc, #244]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4939      	ldr	r1, [pc, #228]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7e:	e03a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f88:	4b36      	ldr	r3, [pc, #216]	; (8003064 <HAL_RCC_OscConfig+0x270>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fe fec1 	bl	8001d14 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f96:	f7fe febd 	bl	8001d14 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e19b      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa8:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb4:	4b2a      	ldr	r3, [pc, #168]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4927      	ldr	r1, [pc, #156]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	600b      	str	r3, [r1, #0]
 8002fc8:	e015      	b.n	8002ff6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fca:	4b26      	ldr	r3, [pc, #152]	; (8003064 <HAL_RCC_OscConfig+0x270>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe fea0 	bl	8001d14 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd8:	f7fe fe9c 	bl	8001d14 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e17a      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fea:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d03a      	beq.n	8003078 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d019      	beq.n	800303e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800300a:	4b17      	ldr	r3, [pc, #92]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 800300c:	2201      	movs	r2, #1
 800300e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003010:	f7fe fe80 	bl	8001d14 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003018:	f7fe fe7c 	bl	8001d14 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e15a      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302a:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <HAL_RCC_OscConfig+0x26c>)
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003036:	2001      	movs	r0, #1
 8003038:	f000 faa8 	bl	800358c <RCC_Delay>
 800303c:	e01c      	b.n	8003078 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <HAL_RCC_OscConfig+0x274>)
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003044:	f7fe fe66 	bl	8001d14 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800304a:	e00f      	b.n	800306c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800304c:	f7fe fe62 	bl	8001d14 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d908      	bls.n	800306c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e140      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000
 8003064:	42420000 	.word	0x42420000
 8003068:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800306c:	4b9e      	ldr	r3, [pc, #632]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1e9      	bne.n	800304c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80a6 	beq.w	80031d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003086:	2300      	movs	r3, #0
 8003088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308a:	4b97      	ldr	r3, [pc, #604]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10d      	bne.n	80030b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	4b94      	ldr	r3, [pc, #592]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	4a93      	ldr	r2, [pc, #588]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800309c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a0:	61d3      	str	r3, [r2, #28]
 80030a2:	4b91      	ldr	r3, [pc, #580]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ae:	2301      	movs	r3, #1
 80030b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b2:	4b8e      	ldr	r3, [pc, #568]	; (80032ec <HAL_RCC_OscConfig+0x4f8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d118      	bne.n	80030f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030be:	4b8b      	ldr	r3, [pc, #556]	; (80032ec <HAL_RCC_OscConfig+0x4f8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a8a      	ldr	r2, [pc, #552]	; (80032ec <HAL_RCC_OscConfig+0x4f8>)
 80030c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ca:	f7fe fe23 	bl	8001d14 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d2:	f7fe fe1f 	bl	8001d14 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b64      	cmp	r3, #100	; 0x64
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e0fd      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	4b81      	ldr	r3, [pc, #516]	; (80032ec <HAL_RCC_OscConfig+0x4f8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d106      	bne.n	8003106 <HAL_RCC_OscConfig+0x312>
 80030f8:	4b7b      	ldr	r3, [pc, #492]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	4a7a      	ldr	r2, [pc, #488]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6213      	str	r3, [r2, #32]
 8003104:	e02d      	b.n	8003162 <HAL_RCC_OscConfig+0x36e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0x334>
 800310e:	4b76      	ldr	r3, [pc, #472]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	4a75      	ldr	r2, [pc, #468]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	6213      	str	r3, [r2, #32]
 800311a:	4b73      	ldr	r3, [pc, #460]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4a72      	ldr	r2, [pc, #456]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003120:	f023 0304 	bic.w	r3, r3, #4
 8003124:	6213      	str	r3, [r2, #32]
 8003126:	e01c      	b.n	8003162 <HAL_RCC_OscConfig+0x36e>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b05      	cmp	r3, #5
 800312e:	d10c      	bne.n	800314a <HAL_RCC_OscConfig+0x356>
 8003130:	4b6d      	ldr	r3, [pc, #436]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	4a6c      	ldr	r2, [pc, #432]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003136:	f043 0304 	orr.w	r3, r3, #4
 800313a:	6213      	str	r3, [r2, #32]
 800313c:	4b6a      	ldr	r3, [pc, #424]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4a69      	ldr	r2, [pc, #420]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	6213      	str	r3, [r2, #32]
 8003148:	e00b      	b.n	8003162 <HAL_RCC_OscConfig+0x36e>
 800314a:	4b67      	ldr	r3, [pc, #412]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	4a66      	ldr	r2, [pc, #408]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003150:	f023 0301 	bic.w	r3, r3, #1
 8003154:	6213      	str	r3, [r2, #32]
 8003156:	4b64      	ldr	r3, [pc, #400]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	4a63      	ldr	r2, [pc, #396]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800315c:	f023 0304 	bic.w	r3, r3, #4
 8003160:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d015      	beq.n	8003196 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316a:	f7fe fdd3 	bl	8001d14 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003170:	e00a      	b.n	8003188 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003172:	f7fe fdcf 	bl	8001d14 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003180:	4293      	cmp	r3, r2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e0ab      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003188:	4b57      	ldr	r3, [pc, #348]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0ee      	beq.n	8003172 <HAL_RCC_OscConfig+0x37e>
 8003194:	e014      	b.n	80031c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003196:	f7fe fdbd 	bl	8001d14 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319c:	e00a      	b.n	80031b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319e:	f7fe fdb9 	bl	8001d14 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e095      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b4:	4b4c      	ldr	r3, [pc, #304]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1ee      	bne.n	800319e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d105      	bne.n	80031d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c6:	4b48      	ldr	r3, [pc, #288]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	4a47      	ldr	r2, [pc, #284]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 80031cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 8081 	beq.w	80032de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031dc:	4b42      	ldr	r3, [pc, #264]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 030c 	and.w	r3, r3, #12
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d061      	beq.n	80032ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d146      	bne.n	800327e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f0:	4b3f      	ldr	r3, [pc, #252]	; (80032f0 <HAL_RCC_OscConfig+0x4fc>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f6:	f7fe fd8d 	bl	8001d14 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fe:	f7fe fd89 	bl	8001d14 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e067      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003210:	4b35      	ldr	r3, [pc, #212]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f0      	bne.n	80031fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003224:	d108      	bne.n	8003238 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003226:	4b30      	ldr	r3, [pc, #192]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	492d      	ldr	r1, [pc, #180]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003234:	4313      	orrs	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003238:	4b2b      	ldr	r3, [pc, #172]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a19      	ldr	r1, [r3, #32]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	430b      	orrs	r3, r1
 800324a:	4927      	ldr	r1, [pc, #156]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003250:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <HAL_RCC_OscConfig+0x4fc>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003256:	f7fe fd5d 	bl	8001d14 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325e:	f7fe fd59 	bl	8001d14 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e037      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003270:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x46a>
 800327c:	e02f      	b.n	80032de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327e:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <HAL_RCC_OscConfig+0x4fc>)
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7fe fd46 	bl	8001d14 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328c:	f7fe fd42 	bl	8001d14 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e020      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0x498>
 80032aa:	e018      	b.n	80032de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e013      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_RCC_OscConfig+0x4f4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d106      	bne.n	80032da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40007000 	.word	0x40007000
 80032f0:	42420060 	.word	0x42420060

080032f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0d0      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003308:	4b6a      	ldr	r3, [pc, #424]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d910      	bls.n	8003338 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003316:	4b67      	ldr	r3, [pc, #412]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 0207 	bic.w	r2, r3, #7
 800331e:	4965      	ldr	r1, [pc, #404]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003326:	4b63      	ldr	r3, [pc, #396]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0b8      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d020      	beq.n	8003386 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003350:	4b59      	ldr	r3, [pc, #356]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4a58      	ldr	r2, [pc, #352]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003356:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800335a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003368:	4b53      	ldr	r3, [pc, #332]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	4a52      	ldr	r2, [pc, #328]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003372:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003374:	4b50      	ldr	r3, [pc, #320]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	494d      	ldr	r1, [pc, #308]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	4313      	orrs	r3, r2
 8003384:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d040      	beq.n	8003414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d107      	bne.n	80033aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339a:	4b47      	ldr	r3, [pc, #284]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d115      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e07f      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b2:	4b41      	ldr	r3, [pc, #260]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e073      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c2:	4b3d      	ldr	r3, [pc, #244]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e06b      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033d2:	4b39      	ldr	r3, [pc, #228]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f023 0203 	bic.w	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4936      	ldr	r1, [pc, #216]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033e4:	f7fe fc96 	bl	8001d14 <HAL_GetTick>
 80033e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ea:	e00a      	b.n	8003402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ec:	f7fe fc92 	bl	8001d14 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e053      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	4b2d      	ldr	r3, [pc, #180]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 020c 	and.w	r2, r3, #12
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	429a      	cmp	r2, r3
 8003412:	d1eb      	bne.n	80033ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003414:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d210      	bcs.n	8003444 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 0207 	bic.w	r2, r3, #7
 800342a:	4922      	ldr	r1, [pc, #136]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	4313      	orrs	r3, r2
 8003430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b20      	ldr	r3, [pc, #128]	; (80034b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e032      	b.n	80034aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003450:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4916      	ldr	r1, [pc, #88]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d009      	beq.n	8003482 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800346e:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	490e      	ldr	r1, [pc, #56]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	4313      	orrs	r3, r2
 8003480:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003482:	f000 f821 	bl	80034c8 <HAL_RCC_GetSysClockFreq>
 8003486:	4601      	mov	r1, r0
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <HAL_RCC_ClockConfig+0x1c8>)
 8003494:	5cd3      	ldrb	r3, [r2, r3]
 8003496:	fa21 f303 	lsr.w	r3, r1, r3
 800349a:	4a09      	ldr	r2, [pc, #36]	; (80034c0 <HAL_RCC_ClockConfig+0x1cc>)
 800349c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800349e:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <HAL_RCC_ClockConfig+0x1d0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe fbf4 	bl	8001c90 <HAL_InitTick>

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40022000 	.word	0x40022000
 80034b8:	40021000 	.word	0x40021000
 80034bc:	08005020 	.word	0x08005020
 80034c0:	20000000 	.word	0x20000000
 80034c4:	20000004 	.word	0x20000004

080034c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c8:	b490      	push	{r4, r7}
 80034ca:	b08a      	sub	sp, #40	; 0x28
 80034cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034ce:	4b2a      	ldr	r3, [pc, #168]	; (8003578 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034d0:	1d3c      	adds	r4, r7, #4
 80034d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034d8:	4b28      	ldr	r3, [pc, #160]	; (800357c <HAL_RCC_GetSysClockFreq+0xb4>)
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	61fb      	str	r3, [r7, #28]
 80034e2:	2300      	movs	r3, #0
 80034e4:	61bb      	str	r3, [r7, #24]
 80034e6:	2300      	movs	r3, #0
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034f2:	4b23      	ldr	r3, [pc, #140]	; (8003580 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d002      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0x40>
 8003502:	2b08      	cmp	r3, #8
 8003504:	d003      	beq.n	800350e <HAL_RCC_GetSysClockFreq+0x46>
 8003506:	e02d      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003508:	4b1e      	ldr	r3, [pc, #120]	; (8003584 <HAL_RCC_GetSysClockFreq+0xbc>)
 800350a:	623b      	str	r3, [r7, #32]
      break;
 800350c:	e02d      	b.n	800356a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	0c9b      	lsrs	r3, r3, #18
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800351a:	4413      	add	r3, r2
 800351c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003520:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d013      	beq.n	8003554 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800352c:	4b14      	ldr	r3, [pc, #80]	; (8003580 <HAL_RCC_GetSysClockFreq+0xb8>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	0c5b      	lsrs	r3, r3, #17
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800353a:	4413      	add	r3, r2
 800353c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003540:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	4a0f      	ldr	r2, [pc, #60]	; (8003584 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003546:	fb02 f203 	mul.w	r2, r2, r3
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
 8003552:	e004      	b.n	800355e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	4a0c      	ldr	r2, [pc, #48]	; (8003588 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003558:	fb02 f303 	mul.w	r3, r2, r3
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	623b      	str	r3, [r7, #32]
      break;
 8003562:	e002      	b.n	800356a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003564:	4b07      	ldr	r3, [pc, #28]	; (8003584 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003566:	623b      	str	r3, [r7, #32]
      break;
 8003568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800356a:	6a3b      	ldr	r3, [r7, #32]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3728      	adds	r7, #40	; 0x28
 8003570:	46bd      	mov	sp, r7
 8003572:	bc90      	pop	{r4, r7}
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	0800500c 	.word	0x0800500c
 800357c:	0800501c 	.word	0x0800501c
 8003580:	40021000 	.word	0x40021000
 8003584:	007a1200 	.word	0x007a1200
 8003588:	003d0900 	.word	0x003d0900

0800358c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003594:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <RCC_Delay+0x34>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <RCC_Delay+0x38>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	0a5b      	lsrs	r3, r3, #9
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035a8:	bf00      	nop
  }
  while (Delay --);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1e5a      	subs	r2, r3, #1
 80035ae:	60fa      	str	r2, [r7, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1f9      	bne.n	80035a8 <RCC_Delay+0x1c>
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	20000000 	.word	0x20000000
 80035c4:	10624dd3 	.word	0x10624dd3

080035c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d07d      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80035e4:	2300      	movs	r3, #0
 80035e6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e8:	4b4f      	ldr	r3, [pc, #316]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10d      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f4:	4b4c      	ldr	r3, [pc, #304]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	4a4b      	ldr	r2, [pc, #300]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fe:	61d3      	str	r3, [r2, #28]
 8003600:	4b49      	ldr	r3, [pc, #292]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360c:	2301      	movs	r3, #1
 800360e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003610:	4b46      	ldr	r3, [pc, #280]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003618:	2b00      	cmp	r3, #0
 800361a:	d118      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361c:	4b43      	ldr	r3, [pc, #268]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a42      	ldr	r2, [pc, #264]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003626:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003628:	f7fe fb74 	bl	8001d14 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362e:	e008      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003630:	f7fe fb70 	bl	8001d14 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	; 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e06d      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003642:	4b3a      	ldr	r3, [pc, #232]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800364e:	4b36      	ldr	r3, [pc, #216]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003656:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d02e      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	429a      	cmp	r2, r3
 800366a:	d027      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800366c:	4b2e      	ldr	r3, [pc, #184]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003674:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003676:	4b2e      	ldr	r3, [pc, #184]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800367c:	4b2c      	ldr	r3, [pc, #176]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003682:	4a29      	ldr	r2, [pc, #164]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d014      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003692:	f7fe fb3f 	bl	8001d14 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003698:	e00a      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369a:	f7fe fb3b 	bl	8001d14 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e036      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b0:	4b1d      	ldr	r3, [pc, #116]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0ee      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036bc:	4b1a      	ldr	r3, [pc, #104]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	4917      	ldr	r1, [pc, #92]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036ce:	7dfb      	ldrb	r3, [r7, #23]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d105      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	4a13      	ldr	r2, [pc, #76]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036ec:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	490b      	ldr	r1, [pc, #44]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800370a:	4b07      	ldr	r3, [pc, #28]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	4904      	ldr	r1, [pc, #16]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003718:	4313      	orrs	r3, r2
 800371a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40021000 	.word	0x40021000
 800372c:	40007000 	.word	0x40007000
 8003730:	42420440 	.word	0x42420440

08003734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e041      	b.n	80037ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fe f9d0 	bl	8001b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3304      	adds	r3, #4
 8003770:	4619      	mov	r1, r3
 8003772:	4610      	mov	r0, r2
 8003774:	f000 fa64 	bl	8003c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d001      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e03a      	b.n	8003862 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a18      	ldr	r2, [pc, #96]	; (800386c <HAL_TIM_Base_Start_IT+0x98>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00e      	beq.n	800382c <HAL_TIM_Base_Start_IT+0x58>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003816:	d009      	beq.n	800382c <HAL_TIM_Base_Start_IT+0x58>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a14      	ldr	r2, [pc, #80]	; (8003870 <HAL_TIM_Base_Start_IT+0x9c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d004      	beq.n	800382c <HAL_TIM_Base_Start_IT+0x58>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a13      	ldr	r2, [pc, #76]	; (8003874 <HAL_TIM_Base_Start_IT+0xa0>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d111      	bne.n	8003850 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b06      	cmp	r3, #6
 800383c:	d010      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0201 	orr.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384e:	e007      	b.n	8003860 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	40012c00 	.word	0x40012c00
 8003870:	40000400 	.word	0x40000400
 8003874:	40000800 	.word	0x40000800

08003878 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b02      	cmp	r3, #2
 800388c:	d122      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b02      	cmp	r3, #2
 800389a:	d11b      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0202 	mvn.w	r2, #2
 80038a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f9a4 	bl	8003c08 <HAL_TIM_IC_CaptureCallback>
 80038c0:	e005      	b.n	80038ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f997 	bl	8003bf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f9a6 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d122      	bne.n	8003928 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d11b      	bne.n	8003928 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0204 	mvn.w	r2, #4
 80038f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2202      	movs	r2, #2
 80038fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f97a 	bl	8003c08 <HAL_TIM_IC_CaptureCallback>
 8003914:	e005      	b.n	8003922 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f96d 	bl	8003bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f97c 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b08      	cmp	r3, #8
 8003934:	d122      	bne.n	800397c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b08      	cmp	r3, #8
 8003942:	d11b      	bne.n	800397c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0208 	mvn.w	r2, #8
 800394c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2204      	movs	r2, #4
 8003952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f950 	bl	8003c08 <HAL_TIM_IC_CaptureCallback>
 8003968:	e005      	b.n	8003976 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f943 	bl	8003bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f952 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f003 0310 	and.w	r3, r3, #16
 8003986:	2b10      	cmp	r3, #16
 8003988:	d122      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b10      	cmp	r3, #16
 8003996:	d11b      	bne.n	80039d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f06f 0210 	mvn.w	r2, #16
 80039a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2208      	movs	r2, #8
 80039a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f926 	bl	8003c08 <HAL_TIM_IC_CaptureCallback>
 80039bc:	e005      	b.n	80039ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f919 	bl	8003bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f928 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d10e      	bne.n	80039fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d107      	bne.n	80039fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f06f 0201 	mvn.w	r2, #1
 80039f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7fd ff76 	bl	80018e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a06:	2b80      	cmp	r3, #128	; 0x80
 8003a08:	d10e      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a14:	2b80      	cmp	r3, #128	; 0x80
 8003a16:	d107      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fa6b 	bl	8003efe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a32:	2b40      	cmp	r3, #64	; 0x40
 8003a34:	d10e      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	d107      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f8ec 	bl	8003c2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	d10e      	bne.n	8003a80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f003 0320 	and.w	r3, r3, #32
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	d107      	bne.n	8003a80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0220 	mvn.w	r2, #32
 8003a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fa36 	bl	8003eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a80:	bf00      	nop
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_TIM_ConfigClockSource+0x18>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e0a6      	b.n	8003bee <HAL_TIM_ConfigClockSource+0x166>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003abe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ac6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b40      	cmp	r3, #64	; 0x40
 8003ad6:	d067      	beq.n	8003ba8 <HAL_TIM_ConfigClockSource+0x120>
 8003ad8:	2b40      	cmp	r3, #64	; 0x40
 8003ada:	d80b      	bhi.n	8003af4 <HAL_TIM_ConfigClockSource+0x6c>
 8003adc:	2b10      	cmp	r3, #16
 8003ade:	d073      	beq.n	8003bc8 <HAL_TIM_ConfigClockSource+0x140>
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d802      	bhi.n	8003aea <HAL_TIM_ConfigClockSource+0x62>
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d06f      	beq.n	8003bc8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ae8:	e078      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	d06c      	beq.n	8003bc8 <HAL_TIM_ConfigClockSource+0x140>
 8003aee:	2b30      	cmp	r3, #48	; 0x30
 8003af0:	d06a      	beq.n	8003bc8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003af2:	e073      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003af4:	2b70      	cmp	r3, #112	; 0x70
 8003af6:	d00d      	beq.n	8003b14 <HAL_TIM_ConfigClockSource+0x8c>
 8003af8:	2b70      	cmp	r3, #112	; 0x70
 8003afa:	d804      	bhi.n	8003b06 <HAL_TIM_ConfigClockSource+0x7e>
 8003afc:	2b50      	cmp	r3, #80	; 0x50
 8003afe:	d033      	beq.n	8003b68 <HAL_TIM_ConfigClockSource+0xe0>
 8003b00:	2b60      	cmp	r3, #96	; 0x60
 8003b02:	d041      	beq.n	8003b88 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003b04:	e06a      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0a:	d066      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0x152>
 8003b0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b10:	d017      	beq.n	8003b42 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003b12:	e063      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	6899      	ldr	r1, [r3, #8]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f000 f965 	bl	8003df2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b36:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	609a      	str	r2, [r3, #8]
      break;
 8003b40:	e04c      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6899      	ldr	r1, [r3, #8]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f000 f94e 	bl	8003df2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b64:	609a      	str	r2, [r3, #8]
      break;
 8003b66:	e039      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	6859      	ldr	r1, [r3, #4]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	461a      	mov	r2, r3
 8003b76:	f000 f8c5 	bl	8003d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2150      	movs	r1, #80	; 0x50
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 f91c 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 8003b86:	e029      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	6859      	ldr	r1, [r3, #4]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	461a      	mov	r2, r3
 8003b96:	f000 f8e3 	bl	8003d60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2160      	movs	r1, #96	; 0x60
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 f90c 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 8003ba6:	e019      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	6859      	ldr	r1, [r3, #4]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f000 f8a5 	bl	8003d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2140      	movs	r1, #64	; 0x40
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 f8fc 	bl	8003dbe <TIM_ITRx_SetConfig>
      break;
 8003bc6:	e009      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	f000 f8f3 	bl	8003dbe <TIM_ITRx_SetConfig>
        break;
 8003bd8:	e000      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003bda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr

08003c08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr

08003c1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr
	...

08003c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a29      	ldr	r2, [pc, #164]	; (8003cf8 <TIM_Base_SetConfig+0xb8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00b      	beq.n	8003c70 <TIM_Base_SetConfig+0x30>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5e:	d007      	beq.n	8003c70 <TIM_Base_SetConfig+0x30>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a26      	ldr	r2, [pc, #152]	; (8003cfc <TIM_Base_SetConfig+0xbc>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d003      	beq.n	8003c70 <TIM_Base_SetConfig+0x30>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a25      	ldr	r2, [pc, #148]	; (8003d00 <TIM_Base_SetConfig+0xc0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d108      	bne.n	8003c82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a1c      	ldr	r2, [pc, #112]	; (8003cf8 <TIM_Base_SetConfig+0xb8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00b      	beq.n	8003ca2 <TIM_Base_SetConfig+0x62>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c90:	d007      	beq.n	8003ca2 <TIM_Base_SetConfig+0x62>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <TIM_Base_SetConfig+0xbc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d003      	beq.n	8003ca2 <TIM_Base_SetConfig+0x62>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a18      	ldr	r2, [pc, #96]	; (8003d00 <TIM_Base_SetConfig+0xc0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d108      	bne.n	8003cb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a07      	ldr	r2, [pc, #28]	; (8003cf8 <TIM_Base_SetConfig+0xb8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d103      	bne.n	8003ce8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	615a      	str	r2, [r3, #20]
}
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr
 8003cf8:	40012c00 	.word	0x40012c00
 8003cfc:	40000400 	.word	0x40000400
 8003d00:	40000800 	.word	0x40000800

08003d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f023 0201 	bic.w	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f023 030a 	bic.w	r3, r3, #10
 8003d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	621a      	str	r2, [r3, #32]
}
 8003d56:	bf00      	nop
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr

08003d60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	f023 0210 	bic.w	r2, r3, #16
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	031b      	lsls	r3, r3, #12
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	621a      	str	r2, [r3, #32]
}
 8003db4:	bf00      	nop
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr

08003dbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f043 0307 	orr.w	r3, r3, #7
 8003de0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	609a      	str	r2, [r3, #8]
}
 8003de8:	bf00      	nop
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr

08003df2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b087      	sub	sp, #28
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	021a      	lsls	r2, r3, #8
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	431a      	orrs	r2, r3
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	609a      	str	r2, [r3, #8]
}
 8003e26:	bf00      	nop
 8003e28:	371c      	adds	r7, #28
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e046      	b.n	8003ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a16      	ldr	r2, [pc, #88]	; (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00e      	beq.n	8003eaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e94:	d009      	beq.n	8003eaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a12      	ldr	r2, [pc, #72]	; (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d004      	beq.n	8003eaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a10      	ldr	r2, [pc, #64]	; (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr
 8003ee0:	40012c00 	.word	0x40012c00
 8003ee4:	40000400 	.word	0x40000400
 8003ee8:	40000800 	.word	0x40000800

08003eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr

08003efe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <__errno>:
 8003f10:	4b01      	ldr	r3, [pc, #4]	; (8003f18 <__errno+0x8>)
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	2000000c 	.word	0x2000000c

08003f1c <__libc_init_array>:
 8003f1c:	b570      	push	{r4, r5, r6, lr}
 8003f1e:	2500      	movs	r5, #0
 8003f20:	4e0c      	ldr	r6, [pc, #48]	; (8003f54 <__libc_init_array+0x38>)
 8003f22:	4c0d      	ldr	r4, [pc, #52]	; (8003f58 <__libc_init_array+0x3c>)
 8003f24:	1ba4      	subs	r4, r4, r6
 8003f26:	10a4      	asrs	r4, r4, #2
 8003f28:	42a5      	cmp	r5, r4
 8003f2a:	d109      	bne.n	8003f40 <__libc_init_array+0x24>
 8003f2c:	f001 f84c 	bl	8004fc8 <_init>
 8003f30:	2500      	movs	r5, #0
 8003f32:	4e0a      	ldr	r6, [pc, #40]	; (8003f5c <__libc_init_array+0x40>)
 8003f34:	4c0a      	ldr	r4, [pc, #40]	; (8003f60 <__libc_init_array+0x44>)
 8003f36:	1ba4      	subs	r4, r4, r6
 8003f38:	10a4      	asrs	r4, r4, #2
 8003f3a:	42a5      	cmp	r5, r4
 8003f3c:	d105      	bne.n	8003f4a <__libc_init_array+0x2e>
 8003f3e:	bd70      	pop	{r4, r5, r6, pc}
 8003f40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f44:	4798      	blx	r3
 8003f46:	3501      	adds	r5, #1
 8003f48:	e7ee      	b.n	8003f28 <__libc_init_array+0xc>
 8003f4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f4e:	4798      	blx	r3
 8003f50:	3501      	adds	r5, #1
 8003f52:	e7f2      	b.n	8003f3a <__libc_init_array+0x1e>
 8003f54:	08005078 	.word	0x08005078
 8003f58:	08005078 	.word	0x08005078
 8003f5c:	08005078 	.word	0x08005078
 8003f60:	0800507c 	.word	0x0800507c

08003f64 <memset>:
 8003f64:	4603      	mov	r3, r0
 8003f66:	4402      	add	r2, r0
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d100      	bne.n	8003f6e <memset+0xa>
 8003f6c:	4770      	bx	lr
 8003f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f72:	e7f9      	b.n	8003f68 <memset+0x4>

08003f74 <pow>:
 8003f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f78:	b08f      	sub	sp, #60	; 0x3c
 8003f7a:	461d      	mov	r5, r3
 8003f7c:	4680      	mov	r8, r0
 8003f7e:	4689      	mov	r9, r1
 8003f80:	4614      	mov	r4, r2
 8003f82:	f000 f955 	bl	8004230 <__ieee754_pow>
 8003f86:	4fa1      	ldr	r7, [pc, #644]	; (800420c <pow+0x298>)
 8003f88:	e9cd 0100 	strd	r0, r1, [sp]
 8003f8c:	f997 3000 	ldrsb.w	r3, [r7]
 8003f90:	463e      	mov	r6, r7
 8003f92:	9302      	str	r3, [sp, #8]
 8003f94:	3301      	adds	r3, #1
 8003f96:	d05f      	beq.n	8004058 <pow+0xe4>
 8003f98:	4622      	mov	r2, r4
 8003f9a:	462b      	mov	r3, r5
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	f7fc fd2c 	bl	80009fc <__aeabi_dcmpun>
 8003fa4:	4682      	mov	sl, r0
 8003fa6:	2800      	cmp	r0, #0
 8003fa8:	d156      	bne.n	8004058 <pow+0xe4>
 8003faa:	4642      	mov	r2, r8
 8003fac:	464b      	mov	r3, r9
 8003fae:	4640      	mov	r0, r8
 8003fb0:	4649      	mov	r1, r9
 8003fb2:	f7fc fd23 	bl	80009fc <__aeabi_dcmpun>
 8003fb6:	9003      	str	r0, [sp, #12]
 8003fb8:	b1e8      	cbz	r0, 8003ff6 <pow+0x82>
 8003fba:	2200      	movs	r2, #0
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	f7fc fce9 	bl	8000998 <__aeabi_dcmpeq>
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	d046      	beq.n	8004058 <pow+0xe4>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	2200      	movs	r2, #0
 8003fce:	9304      	str	r3, [sp, #16]
 8003fd0:	4b8f      	ldr	r3, [pc, #572]	; (8004210 <pow+0x29c>)
 8003fd2:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003fd6:	9305      	str	r3, [sp, #20]
 8003fd8:	4b8e      	ldr	r3, [pc, #568]	; (8004214 <pow+0x2a0>)
 8003fda:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003fde:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003fe2:	9b02      	ldr	r3, [sp, #8]
 8003fe4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d031      	beq.n	8004050 <pow+0xdc>
 8003fec:	a804      	add	r0, sp, #16
 8003fee:	f000 fedf 	bl	8004db0 <matherr>
 8003ff2:	bb38      	cbnz	r0, 8004044 <pow+0xd0>
 8003ff4:	e058      	b.n	80040a8 <pow+0x134>
 8003ff6:	f04f 0a00 	mov.w	sl, #0
 8003ffa:	f04f 0b00 	mov.w	fp, #0
 8003ffe:	4652      	mov	r2, sl
 8004000:	465b      	mov	r3, fp
 8004002:	4640      	mov	r0, r8
 8004004:	4649      	mov	r1, r9
 8004006:	f7fc fcc7 	bl	8000998 <__aeabi_dcmpeq>
 800400a:	2800      	cmp	r0, #0
 800400c:	d051      	beq.n	80040b2 <pow+0x13e>
 800400e:	4652      	mov	r2, sl
 8004010:	465b      	mov	r3, fp
 8004012:	4620      	mov	r0, r4
 8004014:	4629      	mov	r1, r5
 8004016:	f7fc fcbf 	bl	8000998 <__aeabi_dcmpeq>
 800401a:	4606      	mov	r6, r0
 800401c:	b308      	cbz	r0, 8004062 <pow+0xee>
 800401e:	2301      	movs	r3, #1
 8004020:	9304      	str	r3, [sp, #16]
 8004022:	4b7b      	ldr	r3, [pc, #492]	; (8004210 <pow+0x29c>)
 8004024:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004028:	9305      	str	r3, [sp, #20]
 800402a:	9b03      	ldr	r3, [sp, #12]
 800402c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004030:	930c      	str	r3, [sp, #48]	; 0x30
 8004032:	9b02      	ldr	r3, [sp, #8]
 8004034:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0d7      	beq.n	8003fec <pow+0x78>
 800403c:	2200      	movs	r2, #0
 800403e:	4b75      	ldr	r3, [pc, #468]	; (8004214 <pow+0x2a0>)
 8004040:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004044:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004046:	b11b      	cbz	r3, 8004050 <pow+0xdc>
 8004048:	f7ff ff62 	bl	8003f10 <__errno>
 800404c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800404e:	6003      	str	r3, [r0, #0]
 8004050:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8004054:	e9cd 3400 	strd	r3, r4, [sp]
 8004058:	e9dd 0100 	ldrd	r0, r1, [sp]
 800405c:	b00f      	add	sp, #60	; 0x3c
 800405e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004062:	4620      	mov	r0, r4
 8004064:	4629      	mov	r1, r5
 8004066:	f000 fe9d 	bl	8004da4 <finite>
 800406a:	2800      	cmp	r0, #0
 800406c:	d0f4      	beq.n	8004058 <pow+0xe4>
 800406e:	4652      	mov	r2, sl
 8004070:	465b      	mov	r3, fp
 8004072:	4620      	mov	r0, r4
 8004074:	4629      	mov	r1, r5
 8004076:	f7fc fc99 	bl	80009ac <__aeabi_dcmplt>
 800407a:	2800      	cmp	r0, #0
 800407c:	d0ec      	beq.n	8004058 <pow+0xe4>
 800407e:	2301      	movs	r3, #1
 8004080:	9304      	str	r3, [sp, #16]
 8004082:	4b63      	ldr	r3, [pc, #396]	; (8004210 <pow+0x29c>)
 8004084:	960c      	str	r6, [sp, #48]	; 0x30
 8004086:	9305      	str	r3, [sp, #20]
 8004088:	f997 3000 	ldrsb.w	r3, [r7]
 800408c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004090:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004094:	b913      	cbnz	r3, 800409c <pow+0x128>
 8004096:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800409a:	e7a7      	b.n	8003fec <pow+0x78>
 800409c:	2000      	movs	r0, #0
 800409e:	495e      	ldr	r1, [pc, #376]	; (8004218 <pow+0x2a4>)
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80040a6:	d1a1      	bne.n	8003fec <pow+0x78>
 80040a8:	f7ff ff32 	bl	8003f10 <__errno>
 80040ac:	2321      	movs	r3, #33	; 0x21
 80040ae:	6003      	str	r3, [r0, #0]
 80040b0:	e7c8      	b.n	8004044 <pow+0xd0>
 80040b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040b6:	f000 fe75 	bl	8004da4 <finite>
 80040ba:	9002      	str	r0, [sp, #8]
 80040bc:	2800      	cmp	r0, #0
 80040be:	d177      	bne.n	80041b0 <pow+0x23c>
 80040c0:	4640      	mov	r0, r8
 80040c2:	4649      	mov	r1, r9
 80040c4:	f000 fe6e 	bl	8004da4 <finite>
 80040c8:	2800      	cmp	r0, #0
 80040ca:	d071      	beq.n	80041b0 <pow+0x23c>
 80040cc:	4620      	mov	r0, r4
 80040ce:	4629      	mov	r1, r5
 80040d0:	f000 fe68 	bl	8004da4 <finite>
 80040d4:	2800      	cmp	r0, #0
 80040d6:	d06b      	beq.n	80041b0 <pow+0x23c>
 80040d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80040dc:	4619      	mov	r1, r3
 80040de:	4610      	mov	r0, r2
 80040e0:	f7fc fc8c 	bl	80009fc <__aeabi_dcmpun>
 80040e4:	f997 7000 	ldrsb.w	r7, [r7]
 80040e8:	4b49      	ldr	r3, [pc, #292]	; (8004210 <pow+0x29c>)
 80040ea:	b1a0      	cbz	r0, 8004116 <pow+0x1a2>
 80040ec:	2201      	movs	r2, #1
 80040ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80040f2:	9b02      	ldr	r3, [sp, #8]
 80040f4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80040f8:	930c      	str	r3, [sp, #48]	; 0x30
 80040fa:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80040fe:	2f00      	cmp	r7, #0
 8004100:	d0c9      	beq.n	8004096 <pow+0x122>
 8004102:	4652      	mov	r2, sl
 8004104:	465b      	mov	r3, fp
 8004106:	4650      	mov	r0, sl
 8004108:	4659      	mov	r1, fp
 800410a:	f7fc fb07 	bl	800071c <__aeabi_ddiv>
 800410e:	2f02      	cmp	r7, #2
 8004110:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004114:	e7c7      	b.n	80040a6 <pow+0x132>
 8004116:	2203      	movs	r2, #3
 8004118:	900c      	str	r0, [sp, #48]	; 0x30
 800411a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800411e:	4620      	mov	r0, r4
 8004120:	4629      	mov	r1, r5
 8004122:	2200      	movs	r2, #0
 8004124:	4b3d      	ldr	r3, [pc, #244]	; (800421c <pow+0x2a8>)
 8004126:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800412a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800412e:	f7fc f9cb 	bl	80004c8 <__aeabi_dmul>
 8004132:	4604      	mov	r4, r0
 8004134:	460d      	mov	r5, r1
 8004136:	bb17      	cbnz	r7, 800417e <pow+0x20a>
 8004138:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800413c:	4b38      	ldr	r3, [pc, #224]	; (8004220 <pow+0x2ac>)
 800413e:	4640      	mov	r0, r8
 8004140:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004144:	4649      	mov	r1, r9
 8004146:	4652      	mov	r2, sl
 8004148:	465b      	mov	r3, fp
 800414a:	f7fc fc2f 	bl	80009ac <__aeabi_dcmplt>
 800414e:	2800      	cmp	r0, #0
 8004150:	d054      	beq.n	80041fc <pow+0x288>
 8004152:	4620      	mov	r0, r4
 8004154:	4629      	mov	r1, r5
 8004156:	f000 fe33 	bl	8004dc0 <rint>
 800415a:	4622      	mov	r2, r4
 800415c:	462b      	mov	r3, r5
 800415e:	f7fc fc1b 	bl	8000998 <__aeabi_dcmpeq>
 8004162:	b920      	cbnz	r0, 800416e <pow+0x1fa>
 8004164:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004168:	4b2e      	ldr	r3, [pc, #184]	; (8004224 <pow+0x2b0>)
 800416a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800416e:	f996 3000 	ldrsb.w	r3, [r6]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d142      	bne.n	80041fc <pow+0x288>
 8004176:	f7ff fecb 	bl	8003f10 <__errno>
 800417a:	2322      	movs	r3, #34	; 0x22
 800417c:	e797      	b.n	80040ae <pow+0x13a>
 800417e:	2200      	movs	r2, #0
 8004180:	4b29      	ldr	r3, [pc, #164]	; (8004228 <pow+0x2b4>)
 8004182:	4640      	mov	r0, r8
 8004184:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004188:	4649      	mov	r1, r9
 800418a:	4652      	mov	r2, sl
 800418c:	465b      	mov	r3, fp
 800418e:	f7fc fc0d 	bl	80009ac <__aeabi_dcmplt>
 8004192:	2800      	cmp	r0, #0
 8004194:	d0eb      	beq.n	800416e <pow+0x1fa>
 8004196:	4620      	mov	r0, r4
 8004198:	4629      	mov	r1, r5
 800419a:	f000 fe11 	bl	8004dc0 <rint>
 800419e:	4622      	mov	r2, r4
 80041a0:	462b      	mov	r3, r5
 80041a2:	f7fc fbf9 	bl	8000998 <__aeabi_dcmpeq>
 80041a6:	2800      	cmp	r0, #0
 80041a8:	d1e1      	bne.n	800416e <pow+0x1fa>
 80041aa:	2200      	movs	r2, #0
 80041ac:	4b1a      	ldr	r3, [pc, #104]	; (8004218 <pow+0x2a4>)
 80041ae:	e7dc      	b.n	800416a <pow+0x1f6>
 80041b0:	2200      	movs	r2, #0
 80041b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041b6:	2300      	movs	r3, #0
 80041b8:	f7fc fbee 	bl	8000998 <__aeabi_dcmpeq>
 80041bc:	2800      	cmp	r0, #0
 80041be:	f43f af4b 	beq.w	8004058 <pow+0xe4>
 80041c2:	4640      	mov	r0, r8
 80041c4:	4649      	mov	r1, r9
 80041c6:	f000 fded 	bl	8004da4 <finite>
 80041ca:	2800      	cmp	r0, #0
 80041cc:	f43f af44 	beq.w	8004058 <pow+0xe4>
 80041d0:	4620      	mov	r0, r4
 80041d2:	4629      	mov	r1, r5
 80041d4:	f000 fde6 	bl	8004da4 <finite>
 80041d8:	2800      	cmp	r0, #0
 80041da:	f43f af3d 	beq.w	8004058 <pow+0xe4>
 80041de:	2304      	movs	r3, #4
 80041e0:	9304      	str	r3, [sp, #16]
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <pow+0x29c>)
 80041e4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80041e8:	9305      	str	r3, [sp, #20]
 80041ea:	2300      	movs	r3, #0
 80041ec:	2400      	movs	r4, #0
 80041ee:	930c      	str	r3, [sp, #48]	; 0x30
 80041f0:	2300      	movs	r3, #0
 80041f2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80041f6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80041fa:	e7b8      	b.n	800416e <pow+0x1fa>
 80041fc:	a804      	add	r0, sp, #16
 80041fe:	f000 fdd7 	bl	8004db0 <matherr>
 8004202:	2800      	cmp	r0, #0
 8004204:	f47f af1e 	bne.w	8004044 <pow+0xd0>
 8004208:	e7b5      	b.n	8004176 <pow+0x202>
 800420a:	bf00      	nop
 800420c:	20000070 	.word	0x20000070
 8004210:	08005030 	.word	0x08005030
 8004214:	3ff00000 	.word	0x3ff00000
 8004218:	fff00000 	.word	0xfff00000
 800421c:	3fe00000 	.word	0x3fe00000
 8004220:	47efffff 	.word	0x47efffff
 8004224:	c7efffff 	.word	0xc7efffff
 8004228:	7ff00000 	.word	0x7ff00000
 800422c:	00000000 	.word	0x00000000

08004230 <__ieee754_pow>:
 8004230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004234:	b091      	sub	sp, #68	; 0x44
 8004236:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800423a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800423e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8004242:	ea55 0302 	orrs.w	r3, r5, r2
 8004246:	4607      	mov	r7, r0
 8004248:	4688      	mov	r8, r1
 800424a:	f000 84b7 	beq.w	8004bbc <__ieee754_pow+0x98c>
 800424e:	4b80      	ldr	r3, [pc, #512]	; (8004450 <__ieee754_pow+0x220>)
 8004250:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8004254:	429c      	cmp	r4, r3
 8004256:	4689      	mov	r9, r1
 8004258:	4682      	mov	sl, r0
 800425a:	dc09      	bgt.n	8004270 <__ieee754_pow+0x40>
 800425c:	d103      	bne.n	8004266 <__ieee754_pow+0x36>
 800425e:	b938      	cbnz	r0, 8004270 <__ieee754_pow+0x40>
 8004260:	42a5      	cmp	r5, r4
 8004262:	dc0d      	bgt.n	8004280 <__ieee754_pow+0x50>
 8004264:	e001      	b.n	800426a <__ieee754_pow+0x3a>
 8004266:	429d      	cmp	r5, r3
 8004268:	dc02      	bgt.n	8004270 <__ieee754_pow+0x40>
 800426a:	429d      	cmp	r5, r3
 800426c:	d10e      	bne.n	800428c <__ieee754_pow+0x5c>
 800426e:	b16a      	cbz	r2, 800428c <__ieee754_pow+0x5c>
 8004270:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004274:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004278:	ea54 030a 	orrs.w	r3, r4, sl
 800427c:	f000 849e 	beq.w	8004bbc <__ieee754_pow+0x98c>
 8004280:	4874      	ldr	r0, [pc, #464]	; (8004454 <__ieee754_pow+0x224>)
 8004282:	b011      	add	sp, #68	; 0x44
 8004284:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004288:	f000 bd94 	b.w	8004db4 <nan>
 800428c:	f1b9 0f00 	cmp.w	r9, #0
 8004290:	da53      	bge.n	800433a <__ieee754_pow+0x10a>
 8004292:	4b71      	ldr	r3, [pc, #452]	; (8004458 <__ieee754_pow+0x228>)
 8004294:	429d      	cmp	r5, r3
 8004296:	dc4e      	bgt.n	8004336 <__ieee754_pow+0x106>
 8004298:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800429c:	429d      	cmp	r5, r3
 800429e:	dd4c      	ble.n	800433a <__ieee754_pow+0x10a>
 80042a0:	152b      	asrs	r3, r5, #20
 80042a2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80042a6:	2b14      	cmp	r3, #20
 80042a8:	dd28      	ble.n	80042fc <__ieee754_pow+0xcc>
 80042aa:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80042ae:	fa22 f103 	lsr.w	r1, r2, r3
 80042b2:	fa01 f303 	lsl.w	r3, r1, r3
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d13f      	bne.n	800433a <__ieee754_pow+0x10a>
 80042ba:	f001 0101 	and.w	r1, r1, #1
 80042be:	f1c1 0302 	rsb	r3, r1, #2
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	2a00      	cmp	r2, #0
 80042c6:	d15c      	bne.n	8004382 <__ieee754_pow+0x152>
 80042c8:	4b61      	ldr	r3, [pc, #388]	; (8004450 <__ieee754_pow+0x220>)
 80042ca:	429d      	cmp	r5, r3
 80042cc:	d126      	bne.n	800431c <__ieee754_pow+0xec>
 80042ce:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80042d2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80042d6:	ea53 030a 	orrs.w	r3, r3, sl
 80042da:	f000 846f 	beq.w	8004bbc <__ieee754_pow+0x98c>
 80042de:	4b5f      	ldr	r3, [pc, #380]	; (800445c <__ieee754_pow+0x22c>)
 80042e0:	429c      	cmp	r4, r3
 80042e2:	dd2c      	ble.n	800433e <__ieee754_pow+0x10e>
 80042e4:	2e00      	cmp	r6, #0
 80042e6:	f280 846f 	bge.w	8004bc8 <__ieee754_pow+0x998>
 80042ea:	f04f 0b00 	mov.w	fp, #0
 80042ee:	f04f 0c00 	mov.w	ip, #0
 80042f2:	4658      	mov	r0, fp
 80042f4:	4661      	mov	r1, ip
 80042f6:	b011      	add	sp, #68	; 0x44
 80042f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042fc:	2a00      	cmp	r2, #0
 80042fe:	d13e      	bne.n	800437e <__ieee754_pow+0x14e>
 8004300:	f1c3 0314 	rsb	r3, r3, #20
 8004304:	fa45 f103 	asr.w	r1, r5, r3
 8004308:	fa01 f303 	lsl.w	r3, r1, r3
 800430c:	42ab      	cmp	r3, r5
 800430e:	f040 8463 	bne.w	8004bd8 <__ieee754_pow+0x9a8>
 8004312:	f001 0101 	and.w	r1, r1, #1
 8004316:	f1c1 0302 	rsb	r3, r1, #2
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	4b50      	ldr	r3, [pc, #320]	; (8004460 <__ieee754_pow+0x230>)
 800431e:	429d      	cmp	r5, r3
 8004320:	d114      	bne.n	800434c <__ieee754_pow+0x11c>
 8004322:	2e00      	cmp	r6, #0
 8004324:	f280 8454 	bge.w	8004bd0 <__ieee754_pow+0x9a0>
 8004328:	463a      	mov	r2, r7
 800432a:	4643      	mov	r3, r8
 800432c:	2000      	movs	r0, #0
 800432e:	494c      	ldr	r1, [pc, #304]	; (8004460 <__ieee754_pow+0x230>)
 8004330:	f7fc f9f4 	bl	800071c <__aeabi_ddiv>
 8004334:	e013      	b.n	800435e <__ieee754_pow+0x12e>
 8004336:	2302      	movs	r3, #2
 8004338:	e7c3      	b.n	80042c2 <__ieee754_pow+0x92>
 800433a:	2300      	movs	r3, #0
 800433c:	e7c1      	b.n	80042c2 <__ieee754_pow+0x92>
 800433e:	2e00      	cmp	r6, #0
 8004340:	dad3      	bge.n	80042ea <__ieee754_pow+0xba>
 8004342:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8004346:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800434a:	e7d2      	b.n	80042f2 <__ieee754_pow+0xc2>
 800434c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8004350:	d108      	bne.n	8004364 <__ieee754_pow+0x134>
 8004352:	463a      	mov	r2, r7
 8004354:	4643      	mov	r3, r8
 8004356:	4638      	mov	r0, r7
 8004358:	4641      	mov	r1, r8
 800435a:	f7fc f8b5 	bl	80004c8 <__aeabi_dmul>
 800435e:	4683      	mov	fp, r0
 8004360:	468c      	mov	ip, r1
 8004362:	e7c6      	b.n	80042f2 <__ieee754_pow+0xc2>
 8004364:	4b3f      	ldr	r3, [pc, #252]	; (8004464 <__ieee754_pow+0x234>)
 8004366:	429e      	cmp	r6, r3
 8004368:	d10b      	bne.n	8004382 <__ieee754_pow+0x152>
 800436a:	f1b9 0f00 	cmp.w	r9, #0
 800436e:	db08      	blt.n	8004382 <__ieee754_pow+0x152>
 8004370:	4638      	mov	r0, r7
 8004372:	4641      	mov	r1, r8
 8004374:	b011      	add	sp, #68	; 0x44
 8004376:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800437a:	f000 bc63 	b.w	8004c44 <__ieee754_sqrt>
 800437e:	2300      	movs	r3, #0
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	4638      	mov	r0, r7
 8004384:	4641      	mov	r1, r8
 8004386:	f000 fd09 	bl	8004d9c <fabs>
 800438a:	4683      	mov	fp, r0
 800438c:	468c      	mov	ip, r1
 800438e:	f1ba 0f00 	cmp.w	sl, #0
 8004392:	d12b      	bne.n	80043ec <__ieee754_pow+0x1bc>
 8004394:	b124      	cbz	r4, 80043a0 <__ieee754_pow+0x170>
 8004396:	4b32      	ldr	r3, [pc, #200]	; (8004460 <__ieee754_pow+0x230>)
 8004398:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800439c:	429a      	cmp	r2, r3
 800439e:	d125      	bne.n	80043ec <__ieee754_pow+0x1bc>
 80043a0:	2e00      	cmp	r6, #0
 80043a2:	da07      	bge.n	80043b4 <__ieee754_pow+0x184>
 80043a4:	465a      	mov	r2, fp
 80043a6:	4663      	mov	r3, ip
 80043a8:	2000      	movs	r0, #0
 80043aa:	492d      	ldr	r1, [pc, #180]	; (8004460 <__ieee754_pow+0x230>)
 80043ac:	f7fc f9b6 	bl	800071c <__aeabi_ddiv>
 80043b0:	4683      	mov	fp, r0
 80043b2:	468c      	mov	ip, r1
 80043b4:	f1b9 0f00 	cmp.w	r9, #0
 80043b8:	da9b      	bge.n	80042f2 <__ieee754_pow+0xc2>
 80043ba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80043be:	9b00      	ldr	r3, [sp, #0]
 80043c0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80043c4:	4323      	orrs	r3, r4
 80043c6:	d108      	bne.n	80043da <__ieee754_pow+0x1aa>
 80043c8:	465a      	mov	r2, fp
 80043ca:	4663      	mov	r3, ip
 80043cc:	4658      	mov	r0, fp
 80043ce:	4661      	mov	r1, ip
 80043d0:	f7fb fec2 	bl	8000158 <__aeabi_dsub>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	e7aa      	b.n	8004330 <__ieee754_pow+0x100>
 80043da:	9b00      	ldr	r3, [sp, #0]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d188      	bne.n	80042f2 <__ieee754_pow+0xc2>
 80043e0:	4658      	mov	r0, fp
 80043e2:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80043e6:	4683      	mov	fp, r0
 80043e8:	469c      	mov	ip, r3
 80043ea:	e782      	b.n	80042f2 <__ieee754_pow+0xc2>
 80043ec:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 80043f0:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80043f4:	930d      	str	r3, [sp, #52]	; 0x34
 80043f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80043f8:	9b00      	ldr	r3, [sp, #0]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	d104      	bne.n	8004408 <__ieee754_pow+0x1d8>
 80043fe:	463a      	mov	r2, r7
 8004400:	4643      	mov	r3, r8
 8004402:	4638      	mov	r0, r7
 8004404:	4641      	mov	r1, r8
 8004406:	e7e3      	b.n	80043d0 <__ieee754_pow+0x1a0>
 8004408:	4b17      	ldr	r3, [pc, #92]	; (8004468 <__ieee754_pow+0x238>)
 800440a:	429d      	cmp	r5, r3
 800440c:	f340 80fe 	ble.w	800460c <__ieee754_pow+0x3dc>
 8004410:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004414:	429d      	cmp	r5, r3
 8004416:	dd0b      	ble.n	8004430 <__ieee754_pow+0x200>
 8004418:	4b10      	ldr	r3, [pc, #64]	; (800445c <__ieee754_pow+0x22c>)
 800441a:	429c      	cmp	r4, r3
 800441c:	dc0e      	bgt.n	800443c <__ieee754_pow+0x20c>
 800441e:	2e00      	cmp	r6, #0
 8004420:	f6bf af63 	bge.w	80042ea <__ieee754_pow+0xba>
 8004424:	a308      	add	r3, pc, #32	; (adr r3, 8004448 <__ieee754_pow+0x218>)
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	4610      	mov	r0, r2
 800442c:	4619      	mov	r1, r3
 800442e:	e794      	b.n	800435a <__ieee754_pow+0x12a>
 8004430:	4b0e      	ldr	r3, [pc, #56]	; (800446c <__ieee754_pow+0x23c>)
 8004432:	429c      	cmp	r4, r3
 8004434:	ddf3      	ble.n	800441e <__ieee754_pow+0x1ee>
 8004436:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <__ieee754_pow+0x230>)
 8004438:	429c      	cmp	r4, r3
 800443a:	dd19      	ble.n	8004470 <__ieee754_pow+0x240>
 800443c:	2e00      	cmp	r6, #0
 800443e:	dcf1      	bgt.n	8004424 <__ieee754_pow+0x1f4>
 8004440:	e753      	b.n	80042ea <__ieee754_pow+0xba>
 8004442:	bf00      	nop
 8004444:	f3af 8000 	nop.w
 8004448:	8800759c 	.word	0x8800759c
 800444c:	7e37e43c 	.word	0x7e37e43c
 8004450:	7ff00000 	.word	0x7ff00000
 8004454:	08005033 	.word	0x08005033
 8004458:	433fffff 	.word	0x433fffff
 800445c:	3fefffff 	.word	0x3fefffff
 8004460:	3ff00000 	.word	0x3ff00000
 8004464:	3fe00000 	.word	0x3fe00000
 8004468:	41e00000 	.word	0x41e00000
 800446c:	3feffffe 	.word	0x3feffffe
 8004470:	4661      	mov	r1, ip
 8004472:	2200      	movs	r2, #0
 8004474:	4b60      	ldr	r3, [pc, #384]	; (80045f8 <__ieee754_pow+0x3c8>)
 8004476:	4658      	mov	r0, fp
 8004478:	f7fb fe6e 	bl	8000158 <__aeabi_dsub>
 800447c:	a354      	add	r3, pc, #336	; (adr r3, 80045d0 <__ieee754_pow+0x3a0>)
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	4604      	mov	r4, r0
 8004484:	460d      	mov	r5, r1
 8004486:	f7fc f81f 	bl	80004c8 <__aeabi_dmul>
 800448a:	a353      	add	r3, pc, #332	; (adr r3, 80045d8 <__ieee754_pow+0x3a8>)
 800448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004490:	4606      	mov	r6, r0
 8004492:	460f      	mov	r7, r1
 8004494:	4620      	mov	r0, r4
 8004496:	4629      	mov	r1, r5
 8004498:	f7fc f816 	bl	80004c8 <__aeabi_dmul>
 800449c:	2200      	movs	r2, #0
 800449e:	4682      	mov	sl, r0
 80044a0:	468b      	mov	fp, r1
 80044a2:	4b56      	ldr	r3, [pc, #344]	; (80045fc <__ieee754_pow+0x3cc>)
 80044a4:	4620      	mov	r0, r4
 80044a6:	4629      	mov	r1, r5
 80044a8:	f7fc f80e 	bl	80004c8 <__aeabi_dmul>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	a14b      	add	r1, pc, #300	; (adr r1, 80045e0 <__ieee754_pow+0x3b0>)
 80044b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044b6:	f7fb fe4f 	bl	8000158 <__aeabi_dsub>
 80044ba:	4622      	mov	r2, r4
 80044bc:	462b      	mov	r3, r5
 80044be:	f7fc f803 	bl	80004c8 <__aeabi_dmul>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	2000      	movs	r0, #0
 80044c8:	494d      	ldr	r1, [pc, #308]	; (8004600 <__ieee754_pow+0x3d0>)
 80044ca:	f7fb fe45 	bl	8000158 <__aeabi_dsub>
 80044ce:	4622      	mov	r2, r4
 80044d0:	462b      	mov	r3, r5
 80044d2:	4680      	mov	r8, r0
 80044d4:	4689      	mov	r9, r1
 80044d6:	4620      	mov	r0, r4
 80044d8:	4629      	mov	r1, r5
 80044da:	f7fb fff5 	bl	80004c8 <__aeabi_dmul>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4640      	mov	r0, r8
 80044e4:	4649      	mov	r1, r9
 80044e6:	f7fb ffef 	bl	80004c8 <__aeabi_dmul>
 80044ea:	a33f      	add	r3, pc, #252	; (adr r3, 80045e8 <__ieee754_pow+0x3b8>)
 80044ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f0:	f7fb ffea 	bl	80004c8 <__aeabi_dmul>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4650      	mov	r0, sl
 80044fa:	4659      	mov	r1, fp
 80044fc:	f7fb fe2c 	bl	8000158 <__aeabi_dsub>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4604      	mov	r4, r0
 8004506:	460d      	mov	r5, r1
 8004508:	4630      	mov	r0, r6
 800450a:	4639      	mov	r1, r7
 800450c:	f7fb fe26 	bl	800015c <__adddf3>
 8004510:	2000      	movs	r0, #0
 8004512:	468b      	mov	fp, r1
 8004514:	4682      	mov	sl, r0
 8004516:	4632      	mov	r2, r6
 8004518:	463b      	mov	r3, r7
 800451a:	f7fb fe1d 	bl	8000158 <__aeabi_dsub>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4620      	mov	r0, r4
 8004524:	4629      	mov	r1, r5
 8004526:	f7fb fe17 	bl	8000158 <__aeabi_dsub>
 800452a:	9b00      	ldr	r3, [sp, #0]
 800452c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800452e:	3b01      	subs	r3, #1
 8004530:	4313      	orrs	r3, r2
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	bf0c      	ite	eq
 8004538:	4c32      	ldreq	r4, [pc, #200]	; (8004604 <__ieee754_pow+0x3d4>)
 800453a:	4c2f      	ldrne	r4, [pc, #188]	; (80045f8 <__ieee754_pow+0x3c8>)
 800453c:	4606      	mov	r6, r0
 800453e:	e9cd 3400 	strd	r3, r4, [sp]
 8004542:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004546:	2400      	movs	r4, #0
 8004548:	460f      	mov	r7, r1
 800454a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800454e:	4622      	mov	r2, r4
 8004550:	462b      	mov	r3, r5
 8004552:	f7fb fe01 	bl	8000158 <__aeabi_dsub>
 8004556:	4652      	mov	r2, sl
 8004558:	465b      	mov	r3, fp
 800455a:	f7fb ffb5 	bl	80004c8 <__aeabi_dmul>
 800455e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004562:	4680      	mov	r8, r0
 8004564:	4689      	mov	r9, r1
 8004566:	4630      	mov	r0, r6
 8004568:	4639      	mov	r1, r7
 800456a:	f7fb ffad 	bl	80004c8 <__aeabi_dmul>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4640      	mov	r0, r8
 8004574:	4649      	mov	r1, r9
 8004576:	f7fb fdf1 	bl	800015c <__adddf3>
 800457a:	4622      	mov	r2, r4
 800457c:	462b      	mov	r3, r5
 800457e:	4680      	mov	r8, r0
 8004580:	4689      	mov	r9, r1
 8004582:	4650      	mov	r0, sl
 8004584:	4659      	mov	r1, fp
 8004586:	f7fb ff9f 	bl	80004c8 <__aeabi_dmul>
 800458a:	4604      	mov	r4, r0
 800458c:	460d      	mov	r5, r1
 800458e:	460b      	mov	r3, r1
 8004590:	4602      	mov	r2, r0
 8004592:	4649      	mov	r1, r9
 8004594:	4640      	mov	r0, r8
 8004596:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800459a:	f7fb fddf 	bl	800015c <__adddf3>
 800459e:	4b1a      	ldr	r3, [pc, #104]	; (8004608 <__ieee754_pow+0x3d8>)
 80045a0:	4682      	mov	sl, r0
 80045a2:	4299      	cmp	r1, r3
 80045a4:	460f      	mov	r7, r1
 80045a6:	460e      	mov	r6, r1
 80045a8:	f340 82e1 	ble.w	8004b6e <__ieee754_pow+0x93e>
 80045ac:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80045b0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80045b4:	4303      	orrs	r3, r0
 80045b6:	f000 81db 	beq.w	8004970 <__ieee754_pow+0x740>
 80045ba:	a30d      	add	r3, pc, #52	; (adr r3, 80045f0 <__ieee754_pow+0x3c0>)
 80045bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045c4:	f7fb ff80 	bl	80004c8 <__aeabi_dmul>
 80045c8:	a309      	add	r3, pc, #36	; (adr r3, 80045f0 <__ieee754_pow+0x3c0>)
 80045ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ce:	e6c4      	b.n	800435a <__ieee754_pow+0x12a>
 80045d0:	60000000 	.word	0x60000000
 80045d4:	3ff71547 	.word	0x3ff71547
 80045d8:	f85ddf44 	.word	0xf85ddf44
 80045dc:	3e54ae0b 	.word	0x3e54ae0b
 80045e0:	55555555 	.word	0x55555555
 80045e4:	3fd55555 	.word	0x3fd55555
 80045e8:	652b82fe 	.word	0x652b82fe
 80045ec:	3ff71547 	.word	0x3ff71547
 80045f0:	8800759c 	.word	0x8800759c
 80045f4:	7e37e43c 	.word	0x7e37e43c
 80045f8:	3ff00000 	.word	0x3ff00000
 80045fc:	3fd00000 	.word	0x3fd00000
 8004600:	3fe00000 	.word	0x3fe00000
 8004604:	bff00000 	.word	0xbff00000
 8004608:	408fffff 	.word	0x408fffff
 800460c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	da08      	bge.n	8004628 <__ieee754_pow+0x3f8>
 8004616:	4658      	mov	r0, fp
 8004618:	4bcd      	ldr	r3, [pc, #820]	; (8004950 <__ieee754_pow+0x720>)
 800461a:	4661      	mov	r1, ip
 800461c:	f7fb ff54 	bl	80004c8 <__aeabi_dmul>
 8004620:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004624:	4683      	mov	fp, r0
 8004626:	460c      	mov	r4, r1
 8004628:	1523      	asrs	r3, r4, #20
 800462a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800462e:	4413      	add	r3, r2
 8004630:	930c      	str	r3, [sp, #48]	; 0x30
 8004632:	4bc8      	ldr	r3, [pc, #800]	; (8004954 <__ieee754_pow+0x724>)
 8004634:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004638:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800463c:	429c      	cmp	r4, r3
 800463e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004642:	dd08      	ble.n	8004656 <__ieee754_pow+0x426>
 8004644:	4bc4      	ldr	r3, [pc, #784]	; (8004958 <__ieee754_pow+0x728>)
 8004646:	429c      	cmp	r4, r3
 8004648:	f340 815b 	ble.w	8004902 <__ieee754_pow+0x6d2>
 800464c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800464e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004652:	3301      	adds	r3, #1
 8004654:	930c      	str	r3, [sp, #48]	; 0x30
 8004656:	f04f 0800 	mov.w	r8, #0
 800465a:	4658      	mov	r0, fp
 800465c:	4629      	mov	r1, r5
 800465e:	4bbf      	ldr	r3, [pc, #764]	; (800495c <__ieee754_pow+0x72c>)
 8004660:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8004664:	444b      	add	r3, r9
 8004666:	e9d3 3400 	ldrd	r3, r4, [r3]
 800466a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800466e:	461a      	mov	r2, r3
 8004670:	4623      	mov	r3, r4
 8004672:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004676:	f7fb fd6f 	bl	8000158 <__aeabi_dsub>
 800467a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800467e:	4606      	mov	r6, r0
 8004680:	460f      	mov	r7, r1
 8004682:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004686:	f7fb fd69 	bl	800015c <__adddf3>
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	2000      	movs	r0, #0
 8004690:	49b3      	ldr	r1, [pc, #716]	; (8004960 <__ieee754_pow+0x730>)
 8004692:	f7fc f843 	bl	800071c <__aeabi_ddiv>
 8004696:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	4630      	mov	r0, r6
 80046a0:	4639      	mov	r1, r7
 80046a2:	f7fb ff11 	bl	80004c8 <__aeabi_dmul>
 80046a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80046aa:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80046ae:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80046b2:	2300      	movs	r3, #0
 80046b4:	2200      	movs	r2, #0
 80046b6:	106d      	asrs	r5, r5, #1
 80046b8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80046bc:	9304      	str	r3, [sp, #16]
 80046be:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80046c2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80046c6:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 80046ca:	4650      	mov	r0, sl
 80046cc:	4659      	mov	r1, fp
 80046ce:	4614      	mov	r4, r2
 80046d0:	461d      	mov	r5, r3
 80046d2:	f7fb fef9 	bl	80004c8 <__aeabi_dmul>
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	4630      	mov	r0, r6
 80046dc:	4639      	mov	r1, r7
 80046de:	f7fb fd3b 	bl	8000158 <__aeabi_dsub>
 80046e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80046e6:	4606      	mov	r6, r0
 80046e8:	460f      	mov	r7, r1
 80046ea:	4620      	mov	r0, r4
 80046ec:	4629      	mov	r1, r5
 80046ee:	f7fb fd33 	bl	8000158 <__aeabi_dsub>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80046fa:	f7fb fd2d 	bl	8000158 <__aeabi_dsub>
 80046fe:	4652      	mov	r2, sl
 8004700:	465b      	mov	r3, fp
 8004702:	f7fb fee1 	bl	80004c8 <__aeabi_dmul>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	4630      	mov	r0, r6
 800470c:	4639      	mov	r1, r7
 800470e:	f7fb fd23 	bl	8000158 <__aeabi_dsub>
 8004712:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004716:	f7fb fed7 	bl	80004c8 <__aeabi_dmul>
 800471a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800471e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004722:	4610      	mov	r0, r2
 8004724:	4619      	mov	r1, r3
 8004726:	f7fb fecf 	bl	80004c8 <__aeabi_dmul>
 800472a:	a377      	add	r3, pc, #476	; (adr r3, 8004908 <__ieee754_pow+0x6d8>)
 800472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004730:	4604      	mov	r4, r0
 8004732:	460d      	mov	r5, r1
 8004734:	f7fb fec8 	bl	80004c8 <__aeabi_dmul>
 8004738:	a375      	add	r3, pc, #468	; (adr r3, 8004910 <__ieee754_pow+0x6e0>)
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	f7fb fd0d 	bl	800015c <__adddf3>
 8004742:	4622      	mov	r2, r4
 8004744:	462b      	mov	r3, r5
 8004746:	f7fb febf 	bl	80004c8 <__aeabi_dmul>
 800474a:	a373      	add	r3, pc, #460	; (adr r3, 8004918 <__ieee754_pow+0x6e8>)
 800474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004750:	f7fb fd04 	bl	800015c <__adddf3>
 8004754:	4622      	mov	r2, r4
 8004756:	462b      	mov	r3, r5
 8004758:	f7fb feb6 	bl	80004c8 <__aeabi_dmul>
 800475c:	a370      	add	r3, pc, #448	; (adr r3, 8004920 <__ieee754_pow+0x6f0>)
 800475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004762:	f7fb fcfb 	bl	800015c <__adddf3>
 8004766:	4622      	mov	r2, r4
 8004768:	462b      	mov	r3, r5
 800476a:	f7fb fead 	bl	80004c8 <__aeabi_dmul>
 800476e:	a36e      	add	r3, pc, #440	; (adr r3, 8004928 <__ieee754_pow+0x6f8>)
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f7fb fcf2 	bl	800015c <__adddf3>
 8004778:	4622      	mov	r2, r4
 800477a:	462b      	mov	r3, r5
 800477c:	f7fb fea4 	bl	80004c8 <__aeabi_dmul>
 8004780:	a36b      	add	r3, pc, #428	; (adr r3, 8004930 <__ieee754_pow+0x700>)
 8004782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004786:	f7fb fce9 	bl	800015c <__adddf3>
 800478a:	4622      	mov	r2, r4
 800478c:	4606      	mov	r6, r0
 800478e:	460f      	mov	r7, r1
 8004790:	462b      	mov	r3, r5
 8004792:	4620      	mov	r0, r4
 8004794:	4629      	mov	r1, r5
 8004796:	f7fb fe97 	bl	80004c8 <__aeabi_dmul>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4630      	mov	r0, r6
 80047a0:	4639      	mov	r1, r7
 80047a2:	f7fb fe91 	bl	80004c8 <__aeabi_dmul>
 80047a6:	4604      	mov	r4, r0
 80047a8:	460d      	mov	r5, r1
 80047aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047ae:	4652      	mov	r2, sl
 80047b0:	465b      	mov	r3, fp
 80047b2:	f7fb fcd3 	bl	800015c <__adddf3>
 80047b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80047ba:	f7fb fe85 	bl	80004c8 <__aeabi_dmul>
 80047be:	4622      	mov	r2, r4
 80047c0:	462b      	mov	r3, r5
 80047c2:	f7fb fccb 	bl	800015c <__adddf3>
 80047c6:	4652      	mov	r2, sl
 80047c8:	4606      	mov	r6, r0
 80047ca:	460f      	mov	r7, r1
 80047cc:	465b      	mov	r3, fp
 80047ce:	4650      	mov	r0, sl
 80047d0:	4659      	mov	r1, fp
 80047d2:	f7fb fe79 	bl	80004c8 <__aeabi_dmul>
 80047d6:	2200      	movs	r2, #0
 80047d8:	4b62      	ldr	r3, [pc, #392]	; (8004964 <__ieee754_pow+0x734>)
 80047da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80047de:	f7fb fcbd 	bl	800015c <__adddf3>
 80047e2:	4632      	mov	r2, r6
 80047e4:	463b      	mov	r3, r7
 80047e6:	f7fb fcb9 	bl	800015c <__adddf3>
 80047ea:	9804      	ldr	r0, [sp, #16]
 80047ec:	460d      	mov	r5, r1
 80047ee:	4604      	mov	r4, r0
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4650      	mov	r0, sl
 80047f6:	4659      	mov	r1, fp
 80047f8:	f7fb fe66 	bl	80004c8 <__aeabi_dmul>
 80047fc:	2200      	movs	r2, #0
 80047fe:	4682      	mov	sl, r0
 8004800:	468b      	mov	fp, r1
 8004802:	4b58      	ldr	r3, [pc, #352]	; (8004964 <__ieee754_pow+0x734>)
 8004804:	4620      	mov	r0, r4
 8004806:	4629      	mov	r1, r5
 8004808:	f7fb fca6 	bl	8000158 <__aeabi_dsub>
 800480c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004810:	f7fb fca2 	bl	8000158 <__aeabi_dsub>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4630      	mov	r0, r6
 800481a:	4639      	mov	r1, r7
 800481c:	f7fb fc9c 	bl	8000158 <__aeabi_dsub>
 8004820:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004824:	f7fb fe50 	bl	80004c8 <__aeabi_dmul>
 8004828:	4622      	mov	r2, r4
 800482a:	4606      	mov	r6, r0
 800482c:	460f      	mov	r7, r1
 800482e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004832:	462b      	mov	r3, r5
 8004834:	f7fb fe48 	bl	80004c8 <__aeabi_dmul>
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	4630      	mov	r0, r6
 800483e:	4639      	mov	r1, r7
 8004840:	f7fb fc8c 	bl	800015c <__adddf3>
 8004844:	4606      	mov	r6, r0
 8004846:	460f      	mov	r7, r1
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	4650      	mov	r0, sl
 800484e:	4659      	mov	r1, fp
 8004850:	f7fb fc84 	bl	800015c <__adddf3>
 8004854:	a338      	add	r3, pc, #224	; (adr r3, 8004938 <__ieee754_pow+0x708>)
 8004856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485a:	9804      	ldr	r0, [sp, #16]
 800485c:	460d      	mov	r5, r1
 800485e:	4604      	mov	r4, r0
 8004860:	f7fb fe32 	bl	80004c8 <__aeabi_dmul>
 8004864:	4652      	mov	r2, sl
 8004866:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800486a:	465b      	mov	r3, fp
 800486c:	4620      	mov	r0, r4
 800486e:	4629      	mov	r1, r5
 8004870:	f7fb fc72 	bl	8000158 <__aeabi_dsub>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4630      	mov	r0, r6
 800487a:	4639      	mov	r1, r7
 800487c:	f7fb fc6c 	bl	8000158 <__aeabi_dsub>
 8004880:	a32f      	add	r3, pc, #188	; (adr r3, 8004940 <__ieee754_pow+0x710>)
 8004882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004886:	f7fb fe1f 	bl	80004c8 <__aeabi_dmul>
 800488a:	a32f      	add	r3, pc, #188	; (adr r3, 8004948 <__ieee754_pow+0x718>)
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	4606      	mov	r6, r0
 8004892:	460f      	mov	r7, r1
 8004894:	4620      	mov	r0, r4
 8004896:	4629      	mov	r1, r5
 8004898:	f7fb fe16 	bl	80004c8 <__aeabi_dmul>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4630      	mov	r0, r6
 80048a2:	4639      	mov	r1, r7
 80048a4:	f7fb fc5a 	bl	800015c <__adddf3>
 80048a8:	4b2f      	ldr	r3, [pc, #188]	; (8004968 <__ieee754_pow+0x738>)
 80048aa:	444b      	add	r3, r9
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	f7fb fc54 	bl	800015c <__adddf3>
 80048b4:	4604      	mov	r4, r0
 80048b6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80048b8:	460d      	mov	r5, r1
 80048ba:	f7fb fd9b 	bl	80003f4 <__aeabi_i2d>
 80048be:	4606      	mov	r6, r0
 80048c0:	460f      	mov	r7, r1
 80048c2:	4b2a      	ldr	r3, [pc, #168]	; (800496c <__ieee754_pow+0x73c>)
 80048c4:	4622      	mov	r2, r4
 80048c6:	444b      	add	r3, r9
 80048c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048cc:	462b      	mov	r3, r5
 80048ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048d2:	f7fb fc43 	bl	800015c <__adddf3>
 80048d6:	4642      	mov	r2, r8
 80048d8:	464b      	mov	r3, r9
 80048da:	f7fb fc3f 	bl	800015c <__adddf3>
 80048de:	4632      	mov	r2, r6
 80048e0:	463b      	mov	r3, r7
 80048e2:	f7fb fc3b 	bl	800015c <__adddf3>
 80048e6:	9804      	ldr	r0, [sp, #16]
 80048e8:	4632      	mov	r2, r6
 80048ea:	463b      	mov	r3, r7
 80048ec:	4682      	mov	sl, r0
 80048ee:	468b      	mov	fp, r1
 80048f0:	f7fb fc32 	bl	8000158 <__aeabi_dsub>
 80048f4:	4642      	mov	r2, r8
 80048f6:	464b      	mov	r3, r9
 80048f8:	f7fb fc2e 	bl	8000158 <__aeabi_dsub>
 80048fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004900:	e60b      	b.n	800451a <__ieee754_pow+0x2ea>
 8004902:	f04f 0801 	mov.w	r8, #1
 8004906:	e6a8      	b.n	800465a <__ieee754_pow+0x42a>
 8004908:	4a454eef 	.word	0x4a454eef
 800490c:	3fca7e28 	.word	0x3fca7e28
 8004910:	93c9db65 	.word	0x93c9db65
 8004914:	3fcd864a 	.word	0x3fcd864a
 8004918:	a91d4101 	.word	0xa91d4101
 800491c:	3fd17460 	.word	0x3fd17460
 8004920:	518f264d 	.word	0x518f264d
 8004924:	3fd55555 	.word	0x3fd55555
 8004928:	db6fabff 	.word	0xdb6fabff
 800492c:	3fdb6db6 	.word	0x3fdb6db6
 8004930:	33333303 	.word	0x33333303
 8004934:	3fe33333 	.word	0x3fe33333
 8004938:	e0000000 	.word	0xe0000000
 800493c:	3feec709 	.word	0x3feec709
 8004940:	dc3a03fd 	.word	0xdc3a03fd
 8004944:	3feec709 	.word	0x3feec709
 8004948:	145b01f5 	.word	0x145b01f5
 800494c:	be3e2fe0 	.word	0xbe3e2fe0
 8004950:	43400000 	.word	0x43400000
 8004954:	0003988e 	.word	0x0003988e
 8004958:	000bb679 	.word	0x000bb679
 800495c:	08005038 	.word	0x08005038
 8004960:	3ff00000 	.word	0x3ff00000
 8004964:	40080000 	.word	0x40080000
 8004968:	08005058 	.word	0x08005058
 800496c:	08005048 	.word	0x08005048
 8004970:	a39b      	add	r3, pc, #620	; (adr r3, 8004be0 <__ieee754_pow+0x9b0>)
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	4640      	mov	r0, r8
 8004978:	4649      	mov	r1, r9
 800497a:	f7fb fbef 	bl	800015c <__adddf3>
 800497e:	4622      	mov	r2, r4
 8004980:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004984:	462b      	mov	r3, r5
 8004986:	4650      	mov	r0, sl
 8004988:	4639      	mov	r1, r7
 800498a:	f7fb fbe5 	bl	8000158 <__aeabi_dsub>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004996:	f7fc f827 	bl	80009e8 <__aeabi_dcmpgt>
 800499a:	2800      	cmp	r0, #0
 800499c:	f47f ae0d 	bne.w	80045ba <__ieee754_pow+0x38a>
 80049a0:	4aa3      	ldr	r2, [pc, #652]	; (8004c30 <__ieee754_pow+0xa00>)
 80049a2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80049a6:	4293      	cmp	r3, r2
 80049a8:	f340 8103 	ble.w	8004bb2 <__ieee754_pow+0x982>
 80049ac:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80049b0:	2000      	movs	r0, #0
 80049b2:	151b      	asrs	r3, r3, #20
 80049b4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80049b8:	fa4a f303 	asr.w	r3, sl, r3
 80049bc:	4433      	add	r3, r6
 80049be:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80049c2:	4f9c      	ldr	r7, [pc, #624]	; (8004c34 <__ieee754_pow+0xa04>)
 80049c4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80049c8:	4117      	asrs	r7, r2
 80049ca:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80049ce:	ea23 0107 	bic.w	r1, r3, r7
 80049d2:	f1c2 0214 	rsb	r2, r2, #20
 80049d6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80049da:	fa4a fa02 	asr.w	sl, sl, r2
 80049de:	2e00      	cmp	r6, #0
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	4620      	mov	r0, r4
 80049e6:	4629      	mov	r1, r5
 80049e8:	bfb8      	it	lt
 80049ea:	f1ca 0a00 	rsblt	sl, sl, #0
 80049ee:	f7fb fbb3 	bl	8000158 <__aeabi_dsub>
 80049f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049fa:	4642      	mov	r2, r8
 80049fc:	464b      	mov	r3, r9
 80049fe:	f7fb fbad 	bl	800015c <__adddf3>
 8004a02:	a379      	add	r3, pc, #484	; (adr r3, 8004be8 <__ieee754_pow+0x9b8>)
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	2000      	movs	r0, #0
 8004a0a:	460d      	mov	r5, r1
 8004a0c:	4604      	mov	r4, r0
 8004a0e:	f7fb fd5b 	bl	80004c8 <__aeabi_dmul>
 8004a12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a16:	4606      	mov	r6, r0
 8004a18:	460f      	mov	r7, r1
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	f7fb fb9b 	bl	8000158 <__aeabi_dsub>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4640      	mov	r0, r8
 8004a28:	4649      	mov	r1, r9
 8004a2a:	f7fb fb95 	bl	8000158 <__aeabi_dsub>
 8004a2e:	a370      	add	r3, pc, #448	; (adr r3, 8004bf0 <__ieee754_pow+0x9c0>)
 8004a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a34:	f7fb fd48 	bl	80004c8 <__aeabi_dmul>
 8004a38:	a36f      	add	r3, pc, #444	; (adr r3, 8004bf8 <__ieee754_pow+0x9c8>)
 8004a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3e:	4680      	mov	r8, r0
 8004a40:	4689      	mov	r9, r1
 8004a42:	4620      	mov	r0, r4
 8004a44:	4629      	mov	r1, r5
 8004a46:	f7fb fd3f 	bl	80004c8 <__aeabi_dmul>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4640      	mov	r0, r8
 8004a50:	4649      	mov	r1, r9
 8004a52:	f7fb fb83 	bl	800015c <__adddf3>
 8004a56:	4604      	mov	r4, r0
 8004a58:	460d      	mov	r5, r1
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4630      	mov	r0, r6
 8004a60:	4639      	mov	r1, r7
 8004a62:	f7fb fb7b 	bl	800015c <__adddf3>
 8004a66:	4632      	mov	r2, r6
 8004a68:	463b      	mov	r3, r7
 8004a6a:	4680      	mov	r8, r0
 8004a6c:	4689      	mov	r9, r1
 8004a6e:	f7fb fb73 	bl	8000158 <__aeabi_dsub>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4620      	mov	r0, r4
 8004a78:	4629      	mov	r1, r5
 8004a7a:	f7fb fb6d 	bl	8000158 <__aeabi_dsub>
 8004a7e:	4642      	mov	r2, r8
 8004a80:	4606      	mov	r6, r0
 8004a82:	460f      	mov	r7, r1
 8004a84:	464b      	mov	r3, r9
 8004a86:	4640      	mov	r0, r8
 8004a88:	4649      	mov	r1, r9
 8004a8a:	f7fb fd1d 	bl	80004c8 <__aeabi_dmul>
 8004a8e:	a35c      	add	r3, pc, #368	; (adr r3, 8004c00 <__ieee754_pow+0x9d0>)
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	4604      	mov	r4, r0
 8004a96:	460d      	mov	r5, r1
 8004a98:	f7fb fd16 	bl	80004c8 <__aeabi_dmul>
 8004a9c:	a35a      	add	r3, pc, #360	; (adr r3, 8004c08 <__ieee754_pow+0x9d8>)
 8004a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa2:	f7fb fb59 	bl	8000158 <__aeabi_dsub>
 8004aa6:	4622      	mov	r2, r4
 8004aa8:	462b      	mov	r3, r5
 8004aaa:	f7fb fd0d 	bl	80004c8 <__aeabi_dmul>
 8004aae:	a358      	add	r3, pc, #352	; (adr r3, 8004c10 <__ieee754_pow+0x9e0>)
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	f7fb fb52 	bl	800015c <__adddf3>
 8004ab8:	4622      	mov	r2, r4
 8004aba:	462b      	mov	r3, r5
 8004abc:	f7fb fd04 	bl	80004c8 <__aeabi_dmul>
 8004ac0:	a355      	add	r3, pc, #340	; (adr r3, 8004c18 <__ieee754_pow+0x9e8>)
 8004ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac6:	f7fb fb47 	bl	8000158 <__aeabi_dsub>
 8004aca:	4622      	mov	r2, r4
 8004acc:	462b      	mov	r3, r5
 8004ace:	f7fb fcfb 	bl	80004c8 <__aeabi_dmul>
 8004ad2:	a353      	add	r3, pc, #332	; (adr r3, 8004c20 <__ieee754_pow+0x9f0>)
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	f7fb fb40 	bl	800015c <__adddf3>
 8004adc:	4622      	mov	r2, r4
 8004ade:	462b      	mov	r3, r5
 8004ae0:	f7fb fcf2 	bl	80004c8 <__aeabi_dmul>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4640      	mov	r0, r8
 8004aea:	4649      	mov	r1, r9
 8004aec:	f7fb fb34 	bl	8000158 <__aeabi_dsub>
 8004af0:	4604      	mov	r4, r0
 8004af2:	460d      	mov	r5, r1
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4640      	mov	r0, r8
 8004afa:	4649      	mov	r1, r9
 8004afc:	f7fb fce4 	bl	80004c8 <__aeabi_dmul>
 8004b00:	2200      	movs	r2, #0
 8004b02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	f7fb fb23 	bl	8000158 <__aeabi_dsub>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b1a:	f7fb fdff 	bl	800071c <__aeabi_ddiv>
 8004b1e:	4632      	mov	r2, r6
 8004b20:	4604      	mov	r4, r0
 8004b22:	460d      	mov	r5, r1
 8004b24:	463b      	mov	r3, r7
 8004b26:	4640      	mov	r0, r8
 8004b28:	4649      	mov	r1, r9
 8004b2a:	f7fb fccd 	bl	80004c8 <__aeabi_dmul>
 8004b2e:	4632      	mov	r2, r6
 8004b30:	463b      	mov	r3, r7
 8004b32:	f7fb fb13 	bl	800015c <__adddf3>
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	4629      	mov	r1, r5
 8004b3e:	f7fb fb0b 	bl	8000158 <__aeabi_dsub>
 8004b42:	4642      	mov	r2, r8
 8004b44:	464b      	mov	r3, r9
 8004b46:	f7fb fb07 	bl	8000158 <__aeabi_dsub>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	2000      	movs	r0, #0
 8004b50:	4939      	ldr	r1, [pc, #228]	; (8004c38 <__ieee754_pow+0xa08>)
 8004b52:	f7fb fb01 	bl	8000158 <__aeabi_dsub>
 8004b56:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004b5a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004b5e:	da2b      	bge.n	8004bb8 <__ieee754_pow+0x988>
 8004b60:	4652      	mov	r2, sl
 8004b62:	f000 f9b9 	bl	8004ed8 <scalbn>
 8004b66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b6a:	f7ff bbf6 	b.w	800435a <__ieee754_pow+0x12a>
 8004b6e:	4b33      	ldr	r3, [pc, #204]	; (8004c3c <__ieee754_pow+0xa0c>)
 8004b70:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8004b74:	429f      	cmp	r7, r3
 8004b76:	f77f af13 	ble.w	80049a0 <__ieee754_pow+0x770>
 8004b7a:	4b31      	ldr	r3, [pc, #196]	; (8004c40 <__ieee754_pow+0xa10>)
 8004b7c:	440b      	add	r3, r1
 8004b7e:	4303      	orrs	r3, r0
 8004b80:	d00b      	beq.n	8004b9a <__ieee754_pow+0x96a>
 8004b82:	a329      	add	r3, pc, #164	; (adr r3, 8004c28 <__ieee754_pow+0x9f8>)
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b8c:	f7fb fc9c 	bl	80004c8 <__aeabi_dmul>
 8004b90:	a325      	add	r3, pc, #148	; (adr r3, 8004c28 <__ieee754_pow+0x9f8>)
 8004b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b96:	f7ff bbe0 	b.w	800435a <__ieee754_pow+0x12a>
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	462b      	mov	r3, r5
 8004b9e:	f7fb fadb 	bl	8000158 <__aeabi_dsub>
 8004ba2:	4642      	mov	r2, r8
 8004ba4:	464b      	mov	r3, r9
 8004ba6:	f7fb ff15 	bl	80009d4 <__aeabi_dcmpge>
 8004baa:	2800      	cmp	r0, #0
 8004bac:	f43f aef8 	beq.w	80049a0 <__ieee754_pow+0x770>
 8004bb0:	e7e7      	b.n	8004b82 <__ieee754_pow+0x952>
 8004bb2:	f04f 0a00 	mov.w	sl, #0
 8004bb6:	e71e      	b.n	80049f6 <__ieee754_pow+0x7c6>
 8004bb8:	4621      	mov	r1, r4
 8004bba:	e7d4      	b.n	8004b66 <__ieee754_pow+0x936>
 8004bbc:	f04f 0b00 	mov.w	fp, #0
 8004bc0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8004c38 <__ieee754_pow+0xa08>
 8004bc4:	f7ff bb95 	b.w	80042f2 <__ieee754_pow+0xc2>
 8004bc8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8004bcc:	f7ff bb91 	b.w	80042f2 <__ieee754_pow+0xc2>
 8004bd0:	4638      	mov	r0, r7
 8004bd2:	4641      	mov	r1, r8
 8004bd4:	f7ff bbc3 	b.w	800435e <__ieee754_pow+0x12e>
 8004bd8:	9200      	str	r2, [sp, #0]
 8004bda:	f7ff bb9f 	b.w	800431c <__ieee754_pow+0xec>
 8004bde:	bf00      	nop
 8004be0:	652b82fe 	.word	0x652b82fe
 8004be4:	3c971547 	.word	0x3c971547
 8004be8:	00000000 	.word	0x00000000
 8004bec:	3fe62e43 	.word	0x3fe62e43
 8004bf0:	fefa39ef 	.word	0xfefa39ef
 8004bf4:	3fe62e42 	.word	0x3fe62e42
 8004bf8:	0ca86c39 	.word	0x0ca86c39
 8004bfc:	be205c61 	.word	0xbe205c61
 8004c00:	72bea4d0 	.word	0x72bea4d0
 8004c04:	3e663769 	.word	0x3e663769
 8004c08:	c5d26bf1 	.word	0xc5d26bf1
 8004c0c:	3ebbbd41 	.word	0x3ebbbd41
 8004c10:	af25de2c 	.word	0xaf25de2c
 8004c14:	3f11566a 	.word	0x3f11566a
 8004c18:	16bebd93 	.word	0x16bebd93
 8004c1c:	3f66c16c 	.word	0x3f66c16c
 8004c20:	5555553e 	.word	0x5555553e
 8004c24:	3fc55555 	.word	0x3fc55555
 8004c28:	c2f8f359 	.word	0xc2f8f359
 8004c2c:	01a56e1f 	.word	0x01a56e1f
 8004c30:	3fe00000 	.word	0x3fe00000
 8004c34:	000fffff 	.word	0x000fffff
 8004c38:	3ff00000 	.word	0x3ff00000
 8004c3c:	4090cbff 	.word	0x4090cbff
 8004c40:	3f6f3400 	.word	0x3f6f3400

08004c44 <__ieee754_sqrt>:
 8004c44:	4b54      	ldr	r3, [pc, #336]	; (8004d98 <__ieee754_sqrt+0x154>)
 8004c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c4a:	438b      	bics	r3, r1
 8004c4c:	4606      	mov	r6, r0
 8004c4e:	460d      	mov	r5, r1
 8004c50:	460a      	mov	r2, r1
 8004c52:	460c      	mov	r4, r1
 8004c54:	d10f      	bne.n	8004c76 <__ieee754_sqrt+0x32>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	f7fb fc35 	bl	80004c8 <__aeabi_dmul>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4630      	mov	r0, r6
 8004c64:	4629      	mov	r1, r5
 8004c66:	f7fb fa79 	bl	800015c <__adddf3>
 8004c6a:	4606      	mov	r6, r0
 8004c6c:	460d      	mov	r5, r1
 8004c6e:	4630      	mov	r0, r6
 8004c70:	4629      	mov	r1, r5
 8004c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c76:	2900      	cmp	r1, #0
 8004c78:	4607      	mov	r7, r0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	dc0e      	bgt.n	8004c9c <__ieee754_sqrt+0x58>
 8004c7e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8004c82:	ea5c 0707 	orrs.w	r7, ip, r7
 8004c86:	d0f2      	beq.n	8004c6e <__ieee754_sqrt+0x2a>
 8004c88:	b141      	cbz	r1, 8004c9c <__ieee754_sqrt+0x58>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	f7fb fa63 	bl	8000158 <__aeabi_dsub>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	f7fb fd41 	bl	800071c <__aeabi_ddiv>
 8004c9a:	e7e6      	b.n	8004c6a <__ieee754_sqrt+0x26>
 8004c9c:	1512      	asrs	r2, r2, #20
 8004c9e:	d074      	beq.n	8004d8a <__ieee754_sqrt+0x146>
 8004ca0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004ca4:	07d5      	lsls	r5, r2, #31
 8004ca6:	f04f 0500 	mov.w	r5, #0
 8004caa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004cae:	bf48      	it	mi
 8004cb0:	0fd9      	lsrmi	r1, r3, #31
 8004cb2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8004cb6:	bf44      	itt	mi
 8004cb8:	005b      	lslmi	r3, r3, #1
 8004cba:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8004cbe:	1051      	asrs	r1, r2, #1
 8004cc0:	0fda      	lsrs	r2, r3, #31
 8004cc2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	2216      	movs	r2, #22
 8004cca:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	1987      	adds	r7, r0, r6
 8004cd2:	42a7      	cmp	r7, r4
 8004cd4:	bfde      	ittt	le
 8004cd6:	19b8      	addle	r0, r7, r6
 8004cd8:	1be4      	suble	r4, r4, r7
 8004cda:	19ad      	addle	r5, r5, r6
 8004cdc:	0fdf      	lsrs	r7, r3, #31
 8004cde:	3a01      	subs	r2, #1
 8004ce0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8004ce4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004ce8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004cec:	d1f0      	bne.n	8004cd0 <__ieee754_sqrt+0x8c>
 8004cee:	f04f 0c20 	mov.w	ip, #32
 8004cf2:	4696      	mov	lr, r2
 8004cf4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004cf8:	4284      	cmp	r4, r0
 8004cfa:	eb06 070e 	add.w	r7, r6, lr
 8004cfe:	dc02      	bgt.n	8004d06 <__ieee754_sqrt+0xc2>
 8004d00:	d112      	bne.n	8004d28 <__ieee754_sqrt+0xe4>
 8004d02:	429f      	cmp	r7, r3
 8004d04:	d810      	bhi.n	8004d28 <__ieee754_sqrt+0xe4>
 8004d06:	2f00      	cmp	r7, #0
 8004d08:	eb07 0e06 	add.w	lr, r7, r6
 8004d0c:	da42      	bge.n	8004d94 <__ieee754_sqrt+0x150>
 8004d0e:	f1be 0f00 	cmp.w	lr, #0
 8004d12:	db3f      	blt.n	8004d94 <__ieee754_sqrt+0x150>
 8004d14:	f100 0801 	add.w	r8, r0, #1
 8004d18:	1a24      	subs	r4, r4, r0
 8004d1a:	4640      	mov	r0, r8
 8004d1c:	429f      	cmp	r7, r3
 8004d1e:	bf88      	it	hi
 8004d20:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 8004d24:	1bdb      	subs	r3, r3, r7
 8004d26:	4432      	add	r2, r6
 8004d28:	0064      	lsls	r4, r4, #1
 8004d2a:	f1bc 0c01 	subs.w	ip, ip, #1
 8004d2e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8004d32:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004d36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004d3a:	d1dd      	bne.n	8004cf8 <__ieee754_sqrt+0xb4>
 8004d3c:	4323      	orrs	r3, r4
 8004d3e:	d006      	beq.n	8004d4e <__ieee754_sqrt+0x10a>
 8004d40:	1c54      	adds	r4, r2, #1
 8004d42:	bf0b      	itete	eq
 8004d44:	4662      	moveq	r2, ip
 8004d46:	3201      	addne	r2, #1
 8004d48:	3501      	addeq	r5, #1
 8004d4a:	f022 0201 	bicne.w	r2, r2, #1
 8004d4e:	106b      	asrs	r3, r5, #1
 8004d50:	0852      	lsrs	r2, r2, #1
 8004d52:	07e8      	lsls	r0, r5, #31
 8004d54:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004d58:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004d5c:	bf48      	it	mi
 8004d5e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8004d62:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8004d66:	4616      	mov	r6, r2
 8004d68:	e781      	b.n	8004c6e <__ieee754_sqrt+0x2a>
 8004d6a:	0adc      	lsrs	r4, r3, #11
 8004d6c:	3915      	subs	r1, #21
 8004d6e:	055b      	lsls	r3, r3, #21
 8004d70:	2c00      	cmp	r4, #0
 8004d72:	d0fa      	beq.n	8004d6a <__ieee754_sqrt+0x126>
 8004d74:	02e6      	lsls	r6, r4, #11
 8004d76:	d50a      	bpl.n	8004d8e <__ieee754_sqrt+0x14a>
 8004d78:	f1c2 0020 	rsb	r0, r2, #32
 8004d7c:	fa23 f000 	lsr.w	r0, r3, r0
 8004d80:	1e55      	subs	r5, r2, #1
 8004d82:	4093      	lsls	r3, r2
 8004d84:	4304      	orrs	r4, r0
 8004d86:	1b4a      	subs	r2, r1, r5
 8004d88:	e78a      	b.n	8004ca0 <__ieee754_sqrt+0x5c>
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	e7f0      	b.n	8004d70 <__ieee754_sqrt+0x12c>
 8004d8e:	0064      	lsls	r4, r4, #1
 8004d90:	3201      	adds	r2, #1
 8004d92:	e7ef      	b.n	8004d74 <__ieee754_sqrt+0x130>
 8004d94:	4680      	mov	r8, r0
 8004d96:	e7bf      	b.n	8004d18 <__ieee754_sqrt+0xd4>
 8004d98:	7ff00000 	.word	0x7ff00000

08004d9c <fabs>:
 8004d9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004da0:	4619      	mov	r1, r3
 8004da2:	4770      	bx	lr

08004da4 <finite>:
 8004da4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004da8:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8004dac:	0fc0      	lsrs	r0, r0, #31
 8004dae:	4770      	bx	lr

08004db0 <matherr>:
 8004db0:	2000      	movs	r0, #0
 8004db2:	4770      	bx	lr

08004db4 <nan>:
 8004db4:	2000      	movs	r0, #0
 8004db6:	4901      	ldr	r1, [pc, #4]	; (8004dbc <nan+0x8>)
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	7ff80000 	.word	0x7ff80000

08004dc0 <rint>:
 8004dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dc2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004dc6:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8004dca:	f1bc 0f13 	cmp.w	ip, #19
 8004dce:	4604      	mov	r4, r0
 8004dd0:	460d      	mov	r5, r1
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4606      	mov	r6, r0
 8004dd6:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8004dda:	dc5a      	bgt.n	8004e92 <rint+0xd2>
 8004ddc:	f1bc 0f00 	cmp.w	ip, #0
 8004de0:	da2b      	bge.n	8004e3a <rint+0x7a>
 8004de2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004de6:	4302      	orrs	r2, r0
 8004de8:	d023      	beq.n	8004e32 <rint+0x72>
 8004dea:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8004dee:	4302      	orrs	r2, r0
 8004df0:	4256      	negs	r6, r2
 8004df2:	4316      	orrs	r6, r2
 8004df4:	0c4b      	lsrs	r3, r1, #17
 8004df6:	0b36      	lsrs	r6, r6, #12
 8004df8:	4934      	ldr	r1, [pc, #208]	; (8004ecc <rint+0x10c>)
 8004dfa:	045b      	lsls	r3, r3, #17
 8004dfc:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8004e00:	ea46 0503 	orr.w	r5, r6, r3
 8004e04:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8004e08:	4602      	mov	r2, r0
 8004e0a:	462b      	mov	r3, r5
 8004e0c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8004e10:	4620      	mov	r0, r4
 8004e12:	4629      	mov	r1, r5
 8004e14:	f7fb f9a2 	bl	800015c <__adddf3>
 8004e18:	e9cd 0100 	strd	r0, r1, [sp]
 8004e1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e20:	462b      	mov	r3, r5
 8004e22:	4622      	mov	r2, r4
 8004e24:	f7fb f998 	bl	8000158 <__aeabi_dsub>
 8004e28:	4604      	mov	r4, r0
 8004e2a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004e2e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8004e32:	4620      	mov	r0, r4
 8004e34:	4629      	mov	r1, r5
 8004e36:	b003      	add	sp, #12
 8004e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e3a:	4a25      	ldr	r2, [pc, #148]	; (8004ed0 <rint+0x110>)
 8004e3c:	fa42 f20c 	asr.w	r2, r2, ip
 8004e40:	4011      	ands	r1, r2
 8004e42:	4301      	orrs	r1, r0
 8004e44:	d0f5      	beq.n	8004e32 <rint+0x72>
 8004e46:	0852      	lsrs	r2, r2, #1
 8004e48:	ea05 0102 	and.w	r1, r5, r2
 8004e4c:	ea50 0601 	orrs.w	r6, r0, r1
 8004e50:	d00c      	beq.n	8004e6c <rint+0xac>
 8004e52:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004e56:	f1bc 0f13 	cmp.w	ip, #19
 8004e5a:	bf0c      	ite	eq
 8004e5c:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8004e60:	2600      	movne	r6, #0
 8004e62:	ea25 0202 	bic.w	r2, r5, r2
 8004e66:	fa43 f30c 	asr.w	r3, r3, ip
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	4917      	ldr	r1, [pc, #92]	; (8004ecc <rint+0x10c>)
 8004e6e:	4632      	mov	r2, r6
 8004e70:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8004e74:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e78:	4620      	mov	r0, r4
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	f7fb f96e 	bl	800015c <__adddf3>
 8004e80:	e9cd 0100 	strd	r0, r1, [sp]
 8004e84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e88:	4622      	mov	r2, r4
 8004e8a:	462b      	mov	r3, r5
 8004e8c:	f7fb f964 	bl	8000158 <__aeabi_dsub>
 8004e90:	e008      	b.n	8004ea4 <rint+0xe4>
 8004e92:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8004e96:	dd08      	ble.n	8004eaa <rint+0xea>
 8004e98:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8004e9c:	d1c9      	bne.n	8004e32 <rint+0x72>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	f7fb f95c 	bl	800015c <__adddf3>
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	460d      	mov	r5, r1
 8004ea8:	e7c3      	b.n	8004e32 <rint+0x72>
 8004eaa:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8004eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004eb2:	40ca      	lsrs	r2, r1
 8004eb4:	4210      	tst	r0, r2
 8004eb6:	d0bc      	beq.n	8004e32 <rint+0x72>
 8004eb8:	0852      	lsrs	r2, r2, #1
 8004eba:	4210      	tst	r0, r2
 8004ebc:	bf1f      	itttt	ne
 8004ebe:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8004ec2:	ea20 0202 	bicne.w	r2, r0, r2
 8004ec6:	410e      	asrne	r6, r1
 8004ec8:	4316      	orrne	r6, r2
 8004eca:	e7cf      	b.n	8004e6c <rint+0xac>
 8004ecc:	08005068 	.word	0x08005068
 8004ed0:	000fffff 	.word	0x000fffff
 8004ed4:	00000000 	.word	0x00000000

08004ed8 <scalbn>:
 8004ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eda:	4616      	mov	r6, r2
 8004edc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	460d      	mov	r5, r1
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	b982      	cbnz	r2, 8004f0a <scalbn+0x32>
 8004ee8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004eec:	4303      	orrs	r3, r0
 8004eee:	d034      	beq.n	8004f5a <scalbn+0x82>
 8004ef0:	4b2d      	ldr	r3, [pc, #180]	; (8004fa8 <scalbn+0xd0>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f7fb fae8 	bl	80004c8 <__aeabi_dmul>
 8004ef8:	4b2c      	ldr	r3, [pc, #176]	; (8004fac <scalbn+0xd4>)
 8004efa:	4604      	mov	r4, r0
 8004efc:	429e      	cmp	r6, r3
 8004efe:	460d      	mov	r5, r1
 8004f00:	da0d      	bge.n	8004f1e <scalbn+0x46>
 8004f02:	a325      	add	r3, pc, #148	; (adr r3, 8004f98 <scalbn+0xc0>)
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	e01c      	b.n	8004f44 <scalbn+0x6c>
 8004f0a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8004f0e:	42ba      	cmp	r2, r7
 8004f10:	d109      	bne.n	8004f26 <scalbn+0x4e>
 8004f12:	4602      	mov	r2, r0
 8004f14:	f7fb f922 	bl	800015c <__adddf3>
 8004f18:	4604      	mov	r4, r0
 8004f1a:	460d      	mov	r5, r1
 8004f1c:	e01d      	b.n	8004f5a <scalbn+0x82>
 8004f1e:	460b      	mov	r3, r1
 8004f20:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004f24:	3a36      	subs	r2, #54	; 0x36
 8004f26:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004f2a:	4432      	add	r2, r6
 8004f2c:	428a      	cmp	r2, r1
 8004f2e:	dd0c      	ble.n	8004f4a <scalbn+0x72>
 8004f30:	4622      	mov	r2, r4
 8004f32:	462b      	mov	r3, r5
 8004f34:	a11a      	add	r1, pc, #104	; (adr r1, 8004fa0 <scalbn+0xc8>)
 8004f36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f3a:	f000 f83b 	bl	8004fb4 <copysign>
 8004f3e:	a318      	add	r3, pc, #96	; (adr r3, 8004fa0 <scalbn+0xc8>)
 8004f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f44:	f7fb fac0 	bl	80004c8 <__aeabi_dmul>
 8004f48:	e7e6      	b.n	8004f18 <scalbn+0x40>
 8004f4a:	2a00      	cmp	r2, #0
 8004f4c:	dd08      	ble.n	8004f60 <scalbn+0x88>
 8004f4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004f52:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004f56:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	4629      	mov	r1, r5
 8004f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f60:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004f64:	da0b      	bge.n	8004f7e <scalbn+0xa6>
 8004f66:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004f6a:	429e      	cmp	r6, r3
 8004f6c:	4622      	mov	r2, r4
 8004f6e:	462b      	mov	r3, r5
 8004f70:	dce0      	bgt.n	8004f34 <scalbn+0x5c>
 8004f72:	a109      	add	r1, pc, #36	; (adr r1, 8004f98 <scalbn+0xc0>)
 8004f74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f78:	f000 f81c 	bl	8004fb4 <copysign>
 8004f7c:	e7c1      	b.n	8004f02 <scalbn+0x2a>
 8004f7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004f82:	3236      	adds	r2, #54	; 0x36
 8004f84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004f88:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	4629      	mov	r1, r5
 8004f90:	2200      	movs	r2, #0
 8004f92:	4b07      	ldr	r3, [pc, #28]	; (8004fb0 <scalbn+0xd8>)
 8004f94:	e7d6      	b.n	8004f44 <scalbn+0x6c>
 8004f96:	bf00      	nop
 8004f98:	c2f8f359 	.word	0xc2f8f359
 8004f9c:	01a56e1f 	.word	0x01a56e1f
 8004fa0:	8800759c 	.word	0x8800759c
 8004fa4:	7e37e43c 	.word	0x7e37e43c
 8004fa8:	43500000 	.word	0x43500000
 8004fac:	ffff3cb0 	.word	0xffff3cb0
 8004fb0:	3c900000 	.word	0x3c900000

08004fb4 <copysign>:
 8004fb4:	b530      	push	{r4, r5, lr}
 8004fb6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004fba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fbe:	ea42 0503 	orr.w	r5, r2, r3
 8004fc2:	4629      	mov	r1, r5
 8004fc4:	bd30      	pop	{r4, r5, pc}
	...

08004fc8 <_init>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	bf00      	nop
 8004fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fce:	bc08      	pop	{r3}
 8004fd0:	469e      	mov	lr, r3
 8004fd2:	4770      	bx	lr

08004fd4 <_fini>:
 8004fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd6:	bf00      	nop
 8004fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fda:	bc08      	pop	{r3}
 8004fdc:	469e      	mov	lr, r3
 8004fde:	4770      	bx	lr
