
amplifer_fan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c28  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005d38  08005d38  00015d38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dd0  08005dd0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005dd0  08005dd0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005dd0  08005dd0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dd0  08005dd0  00015dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dd4  08005dd4  00015dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000074  08005e4c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08005e4c  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dad6  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020ac  00000000  00000000  0002db73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c38  00000000  00000000  0002fc20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b30  00000000  00000000  00030858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001925d  00000000  00000000  00031388  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b202  00000000  00000000  0004a5e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ebed  00000000  00000000  000557e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e43d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003674  00000000  00000000  000e4450  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005d20 	.word	0x08005d20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005d20 	.word	0x08005d20

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	d1ed      	bne.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__gesf2>:
 8000ce4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ce8:	e006      	b.n	8000cf8 <__cmpsf2+0x4>
 8000cea:	bf00      	nop

08000cec <__lesf2>:
 8000cec:	f04f 0c01 	mov.w	ip, #1
 8000cf0:	e002      	b.n	8000cf8 <__cmpsf2+0x4>
 8000cf2:	bf00      	nop

08000cf4 <__cmpsf2>:
 8000cf4:	f04f 0c01 	mov.w	ip, #1
 8000cf8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cfc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d08:	bf18      	it	ne
 8000d0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d0e:	d011      	beq.n	8000d34 <__cmpsf2+0x40>
 8000d10:	b001      	add	sp, #4
 8000d12:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d16:	bf18      	it	ne
 8000d18:	ea90 0f01 	teqne	r0, r1
 8000d1c:	bf58      	it	pl
 8000d1e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d22:	bf88      	it	hi
 8000d24:	17c8      	asrhi	r0, r1, #31
 8000d26:	bf38      	it	cc
 8000d28:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d2c:	bf18      	it	ne
 8000d2e:	f040 0001 	orrne.w	r0, r0, #1
 8000d32:	4770      	bx	lr
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	d102      	bne.n	8000d40 <__cmpsf2+0x4c>
 8000d3a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d3e:	d105      	bne.n	8000d4c <__cmpsf2+0x58>
 8000d40:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d44:	d1e4      	bne.n	8000d10 <__cmpsf2+0x1c>
 8000d46:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d4a:	d0e1      	beq.n	8000d10 <__cmpsf2+0x1c>
 8000d4c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <__aeabi_cfrcmple>:
 8000d54:	4684      	mov	ip, r0
 8000d56:	4608      	mov	r0, r1
 8000d58:	4661      	mov	r1, ip
 8000d5a:	e7ff      	b.n	8000d5c <__aeabi_cfcmpeq>

08000d5c <__aeabi_cfcmpeq>:
 8000d5c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d5e:	f7ff ffc9 	bl	8000cf4 <__cmpsf2>
 8000d62:	2800      	cmp	r0, #0
 8000d64:	bf48      	it	mi
 8000d66:	f110 0f00 	cmnmi.w	r0, #0
 8000d6a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d6c <__aeabi_fcmpeq>:
 8000d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d70:	f7ff fff4 	bl	8000d5c <__aeabi_cfcmpeq>
 8000d74:	bf0c      	ite	eq
 8000d76:	2001      	moveq	r0, #1
 8000d78:	2000      	movne	r0, #0
 8000d7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7e:	bf00      	nop

08000d80 <__aeabi_fcmplt>:
 8000d80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d84:	f7ff ffea 	bl	8000d5c <__aeabi_cfcmpeq>
 8000d88:	bf34      	ite	cc
 8000d8a:	2001      	movcc	r0, #1
 8000d8c:	2000      	movcs	r0, #0
 8000d8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d92:	bf00      	nop

08000d94 <__aeabi_fcmple>:
 8000d94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d98:	f7ff ffe0 	bl	8000d5c <__aeabi_cfcmpeq>
 8000d9c:	bf94      	ite	ls
 8000d9e:	2001      	movls	r0, #1
 8000da0:	2000      	movhi	r0, #0
 8000da2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da6:	bf00      	nop

08000da8 <__aeabi_fcmpge>:
 8000da8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dac:	f7ff ffd2 	bl	8000d54 <__aeabi_cfrcmple>
 8000db0:	bf94      	ite	ls
 8000db2:	2001      	movls	r0, #1
 8000db4:	2000      	movhi	r0, #0
 8000db6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dba:	bf00      	nop

08000dbc <__aeabi_fcmpgt>:
 8000dbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc0:	f7ff ffc8 	bl	8000d54 <__aeabi_cfrcmple>
 8000dc4:	bf34      	ite	cc
 8000dc6:	2001      	movcc	r0, #1
 8000dc8:	2000      	movcs	r0, #0
 8000dca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dce:	bf00      	nop

08000dd0 <__aeabi_f2iz>:
 8000dd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000dd4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000dd8:	d30f      	bcc.n	8000dfa <__aeabi_f2iz+0x2a>
 8000dda:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000dde:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000de2:	d90d      	bls.n	8000e00 <__aeabi_f2iz+0x30>
 8000de4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000df0:	fa23 f002 	lsr.w	r0, r3, r2
 8000df4:	bf18      	it	ne
 8000df6:	4240      	negne	r0, r0
 8000df8:	4770      	bx	lr
 8000dfa:	f04f 0000 	mov.w	r0, #0
 8000dfe:	4770      	bx	lr
 8000e00:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e04:	d101      	bne.n	8000e0a <__aeabi_f2iz+0x3a>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	d105      	bne.n	8000e16 <__aeabi_f2iz+0x46>
 8000e0a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e0e:	bf08      	it	eq
 8000e10:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e14:	4770      	bx	lr
 8000e16:	f04f 0000 	mov.w	r0, #0
 8000e1a:	4770      	bx	lr

08000e1c <reverse>:

	LCD_string(string);
}

void reverse(char* str, int len)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8000e30:	e018      	b.n	8000e64 <reverse+0x48>
        temp = str[i];
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4413      	add	r3, r2
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	441a      	add	r2, r3
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	6879      	ldr	r1, [r7, #4]
 8000e46:	440b      	add	r3, r1
 8000e48:	7812      	ldrb	r2, [r2, #0]
 8000e4a:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	701a      	strb	r2, [r3, #0]
        i++;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	617b      	str	r3, [r7, #20]
        j--;
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	dbe2      	blt.n	8000e32 <reverse+0x16>
    }
}
 8000e6c:	bf00      	nop
 8000e6e:	371c      	adds	r7, #28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
	...

08000e78 <intToStr>:

int intToStr(int x, char *str, int d) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
    while (x) {
 8000e88:	e01d      	b.n	8000ec6 <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <intToStr+0x8c>)
 8000e8e:	fb83 1302 	smull	r1, r3, r3, r2
 8000e92:	1099      	asrs	r1, r3, #2
 8000e94:	17d3      	asrs	r3, r2, #31
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	460b      	mov	r3, r1
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	1ad1      	subs	r1, r2, r3
 8000ea2:	b2ca      	uxtb	r2, r1
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	1c59      	adds	r1, r3, #1
 8000ea8:	6179      	str	r1, [r7, #20]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	440b      	add	r3, r1
 8000eb0:	3230      	adds	r2, #48	; 0x30
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <intToStr+0x8c>)
 8000eba:	fb82 1203 	smull	r1, r2, r2, r3
 8000ebe:	1092      	asrs	r2, r2, #2
 8000ec0:	17db      	asrs	r3, r3, #31
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	60fb      	str	r3, [r7, #12]
    while (x) {
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1de      	bne.n	8000e8a <intToStr+0x12>
    }
    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8000ecc:	e007      	b.n	8000ede <intToStr+0x66>
        str[i++] = '0';
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	1c5a      	adds	r2, r3, #1
 8000ed2:	617a      	str	r2, [r7, #20]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	4413      	add	r3, r2
 8000eda:	2230      	movs	r2, #48	; 0x30
 8000edc:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	dbf3      	blt.n	8000ece <intToStr+0x56>

    reverse(str, i);
 8000ee6:	6979      	ldr	r1, [r7, #20]
 8000ee8:	68b8      	ldr	r0, [r7, #8]
 8000eea:	f7ff ff97 	bl	8000e1c <reverse>
    str[i] = '\0';
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	68ba      	ldr	r2, [r7, #8]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]

    return i;
 8000ef8:	697b      	ldr	r3, [r7, #20]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	66666667 	.word	0x66666667

08000f08 <ftoa>:

void ftoa(float n, char* res, int afterpoint) {
 8000f08:	b5b0      	push	{r4, r5, r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f7ff ff5b 	bl	8000dd0 <__aeabi_f2iz>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8000f1e:	69f8      	ldr	r0, [r7, #28]
 8000f20:	f7ff fe8c 	bl	8000c3c <__aeabi_i2f>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4619      	mov	r1, r3
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f7ff fdd1 	bl	8000ad0 <__aeabi_fsub>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	61bb      	str	r3, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	69f8      	ldr	r0, [r7, #28]
 8000f38:	f7ff ff9e 	bl	8000e78 <intToStr>
 8000f3c:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d02c      	beq.n	8000f9e <ftoa+0x96>
        res[i] = '.'; // add dot
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	4413      	add	r3, r2
 8000f4a:	222e      	movs	r2, #46	; 0x2e
 8000f4c:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8000f4e:	69b8      	ldr	r0, [r7, #24]
 8000f50:	f7ff fa62 	bl	8000418 <__aeabi_f2d>
 8000f54:	4604      	mov	r4, r0
 8000f56:	460d      	mov	r5, r1
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff fa4b 	bl	80003f4 <__aeabi_i2d>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	f04f 0000 	mov.w	r0, #0
 8000f66:	4910      	ldr	r1, [pc, #64]	; (8000fa8 <ftoa+0xa0>)
 8000f68:	f003 feb0 	bl	8004ccc <pow>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4620      	mov	r0, r4
 8000f72:	4629      	mov	r1, r5
 8000f74:	f7ff faa8 	bl	80004c8 <__aeabi_dmul>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	460c      	mov	r4, r1
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	4621      	mov	r1, r4
 8000f80:	f7ff fd52 	bl	8000a28 <__aeabi_d2f>
 8000f84:	4603      	mov	r3, r0
 8000f86:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8000f88:	69b8      	ldr	r0, [r7, #24]
 8000f8a:	f7ff ff21 	bl	8000dd0 <__aeabi_f2iz>
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	3301      	adds	r3, #1
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	4413      	add	r3, r2
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff ff6d 	bl	8000e78 <intToStr>
    }
}
 8000f9e:	bf00      	nop
 8000fa0:	3720      	adds	r7, #32
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40240000 	.word	0x40240000

08000fac <LCD_test>:
 */
//I use a LCD display with 2 row and 16 cool, with Hitachi basic
//i use it in 4 data_bit mode
#include "lcd.h"

void LCD_test(){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	LCD_goto(0,0);
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f000 f82d 	bl	8001012 <LCD_goto>
	LCD_string("#+++Elso-sor+++#");
 8000fb8:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <LCD_test+0x34>)
 8000fba:	f000 f815 	bl	8000fe8 <LCD_string>
	LCD_goto(1,0);
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f000 f826 	bl	8001012 <LCD_goto>
	LCD_string("#+Masodik--sor+#");
 8000fc6:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <LCD_test+0x38>)
 8000fc8:	f000 f80e 	bl	8000fe8 <LCD_string>
	HAL_Delay(1000);
 8000fcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd0:	f001 f98a 	bl	80022e8 <HAL_Delay>
	LCD_cmd(CLEAR);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f000 f871 	bl	80010bc <LCD_cmd>
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	08005d38 	.word	0x08005d38
 8000fe4:	08005d4c 	.word	0x08005d4c

08000fe8 <LCD_string>:

void LCD_string(char *str){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	while(*str){
 8000ff0:	e007      	b.n	8001002 <LCD_string+0x1a>
		LCD_data(*str);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f8d2 	bl	80011a0 <LCD_data>
		str++;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3301      	adds	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
	while(*str){
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f3      	bne.n	8000ff2 <LCD_string+0xa>
	}
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <LCD_goto>:

void LCD_goto(u8 row, u8 col){
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	460a      	mov	r2, r1
 800101c:	71fb      	strb	r3, [r7, #7]
 800101e:	4613      	mov	r3, r2
 8001020:	71bb      	strb	r3, [r7, #6]
	switch(row){
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <LCD_goto+0x1c>
 8001028:	2b01      	cmp	r3, #1
 800102a:	d010      	beq.n	800104e <LCD_goto+0x3c>
			for(u8 i = col; i>0; i--){
				LCD_cmd(0x14);
			}
		 break;
	}
}
 800102c:	e01f      	b.n	800106e <LCD_goto+0x5c>
			LCD_cmd(0x80);
 800102e:	2080      	movs	r0, #128	; 0x80
 8001030:	f000 f844 	bl	80010bc <LCD_cmd>
			for(u8 i = col; i>0; i--){
 8001034:	79bb      	ldrb	r3, [r7, #6]
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e005      	b.n	8001046 <LCD_goto+0x34>
				LCD_cmd(0x14);
 800103a:	2014      	movs	r0, #20
 800103c:	f000 f83e 	bl	80010bc <LCD_cmd>
			for(u8 i = col; i>0; i--){
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	3b01      	subs	r3, #1
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f6      	bne.n	800103a <LCD_goto+0x28>
		 break;
 800104c:	e00f      	b.n	800106e <LCD_goto+0x5c>
			LCD_cmd(0xC0);
 800104e:	20c0      	movs	r0, #192	; 0xc0
 8001050:	f000 f834 	bl	80010bc <LCD_cmd>
			for(u8 i = col; i>0; i--){
 8001054:	79bb      	ldrb	r3, [r7, #6]
 8001056:	73bb      	strb	r3, [r7, #14]
 8001058:	e005      	b.n	8001066 <LCD_goto+0x54>
				LCD_cmd(0x14);
 800105a:	2014      	movs	r0, #20
 800105c:	f000 f82e 	bl	80010bc <LCD_cmd>
			for(u8 i = col; i>0; i--){
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	3b01      	subs	r3, #1
 8001064:	73bb      	strb	r3, [r7, #14]
 8001066:	7bbb      	ldrb	r3, [r7, #14]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1f6      	bne.n	800105a <LCD_goto+0x48>
		 break;
 800106c:	bf00      	nop
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <LCD_enable>:

void LCD_enable(){
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	//need a square  signal _| |_ for LCD enable Port
	//we need a 0-1-0 signalflow, transition
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, RESET);	//make _
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001082:	480d      	ldr	r0, [pc, #52]	; (80010b8 <LCD_enable+0x40>)
 8001084:	f002 f97b 	bl	800337e <HAL_GPIO_WritePin>
	HAL_Delay(5);		//wait
 8001088:	2005      	movs	r0, #5
 800108a:	f001 f92d 	bl	80022e8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port,LCD_E_Pin, SET);	//_|
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001094:	4808      	ldr	r0, [pc, #32]	; (80010b8 <LCD_enable+0x40>)
 8001096:	f002 f972 	bl	800337e <HAL_GPIO_WritePin>
	HAL_Delay(5);		//wait
 800109a:	2005      	movs	r0, #5
 800109c:	f001 f924 	bl	80022e8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port,LCD_E_Pin, RESET);	//	|_
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a6:	4804      	ldr	r0, [pc, #16]	; (80010b8 <LCD_enable+0x40>)
 80010a8:	f002 f969 	bl	800337e <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80010ac:	2005      	movs	r0, #5
 80010ae:	f001 f91b 	bl	80022e8 <HAL_Delay>
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40010c00 	.word	0x40010c00

080010bc <LCD_cmd>:

void LCD_cmd(u8 cmd){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
	//we need reset RS port, why we send commands for the LCD display
		//the R/W pin is already on GNDm because we only write the display
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin, RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010cc:	4832      	ldr	r0, [pc, #200]	; (8001198 <LCD_cmd+0xdc>)
 80010ce:	f002 f956 	bl	800337e <HAL_GPIO_WritePin>
	//we write the data with 2 cycle, first the upper Bits
		//we use PORT MASK just in case
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin,(cmd>>7) & 0x01);
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	09db      	lsrs	r3, r3, #7
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010de:	482f      	ldr	r0, [pc, #188]	; (800119c <LCD_cmd+0xe0>)
 80010e0:	f002 f94d 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin,(cmd>>6) & 0x01);
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	099b      	lsrs	r3, r3, #6
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f6:	4829      	ldr	r0, [pc, #164]	; (800119c <LCD_cmd+0xe0>)
 80010f8:	f002 f941 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin,(cmd>>5) & 0x01);
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	b2db      	uxtb	r3, r3
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800110e:	4822      	ldr	r0, [pc, #136]	; (8001198 <LCD_cmd+0xdc>)
 8001110:	f002 f935 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin,(cmd>>4) & 0x01);
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	091b      	lsrs	r3, r3, #4
 8001118:	b2db      	uxtb	r3, r3
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	b2db      	uxtb	r3, r3
 8001120:	461a      	mov	r2, r3
 8001122:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001126:	481c      	ldr	r0, [pc, #112]	; (8001198 <LCD_cmd+0xdc>)
 8001128:	f002 f929 	bl	800337e <HAL_GPIO_WritePin>

	//we write this for LCD with LCD_enable, we send the datas
	LCD_enable();
 800112c:	f7ff ffa4 	bl	8001078 <LCD_enable>

	//now we write the four lower Bit
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin,(cmd>>3) & 0x01);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	08db      	lsrs	r3, r3, #3
 8001134:	b2db      	uxtb	r3, r3
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	b2db      	uxtb	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001142:	4816      	ldr	r0, [pc, #88]	; (800119c <LCD_cmd+0xe0>)
 8001144:	f002 f91b 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin,(cmd>>2) & 0x01);
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	b2db      	uxtb	r3, r3
 8001154:	461a      	mov	r2, r3
 8001156:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115a:	4810      	ldr	r0, [pc, #64]	; (800119c <LCD_cmd+0xe0>)
 800115c:	f002 f90f 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin,(cmd>>1) & 0x01);
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	085b      	lsrs	r3, r3, #1
 8001164:	b2db      	uxtb	r3, r3
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	b2db      	uxtb	r3, r3
 800116c:	461a      	mov	r2, r3
 800116e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001172:	4809      	ldr	r0, [pc, #36]	; (8001198 <LCD_cmd+0xdc>)
 8001174:	f002 f903 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin,(cmd>>0) & 0x01);		//here truly we don`t need the MASK,just in case
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001186:	4804      	ldr	r0, [pc, #16]	; (8001198 <LCD_cmd+0xdc>)
 8001188:	f002 f8f9 	bl	800337e <HAL_GPIO_WritePin>

	//again write for LCD
	LCD_enable();
 800118c:	f7ff ff74 	bl	8001078 <LCD_enable>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40010c00 	.word	0x40010c00
 800119c:	40010800 	.word	0x40010800

080011a0 <LCD_data>:

void LCD_data(u8 data){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
	//we set the RS Pin, because we send now data
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin,SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b0:	4832      	ldr	r0, [pc, #200]	; (800127c <LCD_data+0xdc>)
 80011b2:	f002 f8e4 	bl	800337e <HAL_GPIO_WritePin>
	//send data again with 2 cycles
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin, (data>>7) & 0x01);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	09db      	lsrs	r3, r3, #7
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	461a      	mov	r2, r3
 80011be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c2:	482f      	ldr	r0, [pc, #188]	; (8001280 <LCD_data+0xe0>)
 80011c4:	f002 f8db 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin, (data>>6) & 0x01);
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	099b      	lsrs	r3, r3, #6
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	461a      	mov	r2, r3
 80011d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011da:	4829      	ldr	r0, [pc, #164]	; (8001280 <LCD_data+0xe0>)
 80011dc:	f002 f8cf 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin, (data>>5) & 0x01);
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011f2:	4822      	ldr	r0, [pc, #136]	; (800127c <LCD_data+0xdc>)
 80011f4:	f002 f8c3 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin, (data>>4) & 0x01);
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	461a      	mov	r2, r3
 8001206:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800120a:	481c      	ldr	r0, [pc, #112]	; (800127c <LCD_data+0xdc>)
 800120c:	f002 f8b7 	bl	800337e <HAL_GPIO_WritePin>
	//we send the data for display
	LCD_enable();
 8001210:	f7ff ff32 	bl	8001078 <LCD_enable>

	//now we send the low 4 bits
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin, (data>>3) & 0x01);
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	08db      	lsrs	r3, r3, #3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	461a      	mov	r2, r3
 8001222:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001226:	4816      	ldr	r0, [pc, #88]	; (8001280 <LCD_data+0xe0>)
 8001228:	f002 f8a9 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin, (data>>2) & 0x01);
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	b2db      	uxtb	r3, r3
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	b2db      	uxtb	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800123e:	4810      	ldr	r0, [pc, #64]	; (8001280 <LCD_data+0xe0>)
 8001240:	f002 f89d 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin, (data>>1) & 0x01);
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	085b      	lsrs	r3, r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	b2db      	uxtb	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001256:	4809      	ldr	r0, [pc, #36]	; (800127c <LCD_data+0xdc>)
 8001258:	f002 f891 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin, (data>>0) & 0x01);
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800126a:	4804      	ldr	r0, [pc, #16]	; (800127c <LCD_data+0xdc>)
 800126c:	f002 f887 	bl	800337e <HAL_GPIO_WritePin>

	LCD_enable();
 8001270:	f7ff ff02 	bl	8001078 <LCD_enable>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40010c00 	.word	0x40010c00
 8001280:	40010800 	.word	0x40010800

08001284 <LCD_init>:

void LCD_init(bool curzor, bool blink){
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	460a      	mov	r2, r1
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	4613      	mov	r3, r2
 8001292:	71bb      	strb	r3, [r7, #6]
	//we before init
	HAL_Delay(15);
 8001294:	200f      	movs	r0, #15
 8001296:	f001 f827 	bl	80022e8 <HAL_Delay>
	//we use it in 4bit mode with 2 row - 5*8 pixel
	LCD_cmd(0x20);
 800129a:	2020      	movs	r0, #32
 800129c:	f7ff ff0e 	bl	80010bc <LCD_cmd>

	//just in case we send for Enable PORT 3 cycle
	LCD_enable();
 80012a0:	f7ff feea 	bl	8001078 <LCD_enable>
	LCD_enable();
 80012a4:	f7ff fee8 	bl	8001078 <LCD_enable>
	LCD_enable();
 80012a8:	f7ff fee6 	bl	8001078 <LCD_enable>

	//this hexacodes is from datasheet (LCD 1602, with hitachi base)
	LCD_cmd(0x28);		//set the mode 3 time
 80012ac:	2028      	movs	r0, #40	; 0x28
 80012ae:	f7ff ff05 	bl	80010bc <LCD_cmd>
	LCD_cmd(0x28);		//we don`t know before the init function wich one mode is the display
 80012b2:	2028      	movs	r0, #40	; 0x28
 80012b4:	f7ff ff02 	bl	80010bc <LCD_cmd>
	LCD_cmd(0x28);		//when we set the mode only 2 times, the display cant work well
 80012b8:	2028      	movs	r0, #40	; 0x28
 80012ba:	f7ff feff 	bl	80010bc <LCD_cmd>

	LCD_cmd(CLEAR);			//lcd clear
 80012be:	2001      	movs	r0, #1
 80012c0:	f7ff fefc 	bl	80010bc <LCD_cmd>
	LCD_cmd(HOME);			//send the curzor to 0.row 0.cool
 80012c4:	2002      	movs	r0, #2
 80012c6:	f7ff fef9 	bl	80010bc <LCD_cmd>
	//set the curzor blink and the curzor visibility
	LCD_cmd(0x08 | (1<<LCD_E) | (curzor<<LCD_curzor) | (blink<<LCD_blink));
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	f043 030c 	orr.w	r3, r3, #12
 80012d4:	b25a      	sxtb	r2, r3
 80012d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012da:	4313      	orrs	r3, r2
 80012dc:	b25b      	sxtb	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff feeb 	bl	80010bc <LCD_cmd>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <ledrow_half>:
	HAL_GPIO_WritePin(ledrow7_GPIO_Port, ledrow7_Pin, SET);
	HAL_GPIO_WritePin(ledrow8_GPIO_Port, ledrow8_Pin, SET);
	HAL_GPIO_WritePin(ledrow9_GPIO_Port, ledrow9_Pin, SET);
}

void ledrow_half(void){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ledrow0_GPIO_Port, ledrow0_Pin, SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fa:	481b      	ldr	r0, [pc, #108]	; (8001368 <ledrow_half+0x78>)
 80012fc:	f002 f83f 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow1_GPIO_Port, ledrow1_Pin, SET);
 8001300:	2201      	movs	r2, #1
 8001302:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001306:	4819      	ldr	r0, [pc, #100]	; (800136c <ledrow_half+0x7c>)
 8001308:	f002 f839 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow2_GPIO_Port, ledrow2_Pin, SET);
 800130c:	2201      	movs	r2, #1
 800130e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001312:	4816      	ldr	r0, [pc, #88]	; (800136c <ledrow_half+0x7c>)
 8001314:	f002 f833 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow3_GPIO_Port, ledrow3_Pin, SET);
 8001318:	2201      	movs	r2, #1
 800131a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800131e:	4813      	ldr	r0, [pc, #76]	; (800136c <ledrow_half+0x7c>)
 8001320:	f002 f82d 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow4_GPIO_Port, ledrow4_Pin, SET);
 8001324:	2201      	movs	r2, #1
 8001326:	2108      	movs	r1, #8
 8001328:	480f      	ldr	r0, [pc, #60]	; (8001368 <ledrow_half+0x78>)
 800132a:	f002 f828 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow5_GPIO_Port, ledrow5_Pin, RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	2110      	movs	r1, #16
 8001332:	480d      	ldr	r0, [pc, #52]	; (8001368 <ledrow_half+0x78>)
 8001334:	f002 f823 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow6_GPIO_Port, ledrow6_Pin, RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	2120      	movs	r1, #32
 800133c:	480a      	ldr	r0, [pc, #40]	; (8001368 <ledrow_half+0x78>)
 800133e:	f002 f81e 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow7_GPIO_Port, ledrow7_Pin, RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	2140      	movs	r1, #64	; 0x40
 8001346:	4808      	ldr	r0, [pc, #32]	; (8001368 <ledrow_half+0x78>)
 8001348:	f002 f819 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow8_GPIO_Port, ledrow8_Pin, RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	2180      	movs	r1, #128	; 0x80
 8001350:	4805      	ldr	r0, [pc, #20]	; (8001368 <ledrow_half+0x78>)
 8001352:	f002 f814 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow9_GPIO_Port, ledrow9_Pin, RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	f44f 7180 	mov.w	r1, #256	; 0x100
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <ledrow_half+0x78>)
 800135e:	f002 f80e 	bl	800337e <HAL_GPIO_WritePin>
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40010c00 	.word	0x40010c00
 800136c:	40010800 	.word	0x40010800

08001370 <ledrow1>:
	HAL_GPIO_WritePin(ledrow7_GPIO_Port, ledrow7_Pin, RESET);
	HAL_GPIO_WritePin(ledrow8_GPIO_Port, ledrow8_Pin, RESET);
	HAL_GPIO_WritePin(ledrow9_GPIO_Port, ledrow9_Pin, RESET);
}

void ledrow1(){
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ledrow0_GPIO_Port, ledrow0_Pin, SET);
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800137a:	481b      	ldr	r0, [pc, #108]	; (80013e8 <ledrow1+0x78>)
 800137c:	f001 ffff 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow1_GPIO_Port, ledrow1_Pin, SET);
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001386:	4819      	ldr	r0, [pc, #100]	; (80013ec <ledrow1+0x7c>)
 8001388:	f001 fff9 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow2_GPIO_Port, ledrow2_Pin, RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001392:	4816      	ldr	r0, [pc, #88]	; (80013ec <ledrow1+0x7c>)
 8001394:	f001 fff3 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow3_GPIO_Port, ledrow3_Pin, RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800139e:	4813      	ldr	r0, [pc, #76]	; (80013ec <ledrow1+0x7c>)
 80013a0:	f001 ffed 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow4_GPIO_Port, ledrow4_Pin, RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2108      	movs	r1, #8
 80013a8:	480f      	ldr	r0, [pc, #60]	; (80013e8 <ledrow1+0x78>)
 80013aa:	f001 ffe8 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow5_GPIO_Port, ledrow5_Pin, RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2110      	movs	r1, #16
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <ledrow1+0x78>)
 80013b4:	f001 ffe3 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow6_GPIO_Port, ledrow6_Pin, RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2120      	movs	r1, #32
 80013bc:	480a      	ldr	r0, [pc, #40]	; (80013e8 <ledrow1+0x78>)
 80013be:	f001 ffde 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow7_GPIO_Port, ledrow7_Pin, RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2140      	movs	r1, #64	; 0x40
 80013c6:	4808      	ldr	r0, [pc, #32]	; (80013e8 <ledrow1+0x78>)
 80013c8:	f001 ffd9 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow8_GPIO_Port, ledrow8_Pin, RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2180      	movs	r1, #128	; 0x80
 80013d0:	4805      	ldr	r0, [pc, #20]	; (80013e8 <ledrow1+0x78>)
 80013d2:	f001 ffd4 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow9_GPIO_Port, ledrow9_Pin, RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <ledrow1+0x78>)
 80013de:	f001 ffce 	bl	800337e <HAL_GPIO_WritePin>
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40010c00 	.word	0x40010c00
 80013ec:	40010800 	.word	0x40010800

080013f0 <ledrow8>:
	HAL_GPIO_WritePin(ledrow7_GPIO_Port, ledrow7_Pin, SET);
	HAL_GPIO_WritePin(ledrow8_GPIO_Port, ledrow8_Pin, RESET);
	HAL_GPIO_WritePin(ledrow9_GPIO_Port, ledrow9_Pin, RESET);
}

void ledrow8(){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ledrow0_GPIO_Port, ledrow0_Pin, SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013fa:	481b      	ldr	r0, [pc, #108]	; (8001468 <ledrow8+0x78>)
 80013fc:	f001 ffbf 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow1_GPIO_Port, ledrow1_Pin, SET);
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001406:	4819      	ldr	r0, [pc, #100]	; (800146c <ledrow8+0x7c>)
 8001408:	f001 ffb9 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow2_GPIO_Port, ledrow2_Pin, SET);
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001412:	4816      	ldr	r0, [pc, #88]	; (800146c <ledrow8+0x7c>)
 8001414:	f001 ffb3 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow3_GPIO_Port, ledrow3_Pin, SET);
 8001418:	2201      	movs	r2, #1
 800141a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800141e:	4813      	ldr	r0, [pc, #76]	; (800146c <ledrow8+0x7c>)
 8001420:	f001 ffad 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow4_GPIO_Port, ledrow4_Pin, SET);
 8001424:	2201      	movs	r2, #1
 8001426:	2108      	movs	r1, #8
 8001428:	480f      	ldr	r0, [pc, #60]	; (8001468 <ledrow8+0x78>)
 800142a:	f001 ffa8 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow5_GPIO_Port, ledrow5_Pin, SET);
 800142e:	2201      	movs	r2, #1
 8001430:	2110      	movs	r1, #16
 8001432:	480d      	ldr	r0, [pc, #52]	; (8001468 <ledrow8+0x78>)
 8001434:	f001 ffa3 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow6_GPIO_Port, ledrow6_Pin, SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2120      	movs	r1, #32
 800143c:	480a      	ldr	r0, [pc, #40]	; (8001468 <ledrow8+0x78>)
 800143e:	f001 ff9e 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow7_GPIO_Port, ledrow7_Pin, SET);
 8001442:	2201      	movs	r2, #1
 8001444:	2140      	movs	r1, #64	; 0x40
 8001446:	4808      	ldr	r0, [pc, #32]	; (8001468 <ledrow8+0x78>)
 8001448:	f001 ff99 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow8_GPIO_Port, ledrow8_Pin, SET);
 800144c:	2201      	movs	r2, #1
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <ledrow8+0x78>)
 8001452:	f001 ff94 	bl	800337e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ledrow9_GPIO_Port, ledrow9_Pin, RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <ledrow8+0x78>)
 800145e:	f001 ff8e 	bl	800337e <HAL_GPIO_WritePin>
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40010c00 	.word	0x40010c00
 800146c:	40010800 	.word	0x40010800

08001470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001470:	b598      	push	{r3, r4, r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001474:	f000 fed6 	bl	8002224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001478:	f000 f934 	bl	80016e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800147c:	f000 fb9a 	bl	8001bb4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001480:	f000 fb7a 	bl	8001b78 <MX_DMA_Init>
  MX_ADC1_Init();
 8001484:	f000 f984 	bl	8001790 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001488:	f000 fa8c 	bl	80019a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800148c:	f000 fad8 	bl	8001a40 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001490:	f000 fb24 	bl	8001adc <MX_TIM4_Init>
  MX_TIM1_Init();
 8001494:	f000 f9e6 	bl	8001864 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001498:	2108      	movs	r1, #8
 800149a:	4885      	ldr	r0, [pc, #532]	; (80016b0 <main+0x240>)
 800149c:	f002 fd3a 	bl	8003f14 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80014a0:	4884      	ldr	r0, [pc, #528]	; (80016b4 <main+0x244>)
 80014a2:	f002 fc8d 	bl	8003dc0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80014a6:	4884      	ldr	r0, [pc, #528]	; (80016b8 <main+0x248>)
 80014a8:	f002 fc8a 	bl	8003dc0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80014ac:	4883      	ldr	r0, [pc, #524]	; (80016bc <main+0x24c>)
 80014ae:	f002 fc87 	bl	8003dc0 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, data_DMAadc, 4);
 80014b2:	2204      	movs	r2, #4
 80014b4:	4982      	ldr	r1, [pc, #520]	; (80016c0 <main+0x250>)
 80014b6:	4883      	ldr	r0, [pc, #524]	; (80016c4 <main+0x254>)
 80014b8:	f001 f810 	bl	80024dc <HAL_ADC_Start_DMA>
  LCD_init(0,0);
 80014bc:	2100      	movs	r1, #0
 80014be:	2000      	movs	r0, #0
 80014c0:	f7ff fee0 	bl	8001284 <LCD_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_test();
 80014c4:	f7ff fd72 	bl	8000fac <LCD_test>
  //__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,149);
  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,245);
 80014c8:	4b79      	ldr	r3, [pc, #484]	; (80016b0 <main+0x240>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	22f5      	movs	r2, #245	; 0xf5
 80014ce:	63da      	str	r2, [r3, #60]	; 0x3c
	  LCD_goto(0,0);
	  LCD_string("Na mehet...");
	  LCD_goto(1,0);
	  LCD_string("Na mehet...");
	  */
	  LCD_goto(0,0);
 80014d0:	2100      	movs	r1, #0
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff fd9d 	bl	8001012 <LCD_goto>
	  temp_f = ((3.3/4096)*data_DMAadc[0]);
 80014d8:	4b79      	ldr	r3, [pc, #484]	; (80016c0 <main+0x250>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7fe ff79 	bl	80003d4 <__aeabi_ui2d>
 80014e2:	a36f      	add	r3, pc, #444	; (adr r3, 80016a0 <main+0x230>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7fe ffee 	bl	80004c8 <__aeabi_dmul>
 80014ec:	4603      	mov	r3, r0
 80014ee:	460c      	mov	r4, r1
 80014f0:	4618      	mov	r0, r3
 80014f2:	4621      	mov	r1, r4
 80014f4:	f7ff fa98 	bl	8000a28 <__aeabi_d2f>
 80014f8:	4602      	mov	r2, r0
 80014fa:	4b73      	ldr	r3, [pc, #460]	; (80016c8 <main+0x258>)
 80014fc:	601a      	str	r2, [r3, #0]
	  ftoa(temp_f, buffer, 2);
 80014fe:	4b72      	ldr	r3, [pc, #456]	; (80016c8 <main+0x258>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2202      	movs	r2, #2
 8001504:	4971      	ldr	r1, [pc, #452]	; (80016cc <main+0x25c>)
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fcfe 	bl	8000f08 <ftoa>
	  if(temp_f < 1.0){
 800150c:	4b6e      	ldr	r3, [pc, #440]	; (80016c8 <main+0x258>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fc33 	bl	8000d80 <__aeabi_fcmplt>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d006      	beq.n	800152e <main+0xbe>
		  LCD_string("0");
 8001520:	486b      	ldr	r0, [pc, #428]	; (80016d0 <main+0x260>)
 8001522:	f7ff fd61 	bl	8000fe8 <LCD_string>
	  	  LCD_string(buffer);
 8001526:	4869      	ldr	r0, [pc, #420]	; (80016cc <main+0x25c>)
 8001528:	f7ff fd5e 	bl	8000fe8 <LCD_string>
 800152c:	e002      	b.n	8001534 <main+0xc4>
	  }else{
		  LCD_string(buffer);
 800152e:	4867      	ldr	r0, [pc, #412]	; (80016cc <main+0x25c>)
 8001530:	f7ff fd5a 	bl	8000fe8 <LCD_string>
	  }

	  LCD_goto(1,0);
 8001534:	2100      	movs	r1, #0
 8001536:	2001      	movs	r0, #1
 8001538:	f7ff fd6b 	bl	8001012 <LCD_goto>
	  tmp_adc = ((3.3/4096)*data_DMAadc[1]);
 800153c:	4b60      	ldr	r3, [pc, #384]	; (80016c0 <main+0x250>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe ff47 	bl	80003d4 <__aeabi_ui2d>
 8001546:	a356      	add	r3, pc, #344	; (adr r3, 80016a0 <main+0x230>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	f7fe ffbc 	bl	80004c8 <__aeabi_dmul>
 8001550:	4603      	mov	r3, r0
 8001552:	460c      	mov	r4, r1
 8001554:	4618      	mov	r0, r3
 8001556:	4621      	mov	r1, r4
 8001558:	f7ff fa66 	bl	8000a28 <__aeabi_d2f>
 800155c:	4602      	mov	r2, r0
 800155e:	4b5d      	ldr	r3, [pc, #372]	; (80016d4 <main+0x264>)
 8001560:	601a      	str	r2, [r3, #0]
	  ftoa(tmp_adc, buffer, 2);
 8001562:	4b5c      	ldr	r3, [pc, #368]	; (80016d4 <main+0x264>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2202      	movs	r2, #2
 8001568:	4958      	ldr	r1, [pc, #352]	; (80016cc <main+0x25c>)
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fccc 	bl	8000f08 <ftoa>
	  if(tmp_adc < 1.0){
 8001570:	4b58      	ldr	r3, [pc, #352]	; (80016d4 <main+0x264>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fc01 	bl	8000d80 <__aeabi_fcmplt>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d006      	beq.n	8001592 <main+0x122>
		  LCD_string("0");
 8001584:	4852      	ldr	r0, [pc, #328]	; (80016d0 <main+0x260>)
 8001586:	f7ff fd2f 	bl	8000fe8 <LCD_string>
		  LCD_string(buffer);
 800158a:	4850      	ldr	r0, [pc, #320]	; (80016cc <main+0x25c>)
 800158c:	f7ff fd2c 	bl	8000fe8 <LCD_string>
 8001590:	e002      	b.n	8001598 <main+0x128>
	  }else{
		  LCD_string(buffer);
 8001592:	484e      	ldr	r0, [pc, #312]	; (80016cc <main+0x25c>)
 8001594:	f7ff fd28 	bl	8000fe8 <LCD_string>
	  }

	  LCD_goto(0,8);
 8001598:	2108      	movs	r1, #8
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff fd39 	bl	8001012 <LCD_goto>
	  //temp_f = ((3.3/4096)*data_DMAadc[1]);
	  //tempADC(&temp_f, data_DMAadc[2]);
	  //ftoa(temp_f, buffer, 2);
	  temp_f = ((data_DMAadc[3]*3.3)/4096);//tempADC2(data_DMAadc[2]);
 80015a0:	4b47      	ldr	r3, [pc, #284]	; (80016c0 <main+0x250>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ff15 	bl	80003d4 <__aeabi_ui2d>
 80015aa:	a33f      	add	r3, pc, #252	; (adr r3, 80016a8 <main+0x238>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7fe ff8a 	bl	80004c8 <__aeabi_dmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	460c      	mov	r4, r1
 80015b8:	4618      	mov	r0, r3
 80015ba:	4621      	mov	r1, r4
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	4b45      	ldr	r3, [pc, #276]	; (80016d8 <main+0x268>)
 80015c2:	f7ff f8ab 	bl	800071c <__aeabi_ddiv>
 80015c6:	4603      	mov	r3, r0
 80015c8:	460c      	mov	r4, r1
 80015ca:	4618      	mov	r0, r3
 80015cc:	4621      	mov	r1, r4
 80015ce:	f7ff fa2b 	bl	8000a28 <__aeabi_d2f>
 80015d2:	4602      	mov	r2, r0
 80015d4:	4b3c      	ldr	r3, [pc, #240]	; (80016c8 <main+0x258>)
 80015d6:	601a      	str	r2, [r3, #0]
	  ftoa(temp_f, buffer, 2);
 80015d8:	4b3b      	ldr	r3, [pc, #236]	; (80016c8 <main+0x258>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2202      	movs	r2, #2
 80015de:	493b      	ldr	r1, [pc, #236]	; (80016cc <main+0x25c>)
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fc91 	bl	8000f08 <ftoa>
	  if(temp_f < 1.0){
 80015e6:	4b38      	ldr	r3, [pc, #224]	; (80016c8 <main+0x258>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fbc6 	bl	8000d80 <__aeabi_fcmplt>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d006      	beq.n	8001608 <main+0x198>
		  LCD_string("0");
 80015fa:	4835      	ldr	r0, [pc, #212]	; (80016d0 <main+0x260>)
 80015fc:	f7ff fcf4 	bl	8000fe8 <LCD_string>
		  LCD_string(buffer);
 8001600:	4832      	ldr	r0, [pc, #200]	; (80016cc <main+0x25c>)
 8001602:	f7ff fcf1 	bl	8000fe8 <LCD_string>
 8001606:	e002      	b.n	800160e <main+0x19e>
	  }else{
		  LCD_string(buffer);
 8001608:	4830      	ldr	r0, [pc, #192]	; (80016cc <main+0x25c>)
 800160a:	f7ff fced 	bl	8000fe8 <LCD_string>
	  }

	  LCD_goto(1,8);
 800160e:	2108      	movs	r1, #8
 8001610:	2001      	movs	r0, #1
 8001612:	f7ff fcfe 	bl	8001012 <LCD_goto>
	  //temp_f = ((3.3/4096)*data_DMAadc[3]);
	  lm35 = ((data_DMAadc[3]*3.3)/4096)*100;
 8001616:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <main+0x250>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe feda 	bl	80003d4 <__aeabi_ui2d>
 8001620:	a321      	add	r3, pc, #132	; (adr r3, 80016a8 <main+0x238>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7fe ff4f 	bl	80004c8 <__aeabi_dmul>
 800162a:	4603      	mov	r3, r0
 800162c:	460c      	mov	r4, r1
 800162e:	4618      	mov	r0, r3
 8001630:	4621      	mov	r1, r4
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <main+0x268>)
 8001638:	f7ff f870 	bl	800071c <__aeabi_ddiv>
 800163c:	4603      	mov	r3, r0
 800163e:	460c      	mov	r4, r1
 8001640:	4618      	mov	r0, r3
 8001642:	4621      	mov	r1, r4
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	4b24      	ldr	r3, [pc, #144]	; (80016dc <main+0x26c>)
 800164a:	f7fe ff3d 	bl	80004c8 <__aeabi_dmul>
 800164e:	4603      	mov	r3, r0
 8001650:	460c      	mov	r4, r1
 8001652:	4618      	mov	r0, r3
 8001654:	4621      	mov	r1, r4
 8001656:	f7ff f9e7 	bl	8000a28 <__aeabi_d2f>
 800165a:	4602      	mov	r2, r0
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <main+0x270>)
 800165e:	601a      	str	r2, [r3, #0]
	  	  //tempADC(&temp_f, data_DMAadc[2]);
	  	  //ftoa(temp_f, buffer, 2);
	  //temp_f = tempADC2(data_DMAadc[4]);
	  ftoa(lm35, buffer, 2);
 8001660:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <main+0x270>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2202      	movs	r2, #2
 8001666:	4919      	ldr	r1, [pc, #100]	; (80016cc <main+0x25c>)
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fc4d 	bl	8000f08 <ftoa>
	  if(lm35 < 1.0){
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <main+0x270>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fb82 	bl	8000d80 <__aeabi_fcmplt>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d006      	beq.n	8001690 <main+0x220>
		  LCD_string("0");
 8001682:	4813      	ldr	r0, [pc, #76]	; (80016d0 <main+0x260>)
 8001684:	f7ff fcb0 	bl	8000fe8 <LCD_string>
		  LCD_string(buffer);
 8001688:	4810      	ldr	r0, [pc, #64]	; (80016cc <main+0x25c>)
 800168a:	f7ff fcad 	bl	8000fe8 <LCD_string>
 800168e:	e002      	b.n	8001696 <main+0x226>
	  }else{
		  LCD_string(buffer);
 8001690:	480e      	ldr	r0, [pc, #56]	; (80016cc <main+0x25c>)
 8001692:	f7ff fca9 	bl	8000fe8 <LCD_string>
	  }else if(HAL_GPIO_ReadPin(in_btn_GPIO_Port, in_btn_Pin) == 1 && flag_btn){
		  HAL_GPIO_WritePin(led0_GPIO_Port, led0_Pin, RESET);
		  flag_btn = 0;
		  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,245);
	  }*/
	  HAL_Delay(500);
 8001696:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800169a:	f000 fe25 	bl	80022e8 <HAL_Delay>
	  LCD_goto(0,0);
 800169e:	e717      	b.n	80014d0 <main+0x60>
 80016a0:	66666666 	.word	0x66666666
 80016a4:	3f4a6666 	.word	0x3f4a6666
 80016a8:	66666666 	.word	0x66666666
 80016ac:	400a6666 	.word	0x400a6666
 80016b0:	200001c4 	.word	0x200001c4
 80016b4:	2000020c 	.word	0x2000020c
 80016b8:	200000f4 	.word	0x200000f4
 80016bc:	200000ac 	.word	0x200000ac
 80016c0:	20000090 	.word	0x20000090
 80016c4:	2000013c 	.word	0x2000013c
 80016c8:	20000254 	.word	0x20000254
 80016cc:	2000016c 	.word	0x2000016c
 80016d0:	08005d60 	.word	0x08005d60
 80016d4:	200000a8 	.word	0x200000a8
 80016d8:	40b00000 	.word	0x40b00000
 80016dc:	40590000 	.word	0x40590000
 80016e0:	200000a4 	.word	0x200000a4

080016e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b094      	sub	sp, #80	; 0x50
 80016e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ee:	2228      	movs	r2, #40	; 0x28
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 fae2 	bl	8004cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001714:	2302      	movs	r3, #2
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001718:	2301      	movs	r3, #1
 800171a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800171c:	2310      	movs	r3, #16
 800171e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001720:	2302      	movs	r3, #2
 8001722:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001724:	2300      	movs	r3, #0
 8001726:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8001728:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 800172c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001732:	4618      	mov	r0, r3
 8001734:	f001 fe54 	bl	80033e0 <HAL_RCC_OscConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800173e:	f000 fb9b 	bl	8001e78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001742:	230f      	movs	r3, #15
 8001744:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001746:	2302      	movs	r3, #2
 8001748:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	2101      	movs	r1, #1
 800175c:	4618      	mov	r0, r3
 800175e:	f002 f8bf 	bl	80038e0 <HAL_RCC_ClockConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001768:	f000 fb86 	bl	8001e78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800176c:	2302      	movs	r3, #2
 800176e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	4618      	mov	r0, r3
 8001778:	f002 fa1c 	bl	8003bb4 <HAL_RCCEx_PeriphCLKConfig>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001782:	f000 fb79 	bl	8001e78 <Error_Handler>
  }
}
 8001786:	bf00      	nop
 8001788:	3750      	adds	r7, #80	; 0x50
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80017a0:	4b2e      	ldr	r3, [pc, #184]	; (800185c <MX_ADC1_Init+0xcc>)
 80017a2:	4a2f      	ldr	r2, [pc, #188]	; (8001860 <MX_ADC1_Init+0xd0>)
 80017a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017a6:	4b2d      	ldr	r3, [pc, #180]	; (800185c <MX_ADC1_Init+0xcc>)
 80017a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017ae:	4b2b      	ldr	r3, [pc, #172]	; (800185c <MX_ADC1_Init+0xcc>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017b4:	4b29      	ldr	r3, [pc, #164]	; (800185c <MX_ADC1_Init+0xcc>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017ba:	4b28      	ldr	r3, [pc, #160]	; (800185c <MX_ADC1_Init+0xcc>)
 80017bc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80017c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <MX_ADC1_Init+0xcc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80017c8:	4b24      	ldr	r3, [pc, #144]	; (800185c <MX_ADC1_Init+0xcc>)
 80017ca:	2204      	movs	r2, #4
 80017cc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017ce:	4823      	ldr	r0, [pc, #140]	; (800185c <MX_ADC1_Init+0xcc>)
 80017d0:	f000 fdac 	bl	800232c <HAL_ADC_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80017da:	f000 fb4d 	bl	8001e78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80017de:	2308      	movs	r3, #8
 80017e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017e2:	2301      	movs	r3, #1
 80017e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80017e6:	2307      	movs	r3, #7
 80017e8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	4619      	mov	r1, r3
 80017ee:	481b      	ldr	r0, [pc, #108]	; (800185c <MX_ADC1_Init+0xcc>)
 80017f0:	f000 ff6e 	bl	80026d0 <HAL_ADC_ConfigChannel>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80017fa:	f000 fb3d 	bl	8001e78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80017fe:	2309      	movs	r3, #9
 8001800:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001802:	2302      	movs	r3, #2
 8001804:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	4619      	mov	r1, r3
 800180a:	4814      	ldr	r0, [pc, #80]	; (800185c <MX_ADC1_Init+0xcc>)
 800180c:	f000 ff60 	bl	80026d0 <HAL_ADC_ConfigChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001816:	f000 fb2f 	bl	8001e78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800181a:	2310      	movs	r3, #16
 800181c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800181e:	2303      	movs	r3, #3
 8001820:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	4619      	mov	r1, r3
 8001826:	480d      	ldr	r0, [pc, #52]	; (800185c <MX_ADC1_Init+0xcc>)
 8001828:	f000 ff52 	bl	80026d0 <HAL_ADC_ConfigChannel>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001832:	f000 fb21 	bl	8001e78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001836:	2307      	movs	r3, #7
 8001838:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800183a:	2304      	movs	r3, #4
 800183c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	4619      	mov	r1, r3
 8001842:	4806      	ldr	r0, [pc, #24]	; (800185c <MX_ADC1_Init+0xcc>)
 8001844:	f000 ff44 	bl	80026d0 <HAL_ADC_ConfigChannel>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800184e:	f000 fb13 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2000013c 	.word	0x2000013c
 8001860:	40012400 	.word	0x40012400

08001864 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b096      	sub	sp, #88	; 0x58
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	611a      	str	r2, [r3, #16]
 8001892:	615a      	str	r2, [r3, #20]
 8001894:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	2220      	movs	r2, #32
 800189a:	2100      	movs	r1, #0
 800189c:	4618      	mov	r0, r3
 800189e:	f003 fa0d 	bl	8004cbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018a2:	4b3e      	ldr	r3, [pc, #248]	; (800199c <MX_TIM1_Init+0x138>)
 80018a4:	4a3e      	ldr	r2, [pc, #248]	; (80019a0 <MX_TIM1_Init+0x13c>)
 80018a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 300;
 80018a8:	4b3c      	ldr	r3, [pc, #240]	; (800199c <MX_TIM1_Init+0x138>)
 80018aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b0:	4b3a      	ldr	r3, [pc, #232]	; (800199c <MX_TIM1_Init+0x138>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 250;
 80018b6:	4b39      	ldr	r3, [pc, #228]	; (800199c <MX_TIM1_Init+0x138>)
 80018b8:	22fa      	movs	r2, #250	; 0xfa
 80018ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018bc:	4b37      	ldr	r3, [pc, #220]	; (800199c <MX_TIM1_Init+0x138>)
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018c2:	4b36      	ldr	r3, [pc, #216]	; (800199c <MX_TIM1_Init+0x138>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018c8:	4b34      	ldr	r3, [pc, #208]	; (800199c <MX_TIM1_Init+0x138>)
 80018ca:	2280      	movs	r2, #128	; 0x80
 80018cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018ce:	4833      	ldr	r0, [pc, #204]	; (800199c <MX_TIM1_Init+0x138>)
 80018d0:	f002 fa26 	bl	8003d20 <HAL_TIM_Base_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80018da:	f000 facd 	bl	8001e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018e8:	4619      	mov	r1, r3
 80018ea:	482c      	ldr	r0, [pc, #176]	; (800199c <MX_TIM1_Init+0x138>)
 80018ec:	f002 fd7a 	bl	80043e4 <HAL_TIM_ConfigClockSource>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80018f6:	f000 fabf 	bl	8001e78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018fa:	4828      	ldr	r0, [pc, #160]	; (800199c <MX_TIM1_Init+0x138>)
 80018fc:	f002 fab2 	bl	8003e64 <HAL_TIM_PWM_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001906:	f000 fab7 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190a:	2300      	movs	r3, #0
 800190c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001912:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001916:	4619      	mov	r1, r3
 8001918:	4820      	ldr	r0, [pc, #128]	; (800199c <MX_TIM1_Init+0x138>)
 800191a:	f003 f8e3 	bl	8004ae4 <HAL_TIMEx_MasterConfigSynchronization>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001924:	f000 faa8 	bl	8001e78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001928:	2360      	movs	r3, #96	; 0x60
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001934:	2300      	movs	r3, #0
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001940:	2300      	movs	r3, #0
 8001942:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001948:	2208      	movs	r2, #8
 800194a:	4619      	mov	r1, r3
 800194c:	4813      	ldr	r0, [pc, #76]	; (800199c <MX_TIM1_Init+0x138>)
 800194e:	f002 fc8b 	bl	8004268 <HAL_TIM_PWM_ConfigChannel>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001958:	f000 fa8e 	bl	8001e78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001974:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	4619      	mov	r1, r3
 800197e:	4807      	ldr	r0, [pc, #28]	; (800199c <MX_TIM1_Init+0x138>)
 8001980:	f003 f90e 	bl	8004ba0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800198a:	f000 fa75 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800198e:	4803      	ldr	r0, [pc, #12]	; (800199c <MX_TIM1_Init+0x138>)
 8001990:	f000 fb98 	bl	80020c4 <HAL_TIM_MspPostInit>

}
 8001994:	bf00      	nop
 8001996:	3758      	adds	r7, #88	; 0x58
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200001c4 	.word	0x200001c4
 80019a0:	40012c00 	.word	0x40012c00

080019a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019aa:	f107 0308 	add.w	r3, r7, #8
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b8:	463b      	mov	r3, r7
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019c0:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 80019c8:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019ca:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80019ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d0:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 349;
 80019d6:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019d8:	f240 125d 	movw	r2, #349	; 0x15d
 80019dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019ea:	4814      	ldr	r0, [pc, #80]	; (8001a3c <MX_TIM2_Init+0x98>)
 80019ec:	f002 f998 	bl	8003d20 <HAL_TIM_Base_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019f6:	f000 fa3f 	bl	8001e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a00:	f107 0308 	add.w	r3, r7, #8
 8001a04:	4619      	mov	r1, r3
 8001a06:	480d      	ldr	r0, [pc, #52]	; (8001a3c <MX_TIM2_Init+0x98>)
 8001a08:	f002 fcec 	bl	80043e4 <HAL_TIM_ConfigClockSource>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a12:	f000 fa31 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a1e:	463b      	mov	r3, r7
 8001a20:	4619      	mov	r1, r3
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <MX_TIM2_Init+0x98>)
 8001a24:	f003 f85e 	bl	8004ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a2e:	f000 fa23 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2000020c 	.word	0x2000020c

08001a40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a46:	f107 0308 	add.w	r3, r7, #8
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a54:	463b      	mov	r3, r7
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <MX_TIM3_Init+0x94>)
 8001a5e:	4a1e      	ldr	r2, [pc, #120]	; (8001ad8 <MX_TIM3_Init+0x98>)
 8001a60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39999;
 8001a62:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <MX_TIM3_Init+0x94>)
 8001a64:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001a68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <MX_TIM3_Init+0x94>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 699;
 8001a70:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <MX_TIM3_Init+0x94>)
 8001a72:	f240 22bb 	movw	r2, #699	; 0x2bb
 8001a76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a78:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <MX_TIM3_Init+0x94>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <MX_TIM3_Init+0x94>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a84:	4813      	ldr	r0, [pc, #76]	; (8001ad4 <MX_TIM3_Init+0x94>)
 8001a86:	f002 f94b 	bl	8003d20 <HAL_TIM_Base_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a90:	f000 f9f2 	bl	8001e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a9a:	f107 0308 	add.w	r3, r7, #8
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <MX_TIM3_Init+0x94>)
 8001aa2:	f002 fc9f 	bl	80043e4 <HAL_TIM_ConfigClockSource>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001aac:	f000 f9e4 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ab8:	463b      	mov	r3, r7
 8001aba:	4619      	mov	r1, r3
 8001abc:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MX_TIM3_Init+0x94>)
 8001abe:	f003 f811 	bl	8004ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ac8:	f000 f9d6 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001acc:	bf00      	nop
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	200000f4 	.word	0x200000f4
 8001ad8:	40000400 	.word	0x40000400

08001adc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae2:	f107 0308 	add.w	r3, r7, #8
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af0:	463b      	mov	r3, r7
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001afa:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <MX_TIM4_Init+0x98>)
 8001afc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39999;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b00:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001b04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b06:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 69;
 8001b0c:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b0e:	2245      	movs	r2, #69	; 0x45
 8001b10:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b12:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b18:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b1e:	4814      	ldr	r0, [pc, #80]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b20:	f002 f8fe 	bl	8003d20 <HAL_TIM_Base_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001b2a:	f000 f9a5 	bl	8001e78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b34:	f107 0308 	add.w	r3, r7, #8
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480d      	ldr	r0, [pc, #52]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b3c:	f002 fc52 	bl	80043e4 <HAL_TIM_ConfigClockSource>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001b46:	f000 f997 	bl	8001e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b52:	463b      	mov	r3, r7
 8001b54:	4619      	mov	r1, r3
 8001b56:	4806      	ldr	r0, [pc, #24]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b58:	f002 ffc4 	bl	8004ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001b62:	f000 f989 	bl	8001e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200000ac 	.word	0x200000ac
 8001b74:	40000800 	.word	0x40000800

08001b78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <MX_DMA_Init+0x38>)
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <MX_DMA_Init+0x38>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6153      	str	r3, [r2, #20]
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <MX_DMA_Init+0x38>)
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2100      	movs	r1, #0
 8001b9a:	200b      	movs	r0, #11
 8001b9c:	f001 f859 	bl	8002c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ba0:	200b      	movs	r0, #11
 8001ba2:	f001 f872 	bl	8002c8a <HAL_NVIC_EnableIRQ>

}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000

08001bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bba:	f107 0310 	add.w	r3, r7, #16
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc8:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4a3e      	ldr	r2, [pc, #248]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001bce:	f043 0310 	orr.w	r3, r3, #16
 8001bd2:	6193      	str	r3, [r2, #24]
 8001bd4:	4b3c      	ldr	r3, [pc, #240]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be0:	4b39      	ldr	r3, [pc, #228]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a38      	ldr	r2, [pc, #224]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001be6:	f043 0320 	orr.w	r3, r3, #32
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0320 	and.w	r3, r3, #32
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf8:	4b33      	ldr	r3, [pc, #204]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a32      	ldr	r2, [pc, #200]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b30      	ldr	r3, [pc, #192]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c10:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	4a2c      	ldr	r2, [pc, #176]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001c16:	f043 0308 	orr.w	r3, r3, #8
 8001c1a:	6193      	str	r3, [r2, #24]
 8001c1c:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <MX_GPIO_Init+0x114>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_panel_GPIO_Port, led_panel_Pin, GPIO_PIN_RESET);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c2e:	4827      	ldr	r0, [pc, #156]	; (8001ccc <MX_GPIO_Init+0x118>)
 8001c30:	f001 fba5 	bl	800337e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, rgb0_Pin|rgb1_Pin|led0_Pin|led1_Pin
 8001c34:	2200      	movs	r2, #0
 8001c36:	f649 317e 	movw	r1, #39806	; 0x9b7e
 8001c3a:	4825      	ldr	r0, [pc, #148]	; (8001cd0 <MX_GPIO_Init+0x11c>)
 8001c3c:	f001 fb9f 	bl	800337e <HAL_GPIO_WritePin>
                          |led2_Pin|led3_Pin|LCD_DATA_6_Pin|LCD_DATA_7_Pin
                          |ledrow1_Pin|ledrow2_Pin|ledrow3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led4_Pin|ledrow0_Pin|LCD_E_Pin|LCD_RS_Pin
 8001c40:	2200      	movs	r2, #0
 8001c42:	f64f 51f8 	movw	r1, #65016	; 0xfdf8
 8001c46:	4823      	ldr	r0, [pc, #140]	; (8001cd4 <MX_GPIO_Init+0x120>)
 8001c48:	f001 fb99 	bl	800337e <HAL_GPIO_WritePin>
                          |LCD_DATA_4_Pin|LCD_DATA_5_Pin|ledrow4_Pin|ledrow5_Pin
                          |ledrow6_Pin|ledrow7_Pin|ledrow8_Pin|ledrow9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : led_panel_Pin */
  GPIO_InitStruct.Pin = led_panel_Pin;
 8001c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_panel_GPIO_Port, &GPIO_InitStruct);
 8001c5e:	f107 0310 	add.w	r3, r7, #16
 8001c62:	4619      	mov	r1, r3
 8001c64:	4819      	ldr	r0, [pc, #100]	; (8001ccc <MX_GPIO_Init+0x118>)
 8001c66:	f001 fa19 	bl	800309c <HAL_GPIO_Init>

  /*Configure GPIO pins : rgb0_Pin rgb1_Pin led0_Pin led1_Pin
                           led2_Pin led3_Pin LCD_DATA_6_Pin LCD_DATA_7_Pin
                           ledrow1_Pin ledrow2_Pin ledrow3_Pin */
  GPIO_InitStruct.Pin = rgb0_Pin|rgb1_Pin|led0_Pin|led1_Pin
 8001c6a:	f649 337e 	movw	r3, #39806	; 0x9b7e
 8001c6e:	613b      	str	r3, [r7, #16]
                          |led2_Pin|led3_Pin|LCD_DATA_6_Pin|LCD_DATA_7_Pin
                          |ledrow1_Pin|ledrow2_Pin|ledrow3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c70:	2301      	movs	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	4619      	mov	r1, r3
 8001c82:	4813      	ldr	r0, [pc, #76]	; (8001cd0 <MX_GPIO_Init+0x11c>)
 8001c84:	f001 fa0a 	bl	800309c <HAL_GPIO_Init>

  /*Configure GPIO pins : led4_Pin ledrow0_Pin LCD_E_Pin LCD_RS_Pin
                           LCD_DATA_4_Pin LCD_DATA_5_Pin ledrow4_Pin ledrow5_Pin
                           ledrow6_Pin ledrow7_Pin ledrow8_Pin ledrow9_Pin */
  GPIO_InitStruct.Pin = led4_Pin|ledrow0_Pin|LCD_E_Pin|LCD_RS_Pin
 8001c88:	f64f 53f8 	movw	r3, #65016	; 0xfdf8
 8001c8c:	613b      	str	r3, [r7, #16]
                          |LCD_DATA_4_Pin|LCD_DATA_5_Pin|ledrow4_Pin|ledrow5_Pin
                          |ledrow6_Pin|ledrow7_Pin|ledrow8_Pin|ledrow9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2302      	movs	r3, #2
 8001c98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9a:	f107 0310 	add.w	r3, r7, #16
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	480c      	ldr	r0, [pc, #48]	; (8001cd4 <MX_GPIO_Init+0x120>)
 8001ca2:	f001 f9fb 	bl	800309c <HAL_GPIO_Init>

  /*Configure GPIO pin : in_btn_Pin */
  GPIO_InitStruct.Pin = in_btn_Pin;
 8001ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001caa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(in_btn_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4806      	ldr	r0, [pc, #24]	; (8001cd4 <MX_GPIO_Init+0x120>)
 8001cbc:	f001 f9ee 	bl	800309c <HAL_GPIO_Init>

}
 8001cc0:	bf00      	nop
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40011000 	.word	0x40011000
 8001cd0:	40010800 	.word	0x40010800
 8001cd4:	40010c00 	.word	0x40010c00

08001cd8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	if(htim-> Instance == TIM2){
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce8:	d104      	bne.n	8001cf4 <HAL_TIM_PeriodElapsedCallback+0x1c>
			HAL_GPIO_TogglePin(led_panel_GPIO_Port, led_panel_Pin);
 8001cea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cee:	4858      	ldr	r0, [pc, #352]	; (8001e50 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001cf0:	f001 fb5d 	bl	80033ae <HAL_GPIO_TogglePin>
		}
	if(htim-> Instance == TIM3){
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a56      	ldr	r2, [pc, #344]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d131      	bne.n	8001d62 <HAL_TIM_PeriodElapsedCallback+0x8a>
		if(tmp_adc < 1.0){
 8001cfe:	4b56      	ldr	r3, [pc, #344]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff f83a 	bl	8000d80 <__aeabi_fcmplt>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <HAL_TIM_PeriodElapsedCallback+0x40>
			ledrow1();
 8001d12:	f7ff fb2d 	bl	8001370 <ledrow1>
 8001d16:	e024      	b.n	8001d62 <HAL_TIM_PeriodElapsedCallback+0x8a>
		}else if(tmp_adc > 3.0){
 8001d18:	4b4f      	ldr	r3, [pc, #316]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	494f      	ldr	r1, [pc, #316]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff f84c 	bl	8000dbc <__aeabi_fcmpgt>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <HAL_TIM_PeriodElapsedCallback+0x58>
			ledrow8();
 8001d2a:	f7ff fb61 	bl	80013f0 <ledrow8>
 8001d2e:	e018      	b.n	8001d62 <HAL_TIM_PeriodElapsedCallback+0x8a>
		}else if(2.0 < tmp_adc && tmp_adc < 2.9 ){
 8001d30:	4b49      	ldr	r3, [pc, #292]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f83f 	bl	8000dbc <__aeabi_fcmpgt>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00e      	beq.n	8001d62 <HAL_TIM_PeriodElapsedCallback+0x8a>
 8001d44:	4b44      	ldr	r3, [pc, #272]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fb65 	bl	8000418 <__aeabi_f2d>
 8001d4e:	a33e      	add	r3, pc, #248	; (adr r3, 8001e48 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d54:	f7fe fe2a 	bl	80009ac <__aeabi_dcmplt>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_TIM_PeriodElapsedCallback+0x8a>
			ledrow_half();
 8001d5e:	f7ff fac7 	bl	80012f0 <ledrow_half>
			 break;
			default:
				break;
		}
	}*/
	if(htim->Instance == TIM4){
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a3e      	ldr	r2, [pc, #248]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d161      	bne.n	8001e30 <HAL_TIM_PeriodElapsedCallback+0x158>
		switch(flag_btn_1){
 8001d6c:	4b3d      	ldr	r3, [pc, #244]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d02e      	beq.n	8001dd2 <HAL_TIM_PeriodElapsedCallback+0xfa>
			case 0:
				if(HAL_GPIO_ReadPin(in_btn_GPIO_Port, in_btn_Pin) == 1 && !flag_btn){
 8001d74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d78:	483b      	ldr	r0, [pc, #236]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001d7a:	f001 fae9 	bl	8003350 <HAL_GPIO_ReadPin>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d116      	bne.n	8001db2 <HAL_TIM_PeriodElapsedCallback+0xda>
 8001d84:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	f083 0301 	eor.w	r3, r3, #1
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00f      	beq.n	8001db2 <HAL_TIM_PeriodElapsedCallback+0xda>
					HAL_GPIO_WritePin(led0_GPIO_Port, led0_Pin, SET);
 8001d92:	2201      	movs	r2, #1
 8001d94:	2108      	movs	r1, #8
 8001d96:	4836      	ldr	r0, [pc, #216]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001d98:	f001 faf1 	bl	800337e <HAL_GPIO_WritePin>
					flag_btn = 1;
 8001d9c:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]
					flag_btn_1 = 1;
 8001da2:	4b30      	ldr	r3, [pc, #192]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,250);
 8001da8:	4b32      	ldr	r3, [pc, #200]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	22fa      	movs	r2, #250	; 0xfa
 8001dae:	63da      	str	r2, [r3, #60]	; 0x3c
				}else if(HAL_GPIO_ReadPin(in_btn_GPIO_Port, in_btn_Pin) == 0 && flag_btn){
					//HAL_GPIO_WritePin(led0_GPIO_Port, led0_Pin, RESET);
					flag_btn = 0;
				}
			 break;
 8001db0:	e040      	b.n	8001e34 <HAL_TIM_PeriodElapsedCallback+0x15c>
				}else if(HAL_GPIO_ReadPin(in_btn_GPIO_Port, in_btn_Pin) == 0 && flag_btn){
 8001db2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001db6:	482c      	ldr	r0, [pc, #176]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001db8:	f001 faca 	bl	8003350 <HAL_GPIO_ReadPin>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d138      	bne.n	8001e34 <HAL_TIM_PeriodElapsedCallback+0x15c>
 8001dc2:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d034      	beq.n	8001e34 <HAL_TIM_PeriodElapsedCallback+0x15c>
					flag_btn = 0;
 8001dca:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
			 break;
 8001dd0:	e030      	b.n	8001e34 <HAL_TIM_PeriodElapsedCallback+0x15c>
			case 1:
				if(HAL_GPIO_ReadPin(in_btn_GPIO_Port, in_btn_Pin) == 1 && !flag_btn){
 8001dd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dd6:	4824      	ldr	r0, [pc, #144]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001dd8:	f001 faba 	bl	8003350 <HAL_GPIO_ReadPin>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d116      	bne.n	8001e10 <HAL_TIM_PeriodElapsedCallback+0x138>
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	f083 0301 	eor.w	r3, r3, #1
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00f      	beq.n	8001e10 <HAL_TIM_PeriodElapsedCallback+0x138>
					HAL_GPIO_WritePin(led0_GPIO_Port, led0_Pin, RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2108      	movs	r1, #8
 8001df4:	481e      	ldr	r0, [pc, #120]	; (8001e70 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001df6:	f001 fac2 	bl	800337e <HAL_GPIO_WritePin>
					flag_btn = 1;
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
					flag_btn_1 = 0;
 8001e00:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_3,245);
 8001e06:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	22f5      	movs	r2, #245	; 0xf5
 8001e0c:	63da      	str	r2, [r3, #60]	; 0x3c
				}else if(HAL_GPIO_ReadPin(in_btn_GPIO_Port, in_btn_Pin) == 0 && flag_btn){
					//HAL_GPIO_WritePin(led0_GPIO_Port, led0_Pin, RESET);
					flag_btn = 0;
				}
			 break;
 8001e0e:	e013      	b.n	8001e38 <HAL_TIM_PeriodElapsedCallback+0x160>
				}else if(HAL_GPIO_ReadPin(in_btn_GPIO_Port, in_btn_Pin) == 0 && flag_btn){
 8001e10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e14:	4814      	ldr	r0, [pc, #80]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001e16:	f001 fa9b 	bl	8003350 <HAL_GPIO_ReadPin>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10b      	bne.n	8001e38 <HAL_TIM_PeriodElapsedCallback+0x160>
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <HAL_TIM_PeriodElapsedCallback+0x160>
					flag_btn = 0;
 8001e28:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
			 break;
 8001e2e:	e003      	b.n	8001e38 <HAL_TIM_PeriodElapsedCallback+0x160>
				flag_rgb = 0;
			 break;
			default:
				break;
		}*/
	}
 8001e30:	bf00      	nop
 8001e32:	e002      	b.n	8001e3a <HAL_TIM_PeriodElapsedCallback+0x162>
			 break;
 8001e34:	bf00      	nop
 8001e36:	e000      	b.n	8001e3a <HAL_TIM_PeriodElapsedCallback+0x162>
			 break;
 8001e38:	bf00      	nop
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	f3af 8000 	nop.w
 8001e48:	33333333 	.word	0x33333333
 8001e4c:	40073333 	.word	0x40073333
 8001e50:	40011000 	.word	0x40011000
 8001e54:	40000400 	.word	0x40000400
 8001e58:	200000a8 	.word	0x200000a8
 8001e5c:	40400000 	.word	0x40400000
 8001e60:	40000800 	.word	0x40000800
 8001e64:	200000a1 	.word	0x200000a1
 8001e68:	40010c00 	.word	0x40010c00
 8001e6c:	200000a0 	.word	0x200000a0
 8001e70:	40010800 	.word	0x40010800
 8001e74:	200001c4 	.word	0x200001c4

08001e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e7c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e7e:	e7fe      	b.n	8001e7e <Error_Handler+0x6>

08001e80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_MspInit+0x5c>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	4a14      	ldr	r2, [pc, #80]	; (8001edc <HAL_MspInit+0x5c>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6193      	str	r3, [r2, #24]
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_MspInit+0x5c>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_MspInit+0x5c>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_MspInit+0x5c>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea8:	61d3      	str	r3, [r2, #28]
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <HAL_MspInit+0x5c>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_MspInit+0x60>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <HAL_MspInit+0x60>)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40010000 	.word	0x40010000

08001ee4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0318 	add.w	r3, r7, #24
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a33      	ldr	r2, [pc, #204]	; (8001fcc <HAL_ADC_MspInit+0xe8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d15f      	bne.n	8001fc4 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f04:	4b32      	ldr	r3, [pc, #200]	; (8001fd0 <HAL_ADC_MspInit+0xec>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	4a31      	ldr	r2, [pc, #196]	; (8001fd0 <HAL_ADC_MspInit+0xec>)
 8001f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f0e:	6193      	str	r3, [r2, #24]
 8001f10:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <HAL_ADC_MspInit+0xec>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1c:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <HAL_ADC_MspInit+0xec>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	4a2b      	ldr	r2, [pc, #172]	; (8001fd0 <HAL_ADC_MspInit+0xec>)
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	6193      	str	r3, [r2, #24]
 8001f28:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <HAL_ADC_MspInit+0xec>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f34:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <HAL_ADC_MspInit+0xec>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	4a25      	ldr	r2, [pc, #148]	; (8001fd0 <HAL_ADC_MspInit+0xec>)
 8001f3a:	f043 0308 	orr.w	r3, r3, #8
 8001f3e:	6193      	str	r3, [r2, #24]
 8001f40:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <HAL_ADC_MspInit+0xec>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f50:	2303      	movs	r3, #3
 8001f52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f54:	f107 0318 	add.w	r3, r7, #24
 8001f58:	4619      	mov	r1, r3
 8001f5a:	481e      	ldr	r0, [pc, #120]	; (8001fd4 <HAL_ADC_MspInit+0xf0>)
 8001f5c:	f001 f89e 	bl	800309c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f60:	2303      	movs	r3, #3
 8001f62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f64:	2303      	movs	r3, #3
 8001f66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f68:	f107 0318 	add.w	r3, r7, #24
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	481a      	ldr	r0, [pc, #104]	; (8001fd8 <HAL_ADC_MspInit+0xf4>)
 8001f70:	f001 f894 	bl	800309c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001f74:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <HAL_ADC_MspInit+0xf8>)
 8001f76:	4a1a      	ldr	r2, [pc, #104]	; (8001fe0 <HAL_ADC_MspInit+0xfc>)
 8001f78:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_ADC_MspInit+0xf8>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f80:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <HAL_ADC_MspInit+0xf8>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <HAL_ADC_MspInit+0xf8>)
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f8c:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <HAL_ADC_MspInit+0xf8>)
 8001f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f92:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_ADC_MspInit+0xf8>)
 8001f96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f9a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <HAL_ADC_MspInit+0xf8>)
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <HAL_ADC_MspInit+0xf8>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001fa8:	480c      	ldr	r0, [pc, #48]	; (8001fdc <HAL_ADC_MspInit+0xf8>)
 8001faa:	f000 fe89 	bl	8002cc0 <HAL_DMA_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001fb4:	f7ff ff60 	bl	8001e78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a08      	ldr	r2, [pc, #32]	; (8001fdc <HAL_ADC_MspInit+0xf8>)
 8001fbc:	621a      	str	r2, [r3, #32]
 8001fbe:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <HAL_ADC_MspInit+0xf8>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fc4:	bf00      	nop
 8001fc6:	3728      	adds	r7, #40	; 0x28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40012400 	.word	0x40012400
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40010800 	.word	0x40010800
 8001fd8:	40010c00 	.word	0x40010c00
 8001fdc:	20000180 	.word	0x20000180
 8001fe0:	40020008 	.word	0x40020008

08001fe4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a30      	ldr	r2, [pc, #192]	; (80020b4 <HAL_TIM_Base_MspInit+0xd0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d10c      	bne.n	8002010 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ff6:	4b30      	ldr	r3, [pc, #192]	; (80020b8 <HAL_TIM_Base_MspInit+0xd4>)
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	4a2f      	ldr	r2, [pc, #188]	; (80020b8 <HAL_TIM_Base_MspInit+0xd4>)
 8001ffc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002000:	6193      	str	r3, [r2, #24]
 8002002:	4b2d      	ldr	r3, [pc, #180]	; (80020b8 <HAL_TIM_Base_MspInit+0xd4>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800200e:	e04c      	b.n	80020aa <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002018:	d114      	bne.n	8002044 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800201a:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_TIM_Base_MspInit+0xd4>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4a26      	ldr	r2, [pc, #152]	; (80020b8 <HAL_TIM_Base_MspInit+0xd4>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	61d3      	str	r3, [r2, #28]
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_TIM_Base_MspInit+0xd4>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	201c      	movs	r0, #28
 8002038:	f000 fe0b 	bl	8002c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800203c:	201c      	movs	r0, #28
 800203e:	f000 fe24 	bl	8002c8a <HAL_NVIC_EnableIRQ>
}
 8002042:	e032      	b.n	80020aa <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <HAL_TIM_Base_MspInit+0xd8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d114      	bne.n	8002078 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800204e:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <HAL_TIM_Base_MspInit+0xd4>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	4a19      	ldr	r2, [pc, #100]	; (80020b8 <HAL_TIM_Base_MspInit+0xd4>)
 8002054:	f043 0302 	orr.w	r3, r3, #2
 8002058:	61d3      	str	r3, [r2, #28]
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <HAL_TIM_Base_MspInit+0xd4>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	201d      	movs	r0, #29
 800206c:	f000 fdf1 	bl	8002c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002070:	201d      	movs	r0, #29
 8002072:	f000 fe0a 	bl	8002c8a <HAL_NVIC_EnableIRQ>
}
 8002076:	e018      	b.n	80020aa <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a10      	ldr	r2, [pc, #64]	; (80020c0 <HAL_TIM_Base_MspInit+0xdc>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d113      	bne.n	80020aa <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <HAL_TIM_Base_MspInit+0xd4>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4a0c      	ldr	r2, [pc, #48]	; (80020b8 <HAL_TIM_Base_MspInit+0xd4>)
 8002088:	f043 0304 	orr.w	r3, r3, #4
 800208c:	61d3      	str	r3, [r2, #28]
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <HAL_TIM_Base_MspInit+0xd4>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	201e      	movs	r0, #30
 80020a0:	f000 fdd7 	bl	8002c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80020a4:	201e      	movs	r0, #30
 80020a6:	f000 fdf0 	bl	8002c8a <HAL_NVIC_EnableIRQ>
}
 80020aa:	bf00      	nop
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40012c00 	.word	0x40012c00
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40000400 	.word	0x40000400
 80020c0:	40000800 	.word	0x40000800

080020c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 0310 	add.w	r3, r7, #16
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a10      	ldr	r2, [pc, #64]	; (8002120 <HAL_TIM_MspPostInit+0x5c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d118      	bne.n	8002116 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <HAL_TIM_MspPostInit+0x60>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <HAL_TIM_MspPostInit+0x60>)
 80020ea:	f043 0304 	orr.w	r3, r3, #4
 80020ee:	6193      	str	r3, [r2, #24]
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_TIM_MspPostInit+0x60>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002100:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	2302      	movs	r3, #2
 8002108:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	f107 0310 	add.w	r3, r7, #16
 800210e:	4619      	mov	r1, r3
 8002110:	4805      	ldr	r0, [pc, #20]	; (8002128 <HAL_TIM_MspPostInit+0x64>)
 8002112:	f000 ffc3 	bl	800309c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002116:	bf00      	nop
 8002118:	3720      	adds	r7, #32
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40012c00 	.word	0x40012c00
 8002124:	40021000 	.word	0x40021000
 8002128:	40010800 	.word	0x40010800

0800212c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002130:	e7fe      	b.n	8002130 <NMI_Handler+0x4>

08002132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002136:	e7fe      	b.n	8002136 <HardFault_Handler+0x4>

08002138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800213c:	e7fe      	b.n	800213c <MemManage_Handler+0x4>

0800213e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002142:	e7fe      	b.n	8002142 <BusFault_Handler+0x4>

08002144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <UsageFault_Handler+0x4>

0800214a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr

08002156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr

08002162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr

0800216e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002172:	f000 f89d 	bl	80022b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <DMA1_Channel1_IRQHandler+0x10>)
 8002182:	f000 fe57 	bl	8002e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000180 	.word	0x20000180

08002190 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <TIM2_IRQHandler+0x10>)
 8002196:	f001 ff5f 	bl	8004058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	2000020c 	.word	0x2000020c

080021a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <TIM3_IRQHandler+0x10>)
 80021aa:	f001 ff55 	bl	8004058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200000f4 	.word	0x200000f4

080021b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <TIM4_IRQHandler+0x10>)
 80021be:	f001 ff4b 	bl	8004058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200000ac 	.word	0x200000ac

080021cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80021d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80021da:	e003      	b.n	80021e4 <LoopCopyDataInit>

080021dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80021de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80021e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80021e2:	3104      	adds	r1, #4

080021e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80021e4:	480a      	ldr	r0, [pc, #40]	; (8002210 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80021e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80021ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80021ec:	d3f6      	bcc.n	80021dc <CopyDataInit>
  ldr r2, =_sbss
 80021ee:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80021f0:	e002      	b.n	80021f8 <LoopFillZerobss>

080021f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80021f4:	f842 3b04 	str.w	r3, [r2], #4

080021f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80021fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80021fc:	d3f9      	bcc.n	80021f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021fe:	f7ff ffe5 	bl	80021cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002202:	f002 fd37 	bl	8004c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002206:	f7ff f933 	bl	8001470 <main>
  bx lr
 800220a:	4770      	bx	lr
  ldr r3, =_sidata
 800220c:	08005dd8 	.word	0x08005dd8
  ldr r0, =_sdata
 8002210:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002214:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8002218:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 800221c:	2000025c 	.word	0x2000025c

08002220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002220:	e7fe      	b.n	8002220 <ADC1_2_IRQHandler>
	...

08002224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_Init+0x28>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a07      	ldr	r2, [pc, #28]	; (800224c <HAL_Init+0x28>)
 800222e:	f043 0310 	orr.w	r3, r3, #16
 8002232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002234:	2003      	movs	r0, #3
 8002236:	f000 fd01 	bl	8002c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800223a:	2000      	movs	r0, #0
 800223c:	f000 f808 	bl	8002250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002240:	f7ff fe1e 	bl	8001e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40022000 	.word	0x40022000

08002250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_InitTick+0x54>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_InitTick+0x58>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4619      	mov	r1, r3
 8002262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002266:	fbb3 f3f1 	udiv	r3, r3, r1
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	4618      	mov	r0, r3
 8002270:	f000 fd19 	bl	8002ca6 <HAL_SYSTICK_Config>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e00e      	b.n	800229c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b0f      	cmp	r3, #15
 8002282:	d80a      	bhi.n	800229a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002284:	2200      	movs	r2, #0
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800228c:	f000 fce1 	bl	8002c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002290:	4a06      	ldr	r2, [pc, #24]	; (80022ac <HAL_InitTick+0x5c>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	e000      	b.n	800229c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000000 	.word	0x20000000
 80022a8:	20000008 	.word	0x20000008
 80022ac:	20000004 	.word	0x20000004

080022b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_IncTick+0x1c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_IncTick+0x20>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	4a03      	ldr	r2, [pc, #12]	; (80022d0 <HAL_IncTick+0x20>)
 80022c2:	6013      	str	r3, [r2, #0]
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	20000008 	.word	0x20000008
 80022d0:	20000258 	.word	0x20000258

080022d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return uwTick;
 80022d8:	4b02      	ldr	r3, [pc, #8]	; (80022e4 <HAL_GetTick+0x10>)
 80022da:	681b      	ldr	r3, [r3, #0]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	20000258 	.word	0x20000258

080022e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f0:	f7ff fff0 	bl	80022d4 <HAL_GetTick>
 80022f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002300:	d005      	beq.n	800230e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_Delay+0x40>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800230e:	bf00      	nop
 8002310:	f7ff ffe0 	bl	80022d4 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	429a      	cmp	r2, r3
 800231e:	d8f7      	bhi.n	8002310 <HAL_Delay+0x28>
  {
  }
}
 8002320:	bf00      	nop
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000008 	.word	0x20000008

0800232c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e0be      	b.n	80024cc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	2b00      	cmp	r3, #0
 800235a:	d109      	bne.n	8002370 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff fdba 	bl	8001ee4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 faf7 	bl	8002964 <ADC_ConversionStop_Disable>
 8002376:	4603      	mov	r3, r0
 8002378:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b00      	cmp	r3, #0
 8002384:	f040 8099 	bne.w	80024ba <HAL_ADC_Init+0x18e>
 8002388:	7dfb      	ldrb	r3, [r7, #23]
 800238a:	2b00      	cmp	r3, #0
 800238c:	f040 8095 	bne.w	80024ba <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002398:	f023 0302 	bic.w	r3, r3, #2
 800239c:	f043 0202 	orr.w	r2, r3, #2
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023ac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	7b1b      	ldrb	r3, [r3, #12]
 80023b2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023b4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023c4:	d003      	beq.n	80023ce <HAL_ADC_Init+0xa2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d102      	bne.n	80023d4 <HAL_ADC_Init+0xa8>
 80023ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023d2:	e000      	b.n	80023d6 <HAL_ADC_Init+0xaa>
 80023d4:	2300      	movs	r3, #0
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	7d1b      	ldrb	r3, [r3, #20]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d119      	bne.n	8002418 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7b1b      	ldrb	r3, [r3, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d109      	bne.n	8002400 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	035a      	lsls	r2, r3, #13
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	e00b      	b.n	8002418 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002404:	f043 0220 	orr.w	r2, r3, #32
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	f043 0201 	orr.w	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	430a      	orrs	r2, r1
 800242a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	4b28      	ldr	r3, [pc, #160]	; (80024d4 <HAL_ADC_Init+0x1a8>)
 8002434:	4013      	ands	r3, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	68b9      	ldr	r1, [r7, #8]
 800243c:	430b      	orrs	r3, r1
 800243e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002448:	d003      	beq.n	8002452 <HAL_ADC_Init+0x126>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d104      	bne.n	800245c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	3b01      	subs	r3, #1
 8002458:	051b      	lsls	r3, r3, #20
 800245a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	430a      	orrs	r2, r1
 800246e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <HAL_ADC_Init+0x1ac>)
 8002478:	4013      	ands	r3, r2
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	429a      	cmp	r2, r3
 800247e:	d10b      	bne.n	8002498 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	f023 0303 	bic.w	r3, r3, #3
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002496:	e018      	b.n	80024ca <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	f023 0312 	bic.w	r3, r3, #18
 80024a0:	f043 0210 	orr.w	r2, r3, #16
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	f043 0201 	orr.w	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024b8:	e007      	b.n	80024ca <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	f043 0210 	orr.w	r2, r3, #16
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	ffe1f7fd 	.word	0xffe1f7fd
 80024d8:	ff1f0efe 	.word	0xff1f0efe

080024dc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a64      	ldr	r2, [pc, #400]	; (8002684 <HAL_ADC_Start_DMA+0x1a8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d004      	beq.n	8002500 <HAL_ADC_Start_DMA+0x24>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a63      	ldr	r2, [pc, #396]	; (8002688 <HAL_ADC_Start_DMA+0x1ac>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d106      	bne.n	800250e <HAL_ADC_Start_DMA+0x32>
 8002500:	4b60      	ldr	r3, [pc, #384]	; (8002684 <HAL_ADC_Start_DMA+0x1a8>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002508:	2b00      	cmp	r3, #0
 800250a:	f040 80b3 	bne.w	8002674 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_ADC_Start_DMA+0x40>
 8002518:	2302      	movs	r3, #2
 800251a:	e0ae      	b.n	800267a <HAL_ADC_Start_DMA+0x19e>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 f9cb 	bl	80028c0 <ADC_Enable>
 800252a:	4603      	mov	r3, r0
 800252c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800252e:	7dfb      	ldrb	r3, [r7, #23]
 8002530:	2b00      	cmp	r3, #0
 8002532:	f040 809a 	bne.w	800266a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a4e      	ldr	r2, [pc, #312]	; (8002688 <HAL_ADC_Start_DMA+0x1ac>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d105      	bne.n	8002560 <HAL_ADC_Start_DMA+0x84>
 8002554:	4b4b      	ldr	r3, [pc, #300]	; (8002684 <HAL_ADC_Start_DMA+0x1a8>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d115      	bne.n	800258c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002576:	2b00      	cmp	r3, #0
 8002578:	d026      	beq.n	80025c8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002582:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800258a:	e01d      	b.n	80025c8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a39      	ldr	r2, [pc, #228]	; (8002684 <HAL_ADC_Start_DMA+0x1a8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d004      	beq.n	80025ac <HAL_ADC_Start_DMA+0xd0>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a38      	ldr	r2, [pc, #224]	; (8002688 <HAL_ADC_Start_DMA+0x1ac>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d10d      	bne.n	80025c8 <HAL_ADC_Start_DMA+0xec>
 80025ac:	4b35      	ldr	r3, [pc, #212]	; (8002684 <HAL_ADC_Start_DMA+0x1a8>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d007      	beq.n	80025c8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d006      	beq.n	80025e2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	f023 0206 	bic.w	r2, r3, #6
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c
 80025e0:	e002      	b.n	80025e8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	4a25      	ldr	r2, [pc, #148]	; (800268c <HAL_ADC_Start_DMA+0x1b0>)
 80025f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	4a24      	ldr	r2, [pc, #144]	; (8002690 <HAL_ADC_Start_DMA+0x1b4>)
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4a23      	ldr	r2, [pc, #140]	; (8002694 <HAL_ADC_Start_DMA+0x1b8>)
 8002606:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0202 	mvn.w	r2, #2
 8002610:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002620:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6a18      	ldr	r0, [r3, #32]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	334c      	adds	r3, #76	; 0x4c
 800262c:	4619      	mov	r1, r3
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f000 fb9f 	bl	8002d74 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002640:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002644:	d108      	bne.n	8002658 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002654:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002656:	e00f      	b.n	8002678 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002666:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002668:	e006      	b.n	8002678 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002672:	e001      	b.n	8002678 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002678:	7dfb      	ldrb	r3, [r7, #23]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40012400 	.word	0x40012400
 8002688:	40012800 	.word	0x40012800
 800268c:	080029d9 	.word	0x080029d9
 8002690:	08002a55 	.word	0x08002a55
 8002694:	08002a71 	.word	0x08002a71

08002698 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr

080026aa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
	...

080026d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x20>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e0dc      	b.n	80028aa <HAL_ADC_ConfigChannel+0x1da>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b06      	cmp	r3, #6
 80026fe:	d81c      	bhi.n	800273a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	3b05      	subs	r3, #5
 8002712:	221f      	movs	r2, #31
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	4019      	ands	r1, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	3b05      	subs	r3, #5
 800272c:	fa00 f203 	lsl.w	r2, r0, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	635a      	str	r2, [r3, #52]	; 0x34
 8002738:	e03c      	b.n	80027b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d81c      	bhi.n	800277c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	3b23      	subs	r3, #35	; 0x23
 8002754:	221f      	movs	r2, #31
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	4019      	ands	r1, r3
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	3b23      	subs	r3, #35	; 0x23
 800276e:	fa00 f203 	lsl.w	r2, r0, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	631a      	str	r2, [r3, #48]	; 0x30
 800277a:	e01b      	b.n	80027b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	3b41      	subs	r3, #65	; 0x41
 800278e:	221f      	movs	r2, #31
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	4019      	ands	r1, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	3b41      	subs	r3, #65	; 0x41
 80027a8:	fa00 f203 	lsl.w	r2, r0, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b09      	cmp	r3, #9
 80027ba:	d91c      	bls.n	80027f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68d9      	ldr	r1, [r3, #12]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4613      	mov	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	3b1e      	subs	r3, #30
 80027ce:	2207      	movs	r2, #7
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	4019      	ands	r1, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	6898      	ldr	r0, [r3, #8]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	3b1e      	subs	r3, #30
 80027e8:	fa00 f203 	lsl.w	r2, r0, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	60da      	str	r2, [r3, #12]
 80027f4:	e019      	b.n	800282a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6919      	ldr	r1, [r3, #16]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	2207      	movs	r2, #7
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	4019      	ands	r1, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	6898      	ldr	r0, [r3, #8]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4613      	mov	r3, r2
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4413      	add	r3, r2
 800281e:	fa00 f203 	lsl.w	r2, r0, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b10      	cmp	r3, #16
 8002830:	d003      	beq.n	800283a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002836:	2b11      	cmp	r3, #17
 8002838:	d132      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1d      	ldr	r2, [pc, #116]	; (80028b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d125      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d126      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002860:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b10      	cmp	r3, #16
 8002868:	d11a      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800286a:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a13      	ldr	r2, [pc, #76]	; (80028bc <HAL_ADC_ConfigChannel+0x1ec>)
 8002870:	fba2 2303 	umull	r2, r3, r2, r3
 8002874:	0c9a      	lsrs	r2, r3, #18
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002880:	e002      	b.n	8002888 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	3b01      	subs	r3, #1
 8002886:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f9      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x1b2>
 800288e:	e007      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	f043 0220 	orr.w	r2, r3, #32
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	40012400 	.word	0x40012400
 80028b8:	20000000 	.word	0x20000000
 80028bc:	431bde83 	.word	0x431bde83

080028c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d039      	beq.n	8002952 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0201 	orr.w	r2, r2, #1
 80028ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028ee:	4b1b      	ldr	r3, [pc, #108]	; (800295c <ADC_Enable+0x9c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <ADC_Enable+0xa0>)
 80028f4:	fba2 2303 	umull	r2, r3, r2, r3
 80028f8:	0c9b      	lsrs	r3, r3, #18
 80028fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80028fc:	e002      	b.n	8002904 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	3b01      	subs	r3, #1
 8002902:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f9      	bne.n	80028fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800290a:	f7ff fce3 	bl	80022d4 <HAL_GetTick>
 800290e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002910:	e018      	b.n	8002944 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002912:	f7ff fcdf 	bl	80022d4 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d911      	bls.n	8002944 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	f043 0210 	orr.w	r2, r3, #16
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	f043 0201 	orr.w	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e007      	b.n	8002954 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b01      	cmp	r3, #1
 8002950:	d1df      	bne.n	8002912 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20000000 	.word	0x20000000
 8002960:	431bde83 	.word	0x431bde83

08002964 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d127      	bne.n	80029ce <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0201 	bic.w	r2, r2, #1
 800298c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800298e:	f7ff fca1 	bl	80022d4 <HAL_GetTick>
 8002992:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002994:	e014      	b.n	80029c0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002996:	f7ff fc9d 	bl	80022d4 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d90d      	bls.n	80029c0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	f043 0210 	orr.w	r2, r3, #16
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	f043 0201 	orr.w	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e007      	b.n	80029d0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d0e3      	beq.n	8002996 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d127      	bne.n	8002a42 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002a08:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002a0c:	d115      	bne.n	8002a3a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d111      	bne.n	8002a3a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d105      	bne.n	8002a3a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	f043 0201 	orr.w	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7ff fe2c 	bl	8002698 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002a40:	e004      	b.n	8002a4c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	4798      	blx	r3
}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f7ff fe21 	bl	80026aa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	f043 0204 	orr.w	r2, r3, #4
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f7ff fe10 	bl	80026bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ad6:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	60d3      	str	r3, [r2, #12]
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <__NVIC_GetPriorityGrouping+0x18>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	0a1b      	lsrs	r3, r3, #8
 8002af6:	f003 0307 	and.w	r3, r3, #7
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	db0b      	blt.n	8002b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	f003 021f 	and.w	r2, r3, #31
 8002b20:	4906      	ldr	r1, [pc, #24]	; (8002b3c <__NVIC_EnableIRQ+0x34>)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	2001      	movs	r0, #1
 8002b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr
 8002b3c:	e000e100 	.word	0xe000e100

08002b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	6039      	str	r1, [r7, #0]
 8002b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	db0a      	blt.n	8002b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	490c      	ldr	r1, [pc, #48]	; (8002b8c <__NVIC_SetPriority+0x4c>)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	0112      	lsls	r2, r2, #4
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	440b      	add	r3, r1
 8002b64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b68:	e00a      	b.n	8002b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	4908      	ldr	r1, [pc, #32]	; (8002b90 <__NVIC_SetPriority+0x50>)
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	3b04      	subs	r3, #4
 8002b78:	0112      	lsls	r2, r2, #4
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	761a      	strb	r2, [r3, #24]
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000e100 	.word	0xe000e100
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b089      	sub	sp, #36	; 0x24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f1c3 0307 	rsb	r3, r3, #7
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	bf28      	it	cs
 8002bb2:	2304      	movcs	r3, #4
 8002bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d902      	bls.n	8002bc4 <NVIC_EncodePriority+0x30>
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3b03      	subs	r3, #3
 8002bc2:	e000      	b.n	8002bc6 <NVIC_EncodePriority+0x32>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43da      	mvns	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	fa01 f303 	lsl.w	r3, r1, r3
 8002be6:	43d9      	mvns	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bec:	4313      	orrs	r3, r2
         );
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3724      	adds	r7, #36	; 0x24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c08:	d301      	bcc.n	8002c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e00f      	b.n	8002c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <SysTick_Config+0x40>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c16:	210f      	movs	r1, #15
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c1c:	f7ff ff90 	bl	8002b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <SysTick_Config+0x40>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c26:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <SysTick_Config+0x40>)
 8002c28:	2207      	movs	r2, #7
 8002c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	e000e010 	.word	0xe000e010

08002c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff ff2d 	bl	8002aa4 <__NVIC_SetPriorityGrouping>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	4603      	mov	r3, r0
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c64:	f7ff ff42 	bl	8002aec <__NVIC_GetPriorityGrouping>
 8002c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	6978      	ldr	r0, [r7, #20]
 8002c70:	f7ff ff90 	bl	8002b94 <NVIC_EncodePriority>
 8002c74:	4602      	mov	r2, r0
 8002c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff5f 	bl	8002b40 <__NVIC_SetPriority>
}
 8002c82:	bf00      	nop
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	4603      	mov	r3, r0
 8002c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff35 	bl	8002b08 <__NVIC_EnableIRQ>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ffa2 	bl	8002bf8 <SysTick_Config>
 8002cb4:	4603      	mov	r3, r0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e043      	b.n	8002d5e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	4b22      	ldr	r3, [pc, #136]	; (8002d68 <HAL_DMA_Init+0xa8>)
 8002cde:	4413      	add	r3, r2
 8002ce0:	4a22      	ldr	r2, [pc, #136]	; (8002d6c <HAL_DMA_Init+0xac>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	091b      	lsrs	r3, r3, #4
 8002ce8:	009a      	lsls	r2, r3, #2
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a1f      	ldr	r2, [pc, #124]	; (8002d70 <HAL_DMA_Init+0xb0>)
 8002cf2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d0a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr
 8002d68:	bffdfff8 	.word	0xbffdfff8
 8002d6c:	cccccccd 	.word	0xcccccccd
 8002d70:	40020000 	.word	0x40020000

08002d74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_DMA_Start_IT+0x20>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e04a      	b.n	8002e2a <HAL_DMA_Start_IT+0xb6>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d13a      	bne.n	8002e1c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2202      	movs	r2, #2
 8002daa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 f938 	bl	8003040 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d008      	beq.n	8002dea <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 020e 	orr.w	r2, r2, #14
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	e00f      	b.n	8002e0a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0204 	bic.w	r2, r2, #4
 8002df8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 020a 	orr.w	r2, r2, #10
 8002e08:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0201 	orr.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	e005      	b.n	8002e28 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e24:	2302      	movs	r3, #2
 8002e26:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	2204      	movs	r2, #4
 8002e52:	409a      	lsls	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d04f      	beq.n	8002efc <HAL_DMA_IRQHandler+0xc8>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d04a      	beq.n	8002efc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d107      	bne.n	8002e84 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0204 	bic.w	r2, r2, #4
 8002e82:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a66      	ldr	r2, [pc, #408]	; (8003024 <HAL_DMA_IRQHandler+0x1f0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d029      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xae>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a65      	ldr	r2, [pc, #404]	; (8003028 <HAL_DMA_IRQHandler+0x1f4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d022      	beq.n	8002ede <HAL_DMA_IRQHandler+0xaa>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a63      	ldr	r2, [pc, #396]	; (800302c <HAL_DMA_IRQHandler+0x1f8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d01a      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0xa4>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a62      	ldr	r2, [pc, #392]	; (8003030 <HAL_DMA_IRQHandler+0x1fc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d012      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x9e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a60      	ldr	r2, [pc, #384]	; (8003034 <HAL_DMA_IRQHandler+0x200>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00a      	beq.n	8002ecc <HAL_DMA_IRQHandler+0x98>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a5f      	ldr	r2, [pc, #380]	; (8003038 <HAL_DMA_IRQHandler+0x204>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d102      	bne.n	8002ec6 <HAL_DMA_IRQHandler+0x92>
 8002ec0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ec4:	e00e      	b.n	8002ee4 <HAL_DMA_IRQHandler+0xb0>
 8002ec6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002eca:	e00b      	b.n	8002ee4 <HAL_DMA_IRQHandler+0xb0>
 8002ecc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ed0:	e008      	b.n	8002ee4 <HAL_DMA_IRQHandler+0xb0>
 8002ed2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ed6:	e005      	b.n	8002ee4 <HAL_DMA_IRQHandler+0xb0>
 8002ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002edc:	e002      	b.n	8002ee4 <HAL_DMA_IRQHandler+0xb0>
 8002ede:	2340      	movs	r3, #64	; 0x40
 8002ee0:	e000      	b.n	8002ee4 <HAL_DMA_IRQHandler+0xb0>
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	4a55      	ldr	r2, [pc, #340]	; (800303c <HAL_DMA_IRQHandler+0x208>)
 8002ee6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 8094 	beq.w	800301a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002efa:	e08e      	b.n	800301a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	2202      	movs	r2, #2
 8002f02:	409a      	lsls	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d056      	beq.n	8002fba <HAL_DMA_IRQHandler+0x186>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d051      	beq.n	8002fba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10b      	bne.n	8002f3c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 020a 	bic.w	r2, r2, #10
 8002f32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a38      	ldr	r2, [pc, #224]	; (8003024 <HAL_DMA_IRQHandler+0x1f0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d029      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x166>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a37      	ldr	r2, [pc, #220]	; (8003028 <HAL_DMA_IRQHandler+0x1f4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d022      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x162>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a35      	ldr	r2, [pc, #212]	; (800302c <HAL_DMA_IRQHandler+0x1f8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d01a      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x15c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a34      	ldr	r2, [pc, #208]	; (8003030 <HAL_DMA_IRQHandler+0x1fc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d012      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x156>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a32      	ldr	r2, [pc, #200]	; (8003034 <HAL_DMA_IRQHandler+0x200>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00a      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x150>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a31      	ldr	r2, [pc, #196]	; (8003038 <HAL_DMA_IRQHandler+0x204>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d102      	bne.n	8002f7e <HAL_DMA_IRQHandler+0x14a>
 8002f78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f7c:	e00e      	b.n	8002f9c <HAL_DMA_IRQHandler+0x168>
 8002f7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f82:	e00b      	b.n	8002f9c <HAL_DMA_IRQHandler+0x168>
 8002f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f88:	e008      	b.n	8002f9c <HAL_DMA_IRQHandler+0x168>
 8002f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f8e:	e005      	b.n	8002f9c <HAL_DMA_IRQHandler+0x168>
 8002f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f94:	e002      	b.n	8002f9c <HAL_DMA_IRQHandler+0x168>
 8002f96:	2320      	movs	r3, #32
 8002f98:	e000      	b.n	8002f9c <HAL_DMA_IRQHandler+0x168>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	4a27      	ldr	r2, [pc, #156]	; (800303c <HAL_DMA_IRQHandler+0x208>)
 8002f9e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d034      	beq.n	800301a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002fb8:	e02f      	b.n	800301a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	2208      	movs	r2, #8
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d028      	beq.n	800301c <HAL_DMA_IRQHandler+0x1e8>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d023      	beq.n	800301c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 020e 	bic.w	r2, r2, #14
 8002fe2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fec:	2101      	movs	r1, #1
 8002fee:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	2b00      	cmp	r3, #0
 8003010:	d004      	beq.n	800301c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	4798      	blx	r3
    }
  }
  return;
 800301a:	bf00      	nop
 800301c:	bf00      	nop
}
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40020008 	.word	0x40020008
 8003028:	4002001c 	.word	0x4002001c
 800302c:	40020030 	.word	0x40020030
 8003030:	40020044 	.word	0x40020044
 8003034:	40020058 	.word	0x40020058
 8003038:	4002006c 	.word	0x4002006c
 800303c:	40020000 	.word	0x40020000

08003040 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003056:	2101      	movs	r1, #1
 8003058:	fa01 f202 	lsl.w	r2, r1, r2
 800305c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b10      	cmp	r3, #16
 800306c:	d108      	bne.n	8003080 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800307e:	e007      	b.n	8003090 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	60da      	str	r2, [r3, #12]
}
 8003090:	bf00      	nop
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
	...

0800309c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800309c:	b480      	push	{r7}
 800309e:	b08b      	sub	sp, #44	; 0x2c
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030a6:	2300      	movs	r3, #0
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030aa:	2300      	movs	r3, #0
 80030ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ae:	e127      	b.n	8003300 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030b0:	2201      	movs	r2, #1
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69fa      	ldr	r2, [r7, #28]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	f040 8116 	bne.w	80032fa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b12      	cmp	r3, #18
 80030d4:	d034      	beq.n	8003140 <HAL_GPIO_Init+0xa4>
 80030d6:	2b12      	cmp	r3, #18
 80030d8:	d80d      	bhi.n	80030f6 <HAL_GPIO_Init+0x5a>
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d02b      	beq.n	8003136 <HAL_GPIO_Init+0x9a>
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d804      	bhi.n	80030ec <HAL_GPIO_Init+0x50>
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d031      	beq.n	800314a <HAL_GPIO_Init+0xae>
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d01c      	beq.n	8003124 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030ea:	e048      	b.n	800317e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d043      	beq.n	8003178 <HAL_GPIO_Init+0xdc>
 80030f0:	2b11      	cmp	r3, #17
 80030f2:	d01b      	beq.n	800312c <HAL_GPIO_Init+0x90>
          break;
 80030f4:	e043      	b.n	800317e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80030f6:	4a89      	ldr	r2, [pc, #548]	; (800331c <HAL_GPIO_Init+0x280>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d026      	beq.n	800314a <HAL_GPIO_Init+0xae>
 80030fc:	4a87      	ldr	r2, [pc, #540]	; (800331c <HAL_GPIO_Init+0x280>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d806      	bhi.n	8003110 <HAL_GPIO_Init+0x74>
 8003102:	4a87      	ldr	r2, [pc, #540]	; (8003320 <HAL_GPIO_Init+0x284>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d020      	beq.n	800314a <HAL_GPIO_Init+0xae>
 8003108:	4a86      	ldr	r2, [pc, #536]	; (8003324 <HAL_GPIO_Init+0x288>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01d      	beq.n	800314a <HAL_GPIO_Init+0xae>
          break;
 800310e:	e036      	b.n	800317e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003110:	4a85      	ldr	r2, [pc, #532]	; (8003328 <HAL_GPIO_Init+0x28c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d019      	beq.n	800314a <HAL_GPIO_Init+0xae>
 8003116:	4a85      	ldr	r2, [pc, #532]	; (800332c <HAL_GPIO_Init+0x290>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d016      	beq.n	800314a <HAL_GPIO_Init+0xae>
 800311c:	4a84      	ldr	r2, [pc, #528]	; (8003330 <HAL_GPIO_Init+0x294>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_GPIO_Init+0xae>
          break;
 8003122:	e02c      	b.n	800317e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	623b      	str	r3, [r7, #32]
          break;
 800312a:	e028      	b.n	800317e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	3304      	adds	r3, #4
 8003132:	623b      	str	r3, [r7, #32]
          break;
 8003134:	e023      	b.n	800317e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	3308      	adds	r3, #8
 800313c:	623b      	str	r3, [r7, #32]
          break;
 800313e:	e01e      	b.n	800317e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	330c      	adds	r3, #12
 8003146:	623b      	str	r3, [r7, #32]
          break;
 8003148:	e019      	b.n	800317e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d102      	bne.n	8003158 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003152:	2304      	movs	r3, #4
 8003154:	623b      	str	r3, [r7, #32]
          break;
 8003156:	e012      	b.n	800317e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d105      	bne.n	800316c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003160:	2308      	movs	r3, #8
 8003162:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69fa      	ldr	r2, [r7, #28]
 8003168:	611a      	str	r2, [r3, #16]
          break;
 800316a:	e008      	b.n	800317e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800316c:	2308      	movs	r3, #8
 800316e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69fa      	ldr	r2, [r7, #28]
 8003174:	615a      	str	r2, [r3, #20]
          break;
 8003176:	e002      	b.n	800317e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003178:	2300      	movs	r3, #0
 800317a:	623b      	str	r3, [r7, #32]
          break;
 800317c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2bff      	cmp	r3, #255	; 0xff
 8003182:	d801      	bhi.n	8003188 <HAL_GPIO_Init+0xec>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	e001      	b.n	800318c <HAL_GPIO_Init+0xf0>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3304      	adds	r3, #4
 800318c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2bff      	cmp	r3, #255	; 0xff
 8003192:	d802      	bhi.n	800319a <HAL_GPIO_Init+0xfe>
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	e002      	b.n	80031a0 <HAL_GPIO_Init+0x104>
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	3b08      	subs	r3, #8
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	210f      	movs	r1, #15
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	401a      	ands	r2, r3
 80031b2:	6a39      	ldr	r1, [r7, #32]
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ba:	431a      	orrs	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 8096 	beq.w	80032fa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031ce:	4b59      	ldr	r3, [pc, #356]	; (8003334 <HAL_GPIO_Init+0x298>)
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	4a58      	ldr	r2, [pc, #352]	; (8003334 <HAL_GPIO_Init+0x298>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	6193      	str	r3, [r2, #24]
 80031da:	4b56      	ldr	r3, [pc, #344]	; (8003334 <HAL_GPIO_Init+0x298>)
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031e6:	4a54      	ldr	r2, [pc, #336]	; (8003338 <HAL_GPIO_Init+0x29c>)
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	089b      	lsrs	r3, r3, #2
 80031ec:	3302      	adds	r3, #2
 80031ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	220f      	movs	r2, #15
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4013      	ands	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a4b      	ldr	r2, [pc, #300]	; (800333c <HAL_GPIO_Init+0x2a0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d013      	beq.n	800323a <HAL_GPIO_Init+0x19e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a4a      	ldr	r2, [pc, #296]	; (8003340 <HAL_GPIO_Init+0x2a4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00d      	beq.n	8003236 <HAL_GPIO_Init+0x19a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a49      	ldr	r2, [pc, #292]	; (8003344 <HAL_GPIO_Init+0x2a8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d007      	beq.n	8003232 <HAL_GPIO_Init+0x196>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a48      	ldr	r2, [pc, #288]	; (8003348 <HAL_GPIO_Init+0x2ac>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d101      	bne.n	800322e <HAL_GPIO_Init+0x192>
 800322a:	2303      	movs	r3, #3
 800322c:	e006      	b.n	800323c <HAL_GPIO_Init+0x1a0>
 800322e:	2304      	movs	r3, #4
 8003230:	e004      	b.n	800323c <HAL_GPIO_Init+0x1a0>
 8003232:	2302      	movs	r3, #2
 8003234:	e002      	b.n	800323c <HAL_GPIO_Init+0x1a0>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_GPIO_Init+0x1a0>
 800323a:	2300      	movs	r3, #0
 800323c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323e:	f002 0203 	and.w	r2, r2, #3
 8003242:	0092      	lsls	r2, r2, #2
 8003244:	4093      	lsls	r3, r2
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4313      	orrs	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800324c:	493a      	ldr	r1, [pc, #232]	; (8003338 <HAL_GPIO_Init+0x29c>)
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	089b      	lsrs	r3, r3, #2
 8003252:	3302      	adds	r3, #2
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d006      	beq.n	8003274 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003266:	4b39      	ldr	r3, [pc, #228]	; (800334c <HAL_GPIO_Init+0x2b0>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	4938      	ldr	r1, [pc, #224]	; (800334c <HAL_GPIO_Init+0x2b0>)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]
 8003272:	e006      	b.n	8003282 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003274:	4b35      	ldr	r3, [pc, #212]	; (800334c <HAL_GPIO_Init+0x2b0>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	43db      	mvns	r3, r3
 800327c:	4933      	ldr	r1, [pc, #204]	; (800334c <HAL_GPIO_Init+0x2b0>)
 800327e:	4013      	ands	r3, r2
 8003280:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d006      	beq.n	800329c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800328e:	4b2f      	ldr	r3, [pc, #188]	; (800334c <HAL_GPIO_Init+0x2b0>)
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	492e      	ldr	r1, [pc, #184]	; (800334c <HAL_GPIO_Init+0x2b0>)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	604b      	str	r3, [r1, #4]
 800329a:	e006      	b.n	80032aa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800329c:	4b2b      	ldr	r3, [pc, #172]	; (800334c <HAL_GPIO_Init+0x2b0>)
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	4929      	ldr	r1, [pc, #164]	; (800334c <HAL_GPIO_Init+0x2b0>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d006      	beq.n	80032c4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032b6:	4b25      	ldr	r3, [pc, #148]	; (800334c <HAL_GPIO_Init+0x2b0>)
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	4924      	ldr	r1, [pc, #144]	; (800334c <HAL_GPIO_Init+0x2b0>)
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	608b      	str	r3, [r1, #8]
 80032c2:	e006      	b.n	80032d2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032c4:	4b21      	ldr	r3, [pc, #132]	; (800334c <HAL_GPIO_Init+0x2b0>)
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	491f      	ldr	r1, [pc, #124]	; (800334c <HAL_GPIO_Init+0x2b0>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d006      	beq.n	80032ec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032de:	4b1b      	ldr	r3, [pc, #108]	; (800334c <HAL_GPIO_Init+0x2b0>)
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	491a      	ldr	r1, [pc, #104]	; (800334c <HAL_GPIO_Init+0x2b0>)
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60cb      	str	r3, [r1, #12]
 80032ea:	e006      	b.n	80032fa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032ec:	4b17      	ldr	r3, [pc, #92]	; (800334c <HAL_GPIO_Init+0x2b0>)
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	43db      	mvns	r3, r3
 80032f4:	4915      	ldr	r1, [pc, #84]	; (800334c <HAL_GPIO_Init+0x2b0>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	3301      	adds	r3, #1
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	fa22 f303 	lsr.w	r3, r2, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	f47f aed0 	bne.w	80030b0 <HAL_GPIO_Init+0x14>
  }
}
 8003310:	bf00      	nop
 8003312:	372c      	adds	r7, #44	; 0x2c
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	10210000 	.word	0x10210000
 8003320:	10110000 	.word	0x10110000
 8003324:	10120000 	.word	0x10120000
 8003328:	10310000 	.word	0x10310000
 800332c:	10320000 	.word	0x10320000
 8003330:	10220000 	.word	0x10220000
 8003334:	40021000 	.word	0x40021000
 8003338:	40010000 	.word	0x40010000
 800333c:	40010800 	.word	0x40010800
 8003340:	40010c00 	.word	0x40010c00
 8003344:	40011000 	.word	0x40011000
 8003348:	40011400 	.word	0x40011400
 800334c:	40010400 	.word	0x40010400

08003350 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	887b      	ldrh	r3, [r7, #2]
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
 800336c:	e001      	b.n	8003372 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800336e:	2300      	movs	r3, #0
 8003370:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003372:	7bfb      	ldrb	r3, [r7, #15]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr

0800337e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	460b      	mov	r3, r1
 8003388:	807b      	strh	r3, [r7, #2]
 800338a:	4613      	mov	r3, r2
 800338c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800338e:	787b      	ldrb	r3, [r7, #1]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003394:	887a      	ldrh	r2, [r7, #2]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800339a:	e003      	b.n	80033a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800339c:	887b      	ldrh	r3, [r7, #2]
 800339e:	041a      	lsls	r2, r3, #16
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	611a      	str	r2, [r3, #16]
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr

080033ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	460b      	mov	r3, r1
 80033b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033c0:	887a      	ldrh	r2, [r7, #2]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4013      	ands	r3, r2
 80033c6:	041a      	lsls	r2, r3, #16
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	43d9      	mvns	r1, r3
 80033cc:	887b      	ldrh	r3, [r7, #2]
 80033ce:	400b      	ands	r3, r1
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	611a      	str	r2, [r3, #16]
}
 80033d6:	bf00      	nop
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr

080033e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e26c      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 8087 	beq.w	800350e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003400:	4b92      	ldr	r3, [pc, #584]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 030c 	and.w	r3, r3, #12
 8003408:	2b04      	cmp	r3, #4
 800340a:	d00c      	beq.n	8003426 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800340c:	4b8f      	ldr	r3, [pc, #572]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b08      	cmp	r3, #8
 8003416:	d112      	bne.n	800343e <HAL_RCC_OscConfig+0x5e>
 8003418:	4b8c      	ldr	r3, [pc, #560]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003424:	d10b      	bne.n	800343e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003426:	4b89      	ldr	r3, [pc, #548]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d06c      	beq.n	800350c <HAL_RCC_OscConfig+0x12c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d168      	bne.n	800350c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e246      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003446:	d106      	bne.n	8003456 <HAL_RCC_OscConfig+0x76>
 8003448:	4b80      	ldr	r3, [pc, #512]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a7f      	ldr	r2, [pc, #508]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800344e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	e02e      	b.n	80034b4 <HAL_RCC_OscConfig+0xd4>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10c      	bne.n	8003478 <HAL_RCC_OscConfig+0x98>
 800345e:	4b7b      	ldr	r3, [pc, #492]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a7a      	ldr	r2, [pc, #488]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	4b78      	ldr	r3, [pc, #480]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a77      	ldr	r2, [pc, #476]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	e01d      	b.n	80034b4 <HAL_RCC_OscConfig+0xd4>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003480:	d10c      	bne.n	800349c <HAL_RCC_OscConfig+0xbc>
 8003482:	4b72      	ldr	r3, [pc, #456]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a71      	ldr	r2, [pc, #452]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	4b6f      	ldr	r3, [pc, #444]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a6e      	ldr	r2, [pc, #440]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	e00b      	b.n	80034b4 <HAL_RCC_OscConfig+0xd4>
 800349c:	4b6b      	ldr	r3, [pc, #428]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a6a      	ldr	r2, [pc, #424]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80034a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	4b68      	ldr	r3, [pc, #416]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a67      	ldr	r2, [pc, #412]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80034ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d013      	beq.n	80034e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fe ff0a 	bl	80022d4 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c4:	f7fe ff06 	bl	80022d4 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	; 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e1fa      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d6:	4b5d      	ldr	r3, [pc, #372]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0xe4>
 80034e2:	e014      	b.n	800350e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fe fef6 	bl	80022d4 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ec:	f7fe fef2 	bl	80022d4 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e1e6      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fe:	4b53      	ldr	r3, [pc, #332]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x10c>
 800350a:	e000      	b.n	800350e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800350c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d063      	beq.n	80035e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800351a:	4b4c      	ldr	r3, [pc, #304]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00b      	beq.n	800353e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003526:	4b49      	ldr	r3, [pc, #292]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b08      	cmp	r3, #8
 8003530:	d11c      	bne.n	800356c <HAL_RCC_OscConfig+0x18c>
 8003532:	4b46      	ldr	r3, [pc, #280]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d116      	bne.n	800356c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353e:	4b43      	ldr	r3, [pc, #268]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d005      	beq.n	8003556 <HAL_RCC_OscConfig+0x176>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d001      	beq.n	8003556 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e1ba      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003556:	4b3d      	ldr	r3, [pc, #244]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4939      	ldr	r1, [pc, #228]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356a:	e03a      	b.n	80035e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d020      	beq.n	80035b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003574:	4b36      	ldr	r3, [pc, #216]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 8003576:	2201      	movs	r2, #1
 8003578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357a:	f7fe feab 	bl	80022d4 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003582:	f7fe fea7 	bl	80022d4 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e19b      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003594:	4b2d      	ldr	r3, [pc, #180]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f0      	beq.n	8003582 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a0:	4b2a      	ldr	r3, [pc, #168]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4927      	ldr	r1, [pc, #156]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	600b      	str	r3, [r1, #0]
 80035b4:	e015      	b.n	80035e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b6:	4b26      	ldr	r3, [pc, #152]	; (8003650 <HAL_RCC_OscConfig+0x270>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fe fe8a 	bl	80022d4 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c4:	f7fe fe86 	bl	80022d4 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e17a      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d6:	4b1d      	ldr	r3, [pc, #116]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d03a      	beq.n	8003664 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d019      	beq.n	800362a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035f6:	4b17      	ldr	r3, [pc, #92]	; (8003654 <HAL_RCC_OscConfig+0x274>)
 80035f8:	2201      	movs	r2, #1
 80035fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fc:	f7fe fe6a 	bl	80022d4 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003604:	f7fe fe66 	bl	80022d4 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e15a      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003616:	4b0d      	ldr	r3, [pc, #52]	; (800364c <HAL_RCC_OscConfig+0x26c>)
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003622:	2001      	movs	r0, #1
 8003624:	f000 faa8 	bl	8003b78 <RCC_Delay>
 8003628:	e01c      	b.n	8003664 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800362a:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <HAL_RCC_OscConfig+0x274>)
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003630:	f7fe fe50 	bl	80022d4 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003636:	e00f      	b.n	8003658 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003638:	f7fe fe4c 	bl	80022d4 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d908      	bls.n	8003658 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e140      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000
 8003650:	42420000 	.word	0x42420000
 8003654:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003658:	4b9e      	ldr	r3, [pc, #632]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e9      	bne.n	8003638 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80a6 	beq.w	80037be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003672:	2300      	movs	r3, #0
 8003674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003676:	4b97      	ldr	r3, [pc, #604]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10d      	bne.n	800369e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003682:	4b94      	ldr	r3, [pc, #592]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4a93      	ldr	r2, [pc, #588]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368c:	61d3      	str	r3, [r2, #28]
 800368e:	4b91      	ldr	r3, [pc, #580]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800369a:	2301      	movs	r3, #1
 800369c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369e:	4b8e      	ldr	r3, [pc, #568]	; (80038d8 <HAL_RCC_OscConfig+0x4f8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d118      	bne.n	80036dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036aa:	4b8b      	ldr	r3, [pc, #556]	; (80038d8 <HAL_RCC_OscConfig+0x4f8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a8a      	ldr	r2, [pc, #552]	; (80038d8 <HAL_RCC_OscConfig+0x4f8>)
 80036b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036b6:	f7fe fe0d 	bl	80022d4 <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036bc:	e008      	b.n	80036d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036be:	f7fe fe09 	bl	80022d4 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b64      	cmp	r3, #100	; 0x64
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e0fd      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d0:	4b81      	ldr	r3, [pc, #516]	; (80038d8 <HAL_RCC_OscConfig+0x4f8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0f0      	beq.n	80036be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d106      	bne.n	80036f2 <HAL_RCC_OscConfig+0x312>
 80036e4:	4b7b      	ldr	r3, [pc, #492]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	4a7a      	ldr	r2, [pc, #488]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	6213      	str	r3, [r2, #32]
 80036f0:	e02d      	b.n	800374e <HAL_RCC_OscConfig+0x36e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x334>
 80036fa:	4b76      	ldr	r3, [pc, #472]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	4a75      	ldr	r2, [pc, #468]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	6213      	str	r3, [r2, #32]
 8003706:	4b73      	ldr	r3, [pc, #460]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	4a72      	ldr	r2, [pc, #456]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 800370c:	f023 0304 	bic.w	r3, r3, #4
 8003710:	6213      	str	r3, [r2, #32]
 8003712:	e01c      	b.n	800374e <HAL_RCC_OscConfig+0x36e>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	2b05      	cmp	r3, #5
 800371a:	d10c      	bne.n	8003736 <HAL_RCC_OscConfig+0x356>
 800371c:	4b6d      	ldr	r3, [pc, #436]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	4a6c      	ldr	r2, [pc, #432]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003722:	f043 0304 	orr.w	r3, r3, #4
 8003726:	6213      	str	r3, [r2, #32]
 8003728:	4b6a      	ldr	r3, [pc, #424]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	4a69      	ldr	r2, [pc, #420]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	6213      	str	r3, [r2, #32]
 8003734:	e00b      	b.n	800374e <HAL_RCC_OscConfig+0x36e>
 8003736:	4b67      	ldr	r3, [pc, #412]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	4a66      	ldr	r2, [pc, #408]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	6213      	str	r3, [r2, #32]
 8003742:	4b64      	ldr	r3, [pc, #400]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	4a63      	ldr	r2, [pc, #396]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003748:	f023 0304 	bic.w	r3, r3, #4
 800374c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d015      	beq.n	8003782 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003756:	f7fe fdbd 	bl	80022d4 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375c:	e00a      	b.n	8003774 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375e:	f7fe fdb9 	bl	80022d4 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	f241 3288 	movw	r2, #5000	; 0x1388
 800376c:	4293      	cmp	r3, r2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e0ab      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003774:	4b57      	ldr	r3, [pc, #348]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0ee      	beq.n	800375e <HAL_RCC_OscConfig+0x37e>
 8003780:	e014      	b.n	80037ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003782:	f7fe fda7 	bl	80022d4 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378a:	f7fe fda3 	bl	80022d4 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f241 3288 	movw	r2, #5000	; 0x1388
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e095      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a0:	4b4c      	ldr	r3, [pc, #304]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1ee      	bne.n	800378a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d105      	bne.n	80037be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b2:	4b48      	ldr	r3, [pc, #288]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	4a47      	ldr	r2, [pc, #284]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 80037b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 8081 	beq.w	80038ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037c8:	4b42      	ldr	r3, [pc, #264]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d061      	beq.n	8003898 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d146      	bne.n	800386a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037dc:	4b3f      	ldr	r3, [pc, #252]	; (80038dc <HAL_RCC_OscConfig+0x4fc>)
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e2:	f7fe fd77 	bl	80022d4 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ea:	f7fe fd73 	bl	80022d4 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e067      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fc:	4b35      	ldr	r3, [pc, #212]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f0      	bne.n	80037ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003810:	d108      	bne.n	8003824 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003812:	4b30      	ldr	r3, [pc, #192]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	492d      	ldr	r1, [pc, #180]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003820:	4313      	orrs	r3, r2
 8003822:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003824:	4b2b      	ldr	r3, [pc, #172]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a19      	ldr	r1, [r3, #32]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	430b      	orrs	r3, r1
 8003836:	4927      	ldr	r1, [pc, #156]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800383c:	4b27      	ldr	r3, [pc, #156]	; (80038dc <HAL_RCC_OscConfig+0x4fc>)
 800383e:	2201      	movs	r2, #1
 8003840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003842:	f7fe fd47 	bl	80022d4 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384a:	f7fe fd43 	bl	80022d4 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e037      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800385c:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f0      	beq.n	800384a <HAL_RCC_OscConfig+0x46a>
 8003868:	e02f      	b.n	80038ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386a:	4b1c      	ldr	r3, [pc, #112]	; (80038dc <HAL_RCC_OscConfig+0x4fc>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7fe fd30 	bl	80022d4 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003878:	f7fe fd2c 	bl	80022d4 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e020      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800388a:	4b12      	ldr	r3, [pc, #72]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x498>
 8003896:	e018      	b.n	80038ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e013      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_OscConfig+0x4f4>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d106      	bne.n	80038c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d001      	beq.n	80038ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40007000 	.word	0x40007000
 80038dc:	42420060 	.word	0x42420060

080038e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0d0      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038f4:	4b6a      	ldr	r3, [pc, #424]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d910      	bls.n	8003924 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b67      	ldr	r3, [pc, #412]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 0207 	bic.w	r2, r3, #7
 800390a:	4965      	ldr	r1, [pc, #404]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b63      	ldr	r3, [pc, #396]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0b8      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d020      	beq.n	8003972 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800393c:	4b59      	ldr	r3, [pc, #356]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	4a58      	ldr	r2, [pc, #352]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003942:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003946:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003954:	4b53      	ldr	r3, [pc, #332]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4a52      	ldr	r2, [pc, #328]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800395a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800395e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003960:	4b50      	ldr	r3, [pc, #320]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	494d      	ldr	r1, [pc, #308]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800396e:	4313      	orrs	r3, r2
 8003970:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d040      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d107      	bne.n	8003996 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	4b47      	ldr	r3, [pc, #284]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d115      	bne.n	80039be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e07f      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d107      	bne.n	80039ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399e:	4b41      	ldr	r3, [pc, #260]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e073      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ae:	4b3d      	ldr	r3, [pc, #244]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e06b      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039be:	4b39      	ldr	r3, [pc, #228]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f023 0203 	bic.w	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	4936      	ldr	r1, [pc, #216]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d0:	f7fe fc80 	bl	80022d4 <HAL_GetTick>
 80039d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d6:	e00a      	b.n	80039ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d8:	f7fe fc7c 	bl	80022d4 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e053      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ee:	4b2d      	ldr	r3, [pc, #180]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f003 020c 	and.w	r2, r3, #12
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d1eb      	bne.n	80039d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a00:	4b27      	ldr	r3, [pc, #156]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d210      	bcs.n	8003a30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 0207 	bic.w	r2, r3, #7
 8003a16:	4922      	ldr	r1, [pc, #136]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e032      	b.n	8003a96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a3c:	4b19      	ldr	r3, [pc, #100]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4916      	ldr	r1, [pc, #88]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d009      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a5a:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	490e      	ldr	r1, [pc, #56]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a6e:	f000 f821 	bl	8003ab4 <HAL_RCC_GetSysClockFreq>
 8003a72:	4601      	mov	r1, r0
 8003a74:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	091b      	lsrs	r3, r3, #4
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a80:	5cd3      	ldrb	r3, [r2, r3]
 8003a82:	fa21 f303 	lsr.w	r3, r1, r3
 8003a86:	4a09      	ldr	r2, [pc, #36]	; (8003aac <HAL_RCC_ClockConfig+0x1cc>)
 8003a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a8a:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <HAL_RCC_ClockConfig+0x1d0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fe fbde 	bl	8002250 <HAL_InitTick>

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40022000 	.word	0x40022000
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	08005d78 	.word	0x08005d78
 8003aac:	20000000 	.word	0x20000000
 8003ab0:	20000004 	.word	0x20000004

08003ab4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab4:	b490      	push	{r4, r7}
 8003ab6:	b08a      	sub	sp, #40	; 0x28
 8003ab8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003aba:	4b2a      	ldr	r3, [pc, #168]	; (8003b64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003abc:	1d3c      	adds	r4, r7, #4
 8003abe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ac0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ac4:	4b28      	ldr	r3, [pc, #160]	; (8003b68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61bb      	str	r3, [r7, #24]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ade:	4b23      	ldr	r3, [pc, #140]	; (8003b6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d002      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0x40>
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d003      	beq.n	8003afa <HAL_RCC_GetSysClockFreq+0x46>
 8003af2:	e02d      	b.n	8003b50 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003af4:	4b1e      	ldr	r3, [pc, #120]	; (8003b70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003af6:	623b      	str	r3, [r7, #32]
      break;
 8003af8:	e02d      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	0c9b      	lsrs	r3, r3, #18
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b06:	4413      	add	r3, r2
 8003b08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b0c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d013      	beq.n	8003b40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b18:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	0c5b      	lsrs	r3, r3, #17
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b26:	4413      	add	r3, r2
 8003b28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	4a0f      	ldr	r2, [pc, #60]	; (8003b70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b32:	fb02 f203 	mul.w	r2, r2, r3
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3e:	e004      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	4a0c      	ldr	r2, [pc, #48]	; (8003b74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b44:	fb02 f303 	mul.w	r3, r2, r3
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	623b      	str	r3, [r7, #32]
      break;
 8003b4e:	e002      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b50:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b52:	623b      	str	r3, [r7, #32]
      break;
 8003b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b56:	6a3b      	ldr	r3, [r7, #32]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3728      	adds	r7, #40	; 0x28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc90      	pop	{r4, r7}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	08005d64 	.word	0x08005d64
 8003b68:	08005d74 	.word	0x08005d74
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	007a1200 	.word	0x007a1200
 8003b74:	003d0900 	.word	0x003d0900

08003b78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b80:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <RCC_Delay+0x34>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a0a      	ldr	r2, [pc, #40]	; (8003bb0 <RCC_Delay+0x38>)
 8003b86:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8a:	0a5b      	lsrs	r3, r3, #9
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	fb02 f303 	mul.w	r3, r2, r3
 8003b92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b94:	bf00      	nop
  }
  while (Delay --);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1e5a      	subs	r2, r3, #1
 8003b9a:	60fa      	str	r2, [r7, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1f9      	bne.n	8003b94 <RCC_Delay+0x1c>
}
 8003ba0:	bf00      	nop
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20000000 	.word	0x20000000
 8003bb0:	10624dd3 	.word	0x10624dd3

08003bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d07d      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd4:	4b4f      	ldr	r3, [pc, #316]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10d      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be0:	4b4c      	ldr	r3, [pc, #304]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	4a4b      	ldr	r2, [pc, #300]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bea:	61d3      	str	r3, [r2, #28]
 8003bec:	4b49      	ldr	r3, [pc, #292]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfc:	4b46      	ldr	r3, [pc, #280]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d118      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c08:	4b43      	ldr	r3, [pc, #268]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a42      	ldr	r2, [pc, #264]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c14:	f7fe fb5e 	bl	80022d4 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1a:	e008      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c1c:	f7fe fb5a 	bl	80022d4 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	; 0x64
 8003c28:	d901      	bls.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e06d      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2e:	4b3a      	ldr	r3, [pc, #232]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0f0      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c3a:	4b36      	ldr	r3, [pc, #216]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d02e      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d027      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c58:	4b2e      	ldr	r3, [pc, #184]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c62:	4b2e      	ldr	r3, [pc, #184]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c68:	4b2c      	ldr	r3, [pc, #176]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c6e:	4a29      	ldr	r2, [pc, #164]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d014      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7e:	f7fe fb29 	bl	80022d4 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c84:	e00a      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c86:	f7fe fb25 	bl	80022d4 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e036      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0ee      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ca8:	4b1a      	ldr	r3, [pc, #104]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	4917      	ldr	r1, [pc, #92]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cba:	7dfb      	ldrb	r3, [r7, #23]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d105      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc0:	4b14      	ldr	r3, [pc, #80]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	4a13      	ldr	r2, [pc, #76]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cd8:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	490b      	ldr	r1, [pc, #44]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d008      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cf6:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	4904      	ldr	r1, [pc, #16]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000
 8003d18:	40007000 	.word	0x40007000
 8003d1c:	42420440 	.word	0x42420440

08003d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e041      	b.n	8003db6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fe f94c 	bl	8001fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	f000 fc1c 	bl	800459c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d001      	beq.n	8003dd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e03a      	b.n	8003e4e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <HAL_TIM_Base_Start_IT+0x98>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00e      	beq.n	8003e18 <HAL_TIM_Base_Start_IT+0x58>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e02:	d009      	beq.n	8003e18 <HAL_TIM_Base_Start_IT+0x58>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a14      	ldr	r2, [pc, #80]	; (8003e5c <HAL_TIM_Base_Start_IT+0x9c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d004      	beq.n	8003e18 <HAL_TIM_Base_Start_IT+0x58>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a13      	ldr	r2, [pc, #76]	; (8003e60 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d111      	bne.n	8003e3c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b06      	cmp	r3, #6
 8003e28:	d010      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0201 	orr.w	r2, r2, #1
 8003e38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e3a:	e007      	b.n	8003e4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr
 8003e58:	40012c00 	.word	0x40012c00
 8003e5c:	40000400 	.word	0x40000400
 8003e60:	40000800 	.word	0x40000800

08003e64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e041      	b.n	8003efa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f839 	bl	8003f02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 fb7a 	bl	800459c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d109      	bne.n	8003f38 <HAL_TIM_PWM_Start+0x24>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	e022      	b.n	8003f7e <HAL_TIM_PWM_Start+0x6a>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d109      	bne.n	8003f52 <HAL_TIM_PWM_Start+0x3e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	bf14      	ite	ne
 8003f4a:	2301      	movne	r3, #1
 8003f4c:	2300      	moveq	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	e015      	b.n	8003f7e <HAL_TIM_PWM_Start+0x6a>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d109      	bne.n	8003f6c <HAL_TIM_PWM_Start+0x58>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	bf14      	ite	ne
 8003f64:	2301      	movne	r3, #1
 8003f66:	2300      	moveq	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	e008      	b.n	8003f7e <HAL_TIM_PWM_Start+0x6a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	bf14      	ite	ne
 8003f78:	2301      	movne	r3, #1
 8003f7a:	2300      	moveq	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e05e      	b.n	8004044 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d104      	bne.n	8003f96 <HAL_TIM_PWM_Start+0x82>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f94:	e013      	b.n	8003fbe <HAL_TIM_PWM_Start+0xaa>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d104      	bne.n	8003fa6 <HAL_TIM_PWM_Start+0x92>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fa4:	e00b      	b.n	8003fbe <HAL_TIM_PWM_Start+0xaa>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d104      	bne.n	8003fb6 <HAL_TIM_PWM_Start+0xa2>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fb4:	e003      	b.n	8003fbe <HAL_TIM_PWM_Start+0xaa>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	6839      	ldr	r1, [r7, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fd68 	bl	8004a9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1e      	ldr	r2, [pc, #120]	; (800404c <HAL_TIM_PWM_Start+0x138>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d107      	bne.n	8003fe6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fe4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a18      	ldr	r2, [pc, #96]	; (800404c <HAL_TIM_PWM_Start+0x138>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00e      	beq.n	800400e <HAL_TIM_PWM_Start+0xfa>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff8:	d009      	beq.n	800400e <HAL_TIM_PWM_Start+0xfa>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a14      	ldr	r2, [pc, #80]	; (8004050 <HAL_TIM_PWM_Start+0x13c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d004      	beq.n	800400e <HAL_TIM_PWM_Start+0xfa>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a12      	ldr	r2, [pc, #72]	; (8004054 <HAL_TIM_PWM_Start+0x140>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d111      	bne.n	8004032 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b06      	cmp	r3, #6
 800401e:	d010      	beq.n	8004042 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004030:	e007      	b.n	8004042 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40012c00 	.word	0x40012c00
 8004050:	40000400 	.word	0x40000400
 8004054:	40000800 	.word	0x40000800

08004058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b02      	cmp	r3, #2
 800406c:	d122      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b02      	cmp	r3, #2
 800407a:	d11b      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0202 	mvn.w	r2, #2
 8004084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fa62 	bl	8004564 <HAL_TIM_IC_CaptureCallback>
 80040a0:	e005      	b.n	80040ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fa55 	bl	8004552 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fa64 	bl	8004576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d122      	bne.n	8004108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d11b      	bne.n	8004108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f06f 0204 	mvn.w	r2, #4
 80040d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2202      	movs	r2, #2
 80040de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fa38 	bl	8004564 <HAL_TIM_IC_CaptureCallback>
 80040f4:	e005      	b.n	8004102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fa2b 	bl	8004552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fa3a 	bl	8004576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b08      	cmp	r3, #8
 8004114:	d122      	bne.n	800415c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b08      	cmp	r3, #8
 8004122:	d11b      	bne.n	800415c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0208 	mvn.w	r2, #8
 800412c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2204      	movs	r2, #4
 8004132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fa0e 	bl	8004564 <HAL_TIM_IC_CaptureCallback>
 8004148:	e005      	b.n	8004156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fa01 	bl	8004552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fa10 	bl	8004576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b10      	cmp	r3, #16
 8004168:	d122      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b10      	cmp	r3, #16
 8004176:	d11b      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0210 	mvn.w	r2, #16
 8004180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2208      	movs	r2, #8
 8004186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f9e4 	bl	8004564 <HAL_TIM_IC_CaptureCallback>
 800419c:	e005      	b.n	80041aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f9d7 	bl	8004552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f9e6 	bl	8004576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d10e      	bne.n	80041dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d107      	bne.n	80041dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0201 	mvn.w	r2, #1
 80041d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fd fd7e 	bl	8001cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e6:	2b80      	cmp	r3, #128	; 0x80
 80041e8:	d10e      	bne.n	8004208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f4:	2b80      	cmp	r3, #128	; 0x80
 80041f6:	d107      	bne.n	8004208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fd26 	bl	8004c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004212:	2b40      	cmp	r3, #64	; 0x40
 8004214:	d10e      	bne.n	8004234 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004220:	2b40      	cmp	r3, #64	; 0x40
 8004222:	d107      	bne.n	8004234 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800422c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f9aa 	bl	8004588 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0320 	and.w	r3, r3, #32
 800423e:	2b20      	cmp	r3, #32
 8004240:	d10e      	bne.n	8004260 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b20      	cmp	r3, #32
 800424e:	d107      	bne.n	8004260 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0220 	mvn.w	r2, #32
 8004258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fcf1 	bl	8004c42 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800427a:	2b01      	cmp	r3, #1
 800427c:	d101      	bne.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800427e:	2302      	movs	r3, #2
 8004280:	e0ac      	b.n	80043dc <HAL_TIM_PWM_ConfigChannel+0x174>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b0c      	cmp	r3, #12
 800428e:	f200 809f 	bhi.w	80043d0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	080042cd 	.word	0x080042cd
 800429c:	080043d1 	.word	0x080043d1
 80042a0:	080043d1 	.word	0x080043d1
 80042a4:	080043d1 	.word	0x080043d1
 80042a8:	0800430d 	.word	0x0800430d
 80042ac:	080043d1 	.word	0x080043d1
 80042b0:	080043d1 	.word	0x080043d1
 80042b4:	080043d1 	.word	0x080043d1
 80042b8:	0800434f 	.word	0x0800434f
 80042bc:	080043d1 	.word	0x080043d1
 80042c0:	080043d1 	.word	0x080043d1
 80042c4:	080043d1 	.word	0x080043d1
 80042c8:	0800438f 	.word	0x0800438f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 f9c4 	bl	8004660 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0208 	orr.w	r2, r2, #8
 80042e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0204 	bic.w	r2, r2, #4
 80042f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6999      	ldr	r1, [r3, #24]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	619a      	str	r2, [r3, #24]
      break;
 800430a:	e062      	b.n	80043d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fa0a 	bl	800472c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6999      	ldr	r1, [r3, #24]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	021a      	lsls	r2, r3, #8
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	619a      	str	r2, [r3, #24]
      break;
 800434c:	e041      	b.n	80043d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fa53 	bl	8004800 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0208 	orr.w	r2, r2, #8
 8004368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0204 	bic.w	r2, r2, #4
 8004378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69d9      	ldr	r1, [r3, #28]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	61da      	str	r2, [r3, #28]
      break;
 800438c:	e021      	b.n	80043d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fa9d 	bl	80048d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69d9      	ldr	r1, [r3, #28]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	021a      	lsls	r2, r3, #8
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	61da      	str	r2, [r3, #28]
      break;
 80043ce:	e000      	b.n	80043d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80043d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_TIM_ConfigClockSource+0x18>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e0a6      	b.n	800454a <HAL_TIM_ConfigClockSource+0x166>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800441a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004422:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b40      	cmp	r3, #64	; 0x40
 8004432:	d067      	beq.n	8004504 <HAL_TIM_ConfigClockSource+0x120>
 8004434:	2b40      	cmp	r3, #64	; 0x40
 8004436:	d80b      	bhi.n	8004450 <HAL_TIM_ConfigClockSource+0x6c>
 8004438:	2b10      	cmp	r3, #16
 800443a:	d073      	beq.n	8004524 <HAL_TIM_ConfigClockSource+0x140>
 800443c:	2b10      	cmp	r3, #16
 800443e:	d802      	bhi.n	8004446 <HAL_TIM_ConfigClockSource+0x62>
 8004440:	2b00      	cmp	r3, #0
 8004442:	d06f      	beq.n	8004524 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004444:	e078      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004446:	2b20      	cmp	r3, #32
 8004448:	d06c      	beq.n	8004524 <HAL_TIM_ConfigClockSource+0x140>
 800444a:	2b30      	cmp	r3, #48	; 0x30
 800444c:	d06a      	beq.n	8004524 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800444e:	e073      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004450:	2b70      	cmp	r3, #112	; 0x70
 8004452:	d00d      	beq.n	8004470 <HAL_TIM_ConfigClockSource+0x8c>
 8004454:	2b70      	cmp	r3, #112	; 0x70
 8004456:	d804      	bhi.n	8004462 <HAL_TIM_ConfigClockSource+0x7e>
 8004458:	2b50      	cmp	r3, #80	; 0x50
 800445a:	d033      	beq.n	80044c4 <HAL_TIM_ConfigClockSource+0xe0>
 800445c:	2b60      	cmp	r3, #96	; 0x60
 800445e:	d041      	beq.n	80044e4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004460:	e06a      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004466:	d066      	beq.n	8004536 <HAL_TIM_ConfigClockSource+0x152>
 8004468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446c:	d017      	beq.n	800449e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800446e:	e063      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	6899      	ldr	r1, [r3, #8]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f000 faed 	bl	8004a5e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004492:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	609a      	str	r2, [r3, #8]
      break;
 800449c:	e04c      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6899      	ldr	r1, [r3, #8]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f000 fad6 	bl	8004a5e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044c0:	609a      	str	r2, [r3, #8]
      break;
 80044c2:	e039      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	6859      	ldr	r1, [r3, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	461a      	mov	r2, r3
 80044d2:	f000 fa4d 	bl	8004970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2150      	movs	r1, #80	; 0x50
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 faa4 	bl	8004a2a <TIM_ITRx_SetConfig>
      break;
 80044e2:	e029      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	6859      	ldr	r1, [r3, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	461a      	mov	r2, r3
 80044f2:	f000 fa6b 	bl	80049cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2160      	movs	r1, #96	; 0x60
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fa94 	bl	8004a2a <TIM_ITRx_SetConfig>
      break;
 8004502:	e019      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6818      	ldr	r0, [r3, #0]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	6859      	ldr	r1, [r3, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	461a      	mov	r2, r3
 8004512:	f000 fa2d 	bl	8004970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2140      	movs	r1, #64	; 0x40
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fa84 	bl	8004a2a <TIM_ITRx_SetConfig>
      break;
 8004522:	e009      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4619      	mov	r1, r3
 800452e:	4610      	mov	r0, r2
 8004530:	f000 fa7b 	bl	8004a2a <TIM_ITRx_SetConfig>
        break;
 8004534:	e000      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004536:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr

08004564 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr

08004576 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr
	...

0800459c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a29      	ldr	r2, [pc, #164]	; (8004654 <TIM_Base_SetConfig+0xb8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00b      	beq.n	80045cc <TIM_Base_SetConfig+0x30>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ba:	d007      	beq.n	80045cc <TIM_Base_SetConfig+0x30>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a26      	ldr	r2, [pc, #152]	; (8004658 <TIM_Base_SetConfig+0xbc>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d003      	beq.n	80045cc <TIM_Base_SetConfig+0x30>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a25      	ldr	r2, [pc, #148]	; (800465c <TIM_Base_SetConfig+0xc0>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d108      	bne.n	80045de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a1c      	ldr	r2, [pc, #112]	; (8004654 <TIM_Base_SetConfig+0xb8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00b      	beq.n	80045fe <TIM_Base_SetConfig+0x62>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ec:	d007      	beq.n	80045fe <TIM_Base_SetConfig+0x62>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a19      	ldr	r2, [pc, #100]	; (8004658 <TIM_Base_SetConfig+0xbc>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d003      	beq.n	80045fe <TIM_Base_SetConfig+0x62>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a18      	ldr	r2, [pc, #96]	; (800465c <TIM_Base_SetConfig+0xc0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d108      	bne.n	8004610 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	4313      	orrs	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a07      	ldr	r2, [pc, #28]	; (8004654 <TIM_Base_SetConfig+0xb8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d103      	bne.n	8004644 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	615a      	str	r2, [r3, #20]
}
 800464a:	bf00      	nop
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr
 8004654:	40012c00 	.word	0x40012c00
 8004658:	40000400 	.word	0x40000400
 800465c:	40000800 	.word	0x40000800

08004660 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	f023 0201 	bic.w	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f023 0303 	bic.w	r3, r3, #3
 8004696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f023 0302 	bic.w	r3, r3, #2
 80046a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a1c      	ldr	r2, [pc, #112]	; (8004728 <TIM_OC1_SetConfig+0xc8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d10c      	bne.n	80046d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f023 0308 	bic.w	r3, r3, #8
 80046c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f023 0304 	bic.w	r3, r3, #4
 80046d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a13      	ldr	r2, [pc, #76]	; (8004728 <TIM_OC1_SetConfig+0xc8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d111      	bne.n	8004702 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	621a      	str	r2, [r3, #32]
}
 800471c:	bf00      	nop
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	bc80      	pop	{r7}
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40012c00 	.word	0x40012c00

0800472c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f023 0210 	bic.w	r2, r3, #16
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f023 0320 	bic.w	r3, r3, #32
 8004776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a1d      	ldr	r2, [pc, #116]	; (80047fc <TIM_OC2_SetConfig+0xd0>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d10d      	bne.n	80047a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a14      	ldr	r2, [pc, #80]	; (80047fc <TIM_OC2_SetConfig+0xd0>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d113      	bne.n	80047d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	621a      	str	r2, [r3, #32]
}
 80047f2:	bf00      	nop
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr
 80047fc:	40012c00 	.word	0x40012c00

08004800 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0303 	bic.w	r3, r3, #3
 8004836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a1d      	ldr	r2, [pc, #116]	; (80048d0 <TIM_OC3_SetConfig+0xd0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d10d      	bne.n	800487a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004864:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	021b      	lsls	r3, r3, #8
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004878:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a14      	ldr	r2, [pc, #80]	; (80048d0 <TIM_OC3_SetConfig+0xd0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d113      	bne.n	80048aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	621a      	str	r2, [r3, #32]
}
 80048c4:	bf00      	nop
 80048c6:	371c      	adds	r7, #28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bc80      	pop	{r7}
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40012c00 	.word	0x40012c00

080048d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800490a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	021b      	lsls	r3, r3, #8
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800491e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	031b      	lsls	r3, r3, #12
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a0f      	ldr	r2, [pc, #60]	; (800496c <TIM_OC4_SetConfig+0x98>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d109      	bne.n	8004948 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800493a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	019b      	lsls	r3, r3, #6
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	4313      	orrs	r3, r2
 8004946:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	621a      	str	r2, [r3, #32]
}
 8004962:	bf00      	nop
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr
 800496c:	40012c00 	.word	0x40012c00

08004970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f023 0201 	bic.w	r2, r3, #1
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800499a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f023 030a 	bic.w	r3, r3, #10
 80049ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	621a      	str	r2, [r3, #32]
}
 80049c2:	bf00      	nop
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr

080049cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	f023 0210 	bic.w	r2, r3, #16
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	031b      	lsls	r3, r3, #12
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	621a      	str	r2, [r3, #32]
}
 8004a20:	bf00      	nop
 8004a22:	371c      	adds	r7, #28
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bc80      	pop	{r7}
 8004a28:	4770      	bx	lr

08004a2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b085      	sub	sp, #20
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f043 0307 	orr.w	r3, r3, #7
 8004a4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	609a      	str	r2, [r3, #8]
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc80      	pop	{r7}
 8004a5c:	4770      	bx	lr

08004a5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b087      	sub	sp, #28
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]
 8004a6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	021a      	lsls	r2, r3, #8
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	431a      	orrs	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	609a      	str	r2, [r3, #8]
}
 8004a92:	bf00      	nop
 8004a94:	371c      	adds	r7, #28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f003 031f 	and.w	r3, r3, #31
 8004aae:	2201      	movs	r2, #1
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a1a      	ldr	r2, [r3, #32]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	43db      	mvns	r3, r3
 8004abe:	401a      	ands	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a1a      	ldr	r2, [r3, #32]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f003 031f 	and.w	r3, r3, #31
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	621a      	str	r2, [r3, #32]
}
 8004ada:	bf00      	nop
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e046      	b.n	8004b8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a16      	ldr	r2, [pc, #88]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00e      	beq.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b48:	d009      	beq.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a12      	ldr	r2, [pc, #72]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d004      	beq.n	8004b5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a10      	ldr	r2, [pc, #64]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d10c      	bne.n	8004b78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	40012c00 	.word	0x40012c00
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40000800 	.word	0x40000800

08004ba0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d101      	bne.n	8004bbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e03d      	b.n	8004c38 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bc80      	pop	{r7}
 8004c40:	4770      	bx	lr

08004c42 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr

08004c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bc80      	pop	{r7}
 8004c64:	4770      	bx	lr
	...

08004c68 <__errno>:
 8004c68:	4b01      	ldr	r3, [pc, #4]	; (8004c70 <__errno+0x8>)
 8004c6a:	6818      	ldr	r0, [r3, #0]
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	2000000c 	.word	0x2000000c

08004c74 <__libc_init_array>:
 8004c74:	b570      	push	{r4, r5, r6, lr}
 8004c76:	2500      	movs	r5, #0
 8004c78:	4e0c      	ldr	r6, [pc, #48]	; (8004cac <__libc_init_array+0x38>)
 8004c7a:	4c0d      	ldr	r4, [pc, #52]	; (8004cb0 <__libc_init_array+0x3c>)
 8004c7c:	1ba4      	subs	r4, r4, r6
 8004c7e:	10a4      	asrs	r4, r4, #2
 8004c80:	42a5      	cmp	r5, r4
 8004c82:	d109      	bne.n	8004c98 <__libc_init_array+0x24>
 8004c84:	f001 f84c 	bl	8005d20 <_init>
 8004c88:	2500      	movs	r5, #0
 8004c8a:	4e0a      	ldr	r6, [pc, #40]	; (8004cb4 <__libc_init_array+0x40>)
 8004c8c:	4c0a      	ldr	r4, [pc, #40]	; (8004cb8 <__libc_init_array+0x44>)
 8004c8e:	1ba4      	subs	r4, r4, r6
 8004c90:	10a4      	asrs	r4, r4, #2
 8004c92:	42a5      	cmp	r5, r4
 8004c94:	d105      	bne.n	8004ca2 <__libc_init_array+0x2e>
 8004c96:	bd70      	pop	{r4, r5, r6, pc}
 8004c98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c9c:	4798      	blx	r3
 8004c9e:	3501      	adds	r5, #1
 8004ca0:	e7ee      	b.n	8004c80 <__libc_init_array+0xc>
 8004ca2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ca6:	4798      	blx	r3
 8004ca8:	3501      	adds	r5, #1
 8004caa:	e7f2      	b.n	8004c92 <__libc_init_array+0x1e>
 8004cac:	08005dd0 	.word	0x08005dd0
 8004cb0:	08005dd0 	.word	0x08005dd0
 8004cb4:	08005dd0 	.word	0x08005dd0
 8004cb8:	08005dd4 	.word	0x08005dd4

08004cbc <memset>:
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	4402      	add	r2, r0
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d100      	bne.n	8004cc6 <memset+0xa>
 8004cc4:	4770      	bx	lr
 8004cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cca:	e7f9      	b.n	8004cc0 <memset+0x4>

08004ccc <pow>:
 8004ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd0:	b08f      	sub	sp, #60	; 0x3c
 8004cd2:	461d      	mov	r5, r3
 8004cd4:	4680      	mov	r8, r0
 8004cd6:	4689      	mov	r9, r1
 8004cd8:	4614      	mov	r4, r2
 8004cda:	f000 f955 	bl	8004f88 <__ieee754_pow>
 8004cde:	4fa1      	ldr	r7, [pc, #644]	; (8004f64 <pow+0x298>)
 8004ce0:	e9cd 0100 	strd	r0, r1, [sp]
 8004ce4:	f997 3000 	ldrsb.w	r3, [r7]
 8004ce8:	463e      	mov	r6, r7
 8004cea:	9302      	str	r3, [sp, #8]
 8004cec:	3301      	adds	r3, #1
 8004cee:	d05f      	beq.n	8004db0 <pow+0xe4>
 8004cf0:	4622      	mov	r2, r4
 8004cf2:	462b      	mov	r3, r5
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	f7fb fe80 	bl	80009fc <__aeabi_dcmpun>
 8004cfc:	4682      	mov	sl, r0
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	d156      	bne.n	8004db0 <pow+0xe4>
 8004d02:	4642      	mov	r2, r8
 8004d04:	464b      	mov	r3, r9
 8004d06:	4640      	mov	r0, r8
 8004d08:	4649      	mov	r1, r9
 8004d0a:	f7fb fe77 	bl	80009fc <__aeabi_dcmpun>
 8004d0e:	9003      	str	r0, [sp, #12]
 8004d10:	b1e8      	cbz	r0, 8004d4e <pow+0x82>
 8004d12:	2200      	movs	r2, #0
 8004d14:	2300      	movs	r3, #0
 8004d16:	4620      	mov	r0, r4
 8004d18:	4629      	mov	r1, r5
 8004d1a:	f7fb fe3d 	bl	8000998 <__aeabi_dcmpeq>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d046      	beq.n	8004db0 <pow+0xe4>
 8004d22:	2301      	movs	r3, #1
 8004d24:	2200      	movs	r2, #0
 8004d26:	9304      	str	r3, [sp, #16]
 8004d28:	4b8f      	ldr	r3, [pc, #572]	; (8004f68 <pow+0x29c>)
 8004d2a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004d2e:	9305      	str	r3, [sp, #20]
 8004d30:	4b8e      	ldr	r3, [pc, #568]	; (8004f6c <pow+0x2a0>)
 8004d32:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004d36:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004d3a:	9b02      	ldr	r3, [sp, #8]
 8004d3c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d031      	beq.n	8004da8 <pow+0xdc>
 8004d44:	a804      	add	r0, sp, #16
 8004d46:	f000 fedf 	bl	8005b08 <matherr>
 8004d4a:	bb38      	cbnz	r0, 8004d9c <pow+0xd0>
 8004d4c:	e058      	b.n	8004e00 <pow+0x134>
 8004d4e:	f04f 0a00 	mov.w	sl, #0
 8004d52:	f04f 0b00 	mov.w	fp, #0
 8004d56:	4652      	mov	r2, sl
 8004d58:	465b      	mov	r3, fp
 8004d5a:	4640      	mov	r0, r8
 8004d5c:	4649      	mov	r1, r9
 8004d5e:	f7fb fe1b 	bl	8000998 <__aeabi_dcmpeq>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d051      	beq.n	8004e0a <pow+0x13e>
 8004d66:	4652      	mov	r2, sl
 8004d68:	465b      	mov	r3, fp
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	f7fb fe13 	bl	8000998 <__aeabi_dcmpeq>
 8004d72:	4606      	mov	r6, r0
 8004d74:	b308      	cbz	r0, 8004dba <pow+0xee>
 8004d76:	2301      	movs	r3, #1
 8004d78:	9304      	str	r3, [sp, #16]
 8004d7a:	4b7b      	ldr	r3, [pc, #492]	; (8004f68 <pow+0x29c>)
 8004d7c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004d80:	9305      	str	r3, [sp, #20]
 8004d82:	9b03      	ldr	r3, [sp, #12]
 8004d84:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004d88:	930c      	str	r3, [sp, #48]	; 0x30
 8004d8a:	9b02      	ldr	r3, [sp, #8]
 8004d8c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0d7      	beq.n	8004d44 <pow+0x78>
 8004d94:	2200      	movs	r2, #0
 8004d96:	4b75      	ldr	r3, [pc, #468]	; (8004f6c <pow+0x2a0>)
 8004d98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004d9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d9e:	b11b      	cbz	r3, 8004da8 <pow+0xdc>
 8004da0:	f7ff ff62 	bl	8004c68 <__errno>
 8004da4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004da6:	6003      	str	r3, [r0, #0]
 8004da8:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8004dac:	e9cd 3400 	strd	r3, r4, [sp]
 8004db0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004db4:	b00f      	add	sp, #60	; 0x3c
 8004db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dba:	4620      	mov	r0, r4
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	f000 fe9d 	bl	8005afc <finite>
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	d0f4      	beq.n	8004db0 <pow+0xe4>
 8004dc6:	4652      	mov	r2, sl
 8004dc8:	465b      	mov	r3, fp
 8004dca:	4620      	mov	r0, r4
 8004dcc:	4629      	mov	r1, r5
 8004dce:	f7fb fded 	bl	80009ac <__aeabi_dcmplt>
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	d0ec      	beq.n	8004db0 <pow+0xe4>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	9304      	str	r3, [sp, #16]
 8004dda:	4b63      	ldr	r3, [pc, #396]	; (8004f68 <pow+0x29c>)
 8004ddc:	960c      	str	r6, [sp, #48]	; 0x30
 8004dde:	9305      	str	r3, [sp, #20]
 8004de0:	f997 3000 	ldrsb.w	r3, [r7]
 8004de4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004de8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004dec:	b913      	cbnz	r3, 8004df4 <pow+0x128>
 8004dee:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004df2:	e7a7      	b.n	8004d44 <pow+0x78>
 8004df4:	2000      	movs	r0, #0
 8004df6:	495e      	ldr	r1, [pc, #376]	; (8004f70 <pow+0x2a4>)
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004dfe:	d1a1      	bne.n	8004d44 <pow+0x78>
 8004e00:	f7ff ff32 	bl	8004c68 <__errno>
 8004e04:	2321      	movs	r3, #33	; 0x21
 8004e06:	6003      	str	r3, [r0, #0]
 8004e08:	e7c8      	b.n	8004d9c <pow+0xd0>
 8004e0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e0e:	f000 fe75 	bl	8005afc <finite>
 8004e12:	9002      	str	r0, [sp, #8]
 8004e14:	2800      	cmp	r0, #0
 8004e16:	d177      	bne.n	8004f08 <pow+0x23c>
 8004e18:	4640      	mov	r0, r8
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	f000 fe6e 	bl	8005afc <finite>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d071      	beq.n	8004f08 <pow+0x23c>
 8004e24:	4620      	mov	r0, r4
 8004e26:	4629      	mov	r1, r5
 8004e28:	f000 fe68 	bl	8005afc <finite>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d06b      	beq.n	8004f08 <pow+0x23c>
 8004e30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e34:	4619      	mov	r1, r3
 8004e36:	4610      	mov	r0, r2
 8004e38:	f7fb fde0 	bl	80009fc <__aeabi_dcmpun>
 8004e3c:	f997 7000 	ldrsb.w	r7, [r7]
 8004e40:	4b49      	ldr	r3, [pc, #292]	; (8004f68 <pow+0x29c>)
 8004e42:	b1a0      	cbz	r0, 8004e6e <pow+0x1a2>
 8004e44:	2201      	movs	r2, #1
 8004e46:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e4a:	9b02      	ldr	r3, [sp, #8]
 8004e4c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004e50:	930c      	str	r3, [sp, #48]	; 0x30
 8004e52:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004e56:	2f00      	cmp	r7, #0
 8004e58:	d0c9      	beq.n	8004dee <pow+0x122>
 8004e5a:	4652      	mov	r2, sl
 8004e5c:	465b      	mov	r3, fp
 8004e5e:	4650      	mov	r0, sl
 8004e60:	4659      	mov	r1, fp
 8004e62:	f7fb fc5b 	bl	800071c <__aeabi_ddiv>
 8004e66:	2f02      	cmp	r7, #2
 8004e68:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e6c:	e7c7      	b.n	8004dfe <pow+0x132>
 8004e6e:	2203      	movs	r2, #3
 8004e70:	900c      	str	r0, [sp, #48]	; 0x30
 8004e72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e76:	4620      	mov	r0, r4
 8004e78:	4629      	mov	r1, r5
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	4b3d      	ldr	r3, [pc, #244]	; (8004f74 <pow+0x2a8>)
 8004e7e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004e82:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004e86:	f7fb fb1f 	bl	80004c8 <__aeabi_dmul>
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	460d      	mov	r5, r1
 8004e8e:	bb17      	cbnz	r7, 8004ed6 <pow+0x20a>
 8004e90:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004e94:	4b38      	ldr	r3, [pc, #224]	; (8004f78 <pow+0x2ac>)
 8004e96:	4640      	mov	r0, r8
 8004e98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004e9c:	4649      	mov	r1, r9
 8004e9e:	4652      	mov	r2, sl
 8004ea0:	465b      	mov	r3, fp
 8004ea2:	f7fb fd83 	bl	80009ac <__aeabi_dcmplt>
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	d054      	beq.n	8004f54 <pow+0x288>
 8004eaa:	4620      	mov	r0, r4
 8004eac:	4629      	mov	r1, r5
 8004eae:	f000 fe33 	bl	8005b18 <rint>
 8004eb2:	4622      	mov	r2, r4
 8004eb4:	462b      	mov	r3, r5
 8004eb6:	f7fb fd6f 	bl	8000998 <__aeabi_dcmpeq>
 8004eba:	b920      	cbnz	r0, 8004ec6 <pow+0x1fa>
 8004ebc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004ec0:	4b2e      	ldr	r3, [pc, #184]	; (8004f7c <pow+0x2b0>)
 8004ec2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004ec6:	f996 3000 	ldrsb.w	r3, [r6]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d142      	bne.n	8004f54 <pow+0x288>
 8004ece:	f7ff fecb 	bl	8004c68 <__errno>
 8004ed2:	2322      	movs	r3, #34	; 0x22
 8004ed4:	e797      	b.n	8004e06 <pow+0x13a>
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	4b29      	ldr	r3, [pc, #164]	; (8004f80 <pow+0x2b4>)
 8004eda:	4640      	mov	r0, r8
 8004edc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004ee0:	4649      	mov	r1, r9
 8004ee2:	4652      	mov	r2, sl
 8004ee4:	465b      	mov	r3, fp
 8004ee6:	f7fb fd61 	bl	80009ac <__aeabi_dcmplt>
 8004eea:	2800      	cmp	r0, #0
 8004eec:	d0eb      	beq.n	8004ec6 <pow+0x1fa>
 8004eee:	4620      	mov	r0, r4
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	f000 fe11 	bl	8005b18 <rint>
 8004ef6:	4622      	mov	r2, r4
 8004ef8:	462b      	mov	r3, r5
 8004efa:	f7fb fd4d 	bl	8000998 <__aeabi_dcmpeq>
 8004efe:	2800      	cmp	r0, #0
 8004f00:	d1e1      	bne.n	8004ec6 <pow+0x1fa>
 8004f02:	2200      	movs	r2, #0
 8004f04:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <pow+0x2a4>)
 8004f06:	e7dc      	b.n	8004ec2 <pow+0x1f6>
 8004f08:	2200      	movs	r2, #0
 8004f0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f7fb fd42 	bl	8000998 <__aeabi_dcmpeq>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	f43f af4b 	beq.w	8004db0 <pow+0xe4>
 8004f1a:	4640      	mov	r0, r8
 8004f1c:	4649      	mov	r1, r9
 8004f1e:	f000 fded 	bl	8005afc <finite>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	f43f af44 	beq.w	8004db0 <pow+0xe4>
 8004f28:	4620      	mov	r0, r4
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	f000 fde6 	bl	8005afc <finite>
 8004f30:	2800      	cmp	r0, #0
 8004f32:	f43f af3d 	beq.w	8004db0 <pow+0xe4>
 8004f36:	2304      	movs	r3, #4
 8004f38:	9304      	str	r3, [sp, #16]
 8004f3a:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <pow+0x29c>)
 8004f3c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004f40:	9305      	str	r3, [sp, #20]
 8004f42:	2300      	movs	r3, #0
 8004f44:	2400      	movs	r4, #0
 8004f46:	930c      	str	r3, [sp, #48]	; 0x30
 8004f48:	2300      	movs	r3, #0
 8004f4a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004f4e:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8004f52:	e7b8      	b.n	8004ec6 <pow+0x1fa>
 8004f54:	a804      	add	r0, sp, #16
 8004f56:	f000 fdd7 	bl	8005b08 <matherr>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	f47f af1e 	bne.w	8004d9c <pow+0xd0>
 8004f60:	e7b5      	b.n	8004ece <pow+0x202>
 8004f62:	bf00      	nop
 8004f64:	20000070 	.word	0x20000070
 8004f68:	08005d88 	.word	0x08005d88
 8004f6c:	3ff00000 	.word	0x3ff00000
 8004f70:	fff00000 	.word	0xfff00000
 8004f74:	3fe00000 	.word	0x3fe00000
 8004f78:	47efffff 	.word	0x47efffff
 8004f7c:	c7efffff 	.word	0xc7efffff
 8004f80:	7ff00000 	.word	0x7ff00000
 8004f84:	00000000 	.word	0x00000000

08004f88 <__ieee754_pow>:
 8004f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8c:	b091      	sub	sp, #68	; 0x44
 8004f8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f92:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8004f96:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8004f9a:	ea55 0302 	orrs.w	r3, r5, r2
 8004f9e:	4607      	mov	r7, r0
 8004fa0:	4688      	mov	r8, r1
 8004fa2:	f000 84b7 	beq.w	8005914 <__ieee754_pow+0x98c>
 8004fa6:	4b80      	ldr	r3, [pc, #512]	; (80051a8 <__ieee754_pow+0x220>)
 8004fa8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8004fac:	429c      	cmp	r4, r3
 8004fae:	4689      	mov	r9, r1
 8004fb0:	4682      	mov	sl, r0
 8004fb2:	dc09      	bgt.n	8004fc8 <__ieee754_pow+0x40>
 8004fb4:	d103      	bne.n	8004fbe <__ieee754_pow+0x36>
 8004fb6:	b938      	cbnz	r0, 8004fc8 <__ieee754_pow+0x40>
 8004fb8:	42a5      	cmp	r5, r4
 8004fba:	dc0d      	bgt.n	8004fd8 <__ieee754_pow+0x50>
 8004fbc:	e001      	b.n	8004fc2 <__ieee754_pow+0x3a>
 8004fbe:	429d      	cmp	r5, r3
 8004fc0:	dc02      	bgt.n	8004fc8 <__ieee754_pow+0x40>
 8004fc2:	429d      	cmp	r5, r3
 8004fc4:	d10e      	bne.n	8004fe4 <__ieee754_pow+0x5c>
 8004fc6:	b16a      	cbz	r2, 8004fe4 <__ieee754_pow+0x5c>
 8004fc8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004fcc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004fd0:	ea54 030a 	orrs.w	r3, r4, sl
 8004fd4:	f000 849e 	beq.w	8005914 <__ieee754_pow+0x98c>
 8004fd8:	4874      	ldr	r0, [pc, #464]	; (80051ac <__ieee754_pow+0x224>)
 8004fda:	b011      	add	sp, #68	; 0x44
 8004fdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe0:	f000 bd94 	b.w	8005b0c <nan>
 8004fe4:	f1b9 0f00 	cmp.w	r9, #0
 8004fe8:	da53      	bge.n	8005092 <__ieee754_pow+0x10a>
 8004fea:	4b71      	ldr	r3, [pc, #452]	; (80051b0 <__ieee754_pow+0x228>)
 8004fec:	429d      	cmp	r5, r3
 8004fee:	dc4e      	bgt.n	800508e <__ieee754_pow+0x106>
 8004ff0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004ff4:	429d      	cmp	r5, r3
 8004ff6:	dd4c      	ble.n	8005092 <__ieee754_pow+0x10a>
 8004ff8:	152b      	asrs	r3, r5, #20
 8004ffa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004ffe:	2b14      	cmp	r3, #20
 8005000:	dd28      	ble.n	8005054 <__ieee754_pow+0xcc>
 8005002:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005006:	fa22 f103 	lsr.w	r1, r2, r3
 800500a:	fa01 f303 	lsl.w	r3, r1, r3
 800500e:	4293      	cmp	r3, r2
 8005010:	d13f      	bne.n	8005092 <__ieee754_pow+0x10a>
 8005012:	f001 0101 	and.w	r1, r1, #1
 8005016:	f1c1 0302 	rsb	r3, r1, #2
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	2a00      	cmp	r2, #0
 800501e:	d15c      	bne.n	80050da <__ieee754_pow+0x152>
 8005020:	4b61      	ldr	r3, [pc, #388]	; (80051a8 <__ieee754_pow+0x220>)
 8005022:	429d      	cmp	r5, r3
 8005024:	d126      	bne.n	8005074 <__ieee754_pow+0xec>
 8005026:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800502a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800502e:	ea53 030a 	orrs.w	r3, r3, sl
 8005032:	f000 846f 	beq.w	8005914 <__ieee754_pow+0x98c>
 8005036:	4b5f      	ldr	r3, [pc, #380]	; (80051b4 <__ieee754_pow+0x22c>)
 8005038:	429c      	cmp	r4, r3
 800503a:	dd2c      	ble.n	8005096 <__ieee754_pow+0x10e>
 800503c:	2e00      	cmp	r6, #0
 800503e:	f280 846f 	bge.w	8005920 <__ieee754_pow+0x998>
 8005042:	f04f 0b00 	mov.w	fp, #0
 8005046:	f04f 0c00 	mov.w	ip, #0
 800504a:	4658      	mov	r0, fp
 800504c:	4661      	mov	r1, ip
 800504e:	b011      	add	sp, #68	; 0x44
 8005050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005054:	2a00      	cmp	r2, #0
 8005056:	d13e      	bne.n	80050d6 <__ieee754_pow+0x14e>
 8005058:	f1c3 0314 	rsb	r3, r3, #20
 800505c:	fa45 f103 	asr.w	r1, r5, r3
 8005060:	fa01 f303 	lsl.w	r3, r1, r3
 8005064:	42ab      	cmp	r3, r5
 8005066:	f040 8463 	bne.w	8005930 <__ieee754_pow+0x9a8>
 800506a:	f001 0101 	and.w	r1, r1, #1
 800506e:	f1c1 0302 	rsb	r3, r1, #2
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	4b50      	ldr	r3, [pc, #320]	; (80051b8 <__ieee754_pow+0x230>)
 8005076:	429d      	cmp	r5, r3
 8005078:	d114      	bne.n	80050a4 <__ieee754_pow+0x11c>
 800507a:	2e00      	cmp	r6, #0
 800507c:	f280 8454 	bge.w	8005928 <__ieee754_pow+0x9a0>
 8005080:	463a      	mov	r2, r7
 8005082:	4643      	mov	r3, r8
 8005084:	2000      	movs	r0, #0
 8005086:	494c      	ldr	r1, [pc, #304]	; (80051b8 <__ieee754_pow+0x230>)
 8005088:	f7fb fb48 	bl	800071c <__aeabi_ddiv>
 800508c:	e013      	b.n	80050b6 <__ieee754_pow+0x12e>
 800508e:	2302      	movs	r3, #2
 8005090:	e7c3      	b.n	800501a <__ieee754_pow+0x92>
 8005092:	2300      	movs	r3, #0
 8005094:	e7c1      	b.n	800501a <__ieee754_pow+0x92>
 8005096:	2e00      	cmp	r6, #0
 8005098:	dad3      	bge.n	8005042 <__ieee754_pow+0xba>
 800509a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800509e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80050a2:	e7d2      	b.n	800504a <__ieee754_pow+0xc2>
 80050a4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80050a8:	d108      	bne.n	80050bc <__ieee754_pow+0x134>
 80050aa:	463a      	mov	r2, r7
 80050ac:	4643      	mov	r3, r8
 80050ae:	4638      	mov	r0, r7
 80050b0:	4641      	mov	r1, r8
 80050b2:	f7fb fa09 	bl	80004c8 <__aeabi_dmul>
 80050b6:	4683      	mov	fp, r0
 80050b8:	468c      	mov	ip, r1
 80050ba:	e7c6      	b.n	800504a <__ieee754_pow+0xc2>
 80050bc:	4b3f      	ldr	r3, [pc, #252]	; (80051bc <__ieee754_pow+0x234>)
 80050be:	429e      	cmp	r6, r3
 80050c0:	d10b      	bne.n	80050da <__ieee754_pow+0x152>
 80050c2:	f1b9 0f00 	cmp.w	r9, #0
 80050c6:	db08      	blt.n	80050da <__ieee754_pow+0x152>
 80050c8:	4638      	mov	r0, r7
 80050ca:	4641      	mov	r1, r8
 80050cc:	b011      	add	sp, #68	; 0x44
 80050ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d2:	f000 bc63 	b.w	800599c <__ieee754_sqrt>
 80050d6:	2300      	movs	r3, #0
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	4638      	mov	r0, r7
 80050dc:	4641      	mov	r1, r8
 80050de:	f000 fd09 	bl	8005af4 <fabs>
 80050e2:	4683      	mov	fp, r0
 80050e4:	468c      	mov	ip, r1
 80050e6:	f1ba 0f00 	cmp.w	sl, #0
 80050ea:	d12b      	bne.n	8005144 <__ieee754_pow+0x1bc>
 80050ec:	b124      	cbz	r4, 80050f8 <__ieee754_pow+0x170>
 80050ee:	4b32      	ldr	r3, [pc, #200]	; (80051b8 <__ieee754_pow+0x230>)
 80050f0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d125      	bne.n	8005144 <__ieee754_pow+0x1bc>
 80050f8:	2e00      	cmp	r6, #0
 80050fa:	da07      	bge.n	800510c <__ieee754_pow+0x184>
 80050fc:	465a      	mov	r2, fp
 80050fe:	4663      	mov	r3, ip
 8005100:	2000      	movs	r0, #0
 8005102:	492d      	ldr	r1, [pc, #180]	; (80051b8 <__ieee754_pow+0x230>)
 8005104:	f7fb fb0a 	bl	800071c <__aeabi_ddiv>
 8005108:	4683      	mov	fp, r0
 800510a:	468c      	mov	ip, r1
 800510c:	f1b9 0f00 	cmp.w	r9, #0
 8005110:	da9b      	bge.n	800504a <__ieee754_pow+0xc2>
 8005112:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005116:	9b00      	ldr	r3, [sp, #0]
 8005118:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800511c:	4323      	orrs	r3, r4
 800511e:	d108      	bne.n	8005132 <__ieee754_pow+0x1aa>
 8005120:	465a      	mov	r2, fp
 8005122:	4663      	mov	r3, ip
 8005124:	4658      	mov	r0, fp
 8005126:	4661      	mov	r1, ip
 8005128:	f7fb f816 	bl	8000158 <__aeabi_dsub>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	e7aa      	b.n	8005088 <__ieee754_pow+0x100>
 8005132:	9b00      	ldr	r3, [sp, #0]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d188      	bne.n	800504a <__ieee754_pow+0xc2>
 8005138:	4658      	mov	r0, fp
 800513a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800513e:	4683      	mov	fp, r0
 8005140:	469c      	mov	ip, r3
 8005142:	e782      	b.n	800504a <__ieee754_pow+0xc2>
 8005144:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8005148:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800514c:	930d      	str	r3, [sp, #52]	; 0x34
 800514e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005150:	9b00      	ldr	r3, [sp, #0]
 8005152:	4313      	orrs	r3, r2
 8005154:	d104      	bne.n	8005160 <__ieee754_pow+0x1d8>
 8005156:	463a      	mov	r2, r7
 8005158:	4643      	mov	r3, r8
 800515a:	4638      	mov	r0, r7
 800515c:	4641      	mov	r1, r8
 800515e:	e7e3      	b.n	8005128 <__ieee754_pow+0x1a0>
 8005160:	4b17      	ldr	r3, [pc, #92]	; (80051c0 <__ieee754_pow+0x238>)
 8005162:	429d      	cmp	r5, r3
 8005164:	f340 80fe 	ble.w	8005364 <__ieee754_pow+0x3dc>
 8005168:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800516c:	429d      	cmp	r5, r3
 800516e:	dd0b      	ble.n	8005188 <__ieee754_pow+0x200>
 8005170:	4b10      	ldr	r3, [pc, #64]	; (80051b4 <__ieee754_pow+0x22c>)
 8005172:	429c      	cmp	r4, r3
 8005174:	dc0e      	bgt.n	8005194 <__ieee754_pow+0x20c>
 8005176:	2e00      	cmp	r6, #0
 8005178:	f6bf af63 	bge.w	8005042 <__ieee754_pow+0xba>
 800517c:	a308      	add	r3, pc, #32	; (adr r3, 80051a0 <__ieee754_pow+0x218>)
 800517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005182:	4610      	mov	r0, r2
 8005184:	4619      	mov	r1, r3
 8005186:	e794      	b.n	80050b2 <__ieee754_pow+0x12a>
 8005188:	4b0e      	ldr	r3, [pc, #56]	; (80051c4 <__ieee754_pow+0x23c>)
 800518a:	429c      	cmp	r4, r3
 800518c:	ddf3      	ble.n	8005176 <__ieee754_pow+0x1ee>
 800518e:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <__ieee754_pow+0x230>)
 8005190:	429c      	cmp	r4, r3
 8005192:	dd19      	ble.n	80051c8 <__ieee754_pow+0x240>
 8005194:	2e00      	cmp	r6, #0
 8005196:	dcf1      	bgt.n	800517c <__ieee754_pow+0x1f4>
 8005198:	e753      	b.n	8005042 <__ieee754_pow+0xba>
 800519a:	bf00      	nop
 800519c:	f3af 8000 	nop.w
 80051a0:	8800759c 	.word	0x8800759c
 80051a4:	7e37e43c 	.word	0x7e37e43c
 80051a8:	7ff00000 	.word	0x7ff00000
 80051ac:	08005d8b 	.word	0x08005d8b
 80051b0:	433fffff 	.word	0x433fffff
 80051b4:	3fefffff 	.word	0x3fefffff
 80051b8:	3ff00000 	.word	0x3ff00000
 80051bc:	3fe00000 	.word	0x3fe00000
 80051c0:	41e00000 	.word	0x41e00000
 80051c4:	3feffffe 	.word	0x3feffffe
 80051c8:	4661      	mov	r1, ip
 80051ca:	2200      	movs	r2, #0
 80051cc:	4b60      	ldr	r3, [pc, #384]	; (8005350 <__ieee754_pow+0x3c8>)
 80051ce:	4658      	mov	r0, fp
 80051d0:	f7fa ffc2 	bl	8000158 <__aeabi_dsub>
 80051d4:	a354      	add	r3, pc, #336	; (adr r3, 8005328 <__ieee754_pow+0x3a0>)
 80051d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051da:	4604      	mov	r4, r0
 80051dc:	460d      	mov	r5, r1
 80051de:	f7fb f973 	bl	80004c8 <__aeabi_dmul>
 80051e2:	a353      	add	r3, pc, #332	; (adr r3, 8005330 <__ieee754_pow+0x3a8>)
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	4606      	mov	r6, r0
 80051ea:	460f      	mov	r7, r1
 80051ec:	4620      	mov	r0, r4
 80051ee:	4629      	mov	r1, r5
 80051f0:	f7fb f96a 	bl	80004c8 <__aeabi_dmul>
 80051f4:	2200      	movs	r2, #0
 80051f6:	4682      	mov	sl, r0
 80051f8:	468b      	mov	fp, r1
 80051fa:	4b56      	ldr	r3, [pc, #344]	; (8005354 <__ieee754_pow+0x3cc>)
 80051fc:	4620      	mov	r0, r4
 80051fe:	4629      	mov	r1, r5
 8005200:	f7fb f962 	bl	80004c8 <__aeabi_dmul>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	a14b      	add	r1, pc, #300	; (adr r1, 8005338 <__ieee754_pow+0x3b0>)
 800520a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800520e:	f7fa ffa3 	bl	8000158 <__aeabi_dsub>
 8005212:	4622      	mov	r2, r4
 8005214:	462b      	mov	r3, r5
 8005216:	f7fb f957 	bl	80004c8 <__aeabi_dmul>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	2000      	movs	r0, #0
 8005220:	494d      	ldr	r1, [pc, #308]	; (8005358 <__ieee754_pow+0x3d0>)
 8005222:	f7fa ff99 	bl	8000158 <__aeabi_dsub>
 8005226:	4622      	mov	r2, r4
 8005228:	462b      	mov	r3, r5
 800522a:	4680      	mov	r8, r0
 800522c:	4689      	mov	r9, r1
 800522e:	4620      	mov	r0, r4
 8005230:	4629      	mov	r1, r5
 8005232:	f7fb f949 	bl	80004c8 <__aeabi_dmul>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4640      	mov	r0, r8
 800523c:	4649      	mov	r1, r9
 800523e:	f7fb f943 	bl	80004c8 <__aeabi_dmul>
 8005242:	a33f      	add	r3, pc, #252	; (adr r3, 8005340 <__ieee754_pow+0x3b8>)
 8005244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005248:	f7fb f93e 	bl	80004c8 <__aeabi_dmul>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4650      	mov	r0, sl
 8005252:	4659      	mov	r1, fp
 8005254:	f7fa ff80 	bl	8000158 <__aeabi_dsub>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4604      	mov	r4, r0
 800525e:	460d      	mov	r5, r1
 8005260:	4630      	mov	r0, r6
 8005262:	4639      	mov	r1, r7
 8005264:	f7fa ff7a 	bl	800015c <__adddf3>
 8005268:	2000      	movs	r0, #0
 800526a:	468b      	mov	fp, r1
 800526c:	4682      	mov	sl, r0
 800526e:	4632      	mov	r2, r6
 8005270:	463b      	mov	r3, r7
 8005272:	f7fa ff71 	bl	8000158 <__aeabi_dsub>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4620      	mov	r0, r4
 800527c:	4629      	mov	r1, r5
 800527e:	f7fa ff6b 	bl	8000158 <__aeabi_dsub>
 8005282:	9b00      	ldr	r3, [sp, #0]
 8005284:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005286:	3b01      	subs	r3, #1
 8005288:	4313      	orrs	r3, r2
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	bf0c      	ite	eq
 8005290:	4c32      	ldreq	r4, [pc, #200]	; (800535c <__ieee754_pow+0x3d4>)
 8005292:	4c2f      	ldrne	r4, [pc, #188]	; (8005350 <__ieee754_pow+0x3c8>)
 8005294:	4606      	mov	r6, r0
 8005296:	e9cd 3400 	strd	r3, r4, [sp]
 800529a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800529e:	2400      	movs	r4, #0
 80052a0:	460f      	mov	r7, r1
 80052a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052a6:	4622      	mov	r2, r4
 80052a8:	462b      	mov	r3, r5
 80052aa:	f7fa ff55 	bl	8000158 <__aeabi_dsub>
 80052ae:	4652      	mov	r2, sl
 80052b0:	465b      	mov	r3, fp
 80052b2:	f7fb f909 	bl	80004c8 <__aeabi_dmul>
 80052b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052ba:	4680      	mov	r8, r0
 80052bc:	4689      	mov	r9, r1
 80052be:	4630      	mov	r0, r6
 80052c0:	4639      	mov	r1, r7
 80052c2:	f7fb f901 	bl	80004c8 <__aeabi_dmul>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4640      	mov	r0, r8
 80052cc:	4649      	mov	r1, r9
 80052ce:	f7fa ff45 	bl	800015c <__adddf3>
 80052d2:	4622      	mov	r2, r4
 80052d4:	462b      	mov	r3, r5
 80052d6:	4680      	mov	r8, r0
 80052d8:	4689      	mov	r9, r1
 80052da:	4650      	mov	r0, sl
 80052dc:	4659      	mov	r1, fp
 80052de:	f7fb f8f3 	bl	80004c8 <__aeabi_dmul>
 80052e2:	4604      	mov	r4, r0
 80052e4:	460d      	mov	r5, r1
 80052e6:	460b      	mov	r3, r1
 80052e8:	4602      	mov	r2, r0
 80052ea:	4649      	mov	r1, r9
 80052ec:	4640      	mov	r0, r8
 80052ee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80052f2:	f7fa ff33 	bl	800015c <__adddf3>
 80052f6:	4b1a      	ldr	r3, [pc, #104]	; (8005360 <__ieee754_pow+0x3d8>)
 80052f8:	4682      	mov	sl, r0
 80052fa:	4299      	cmp	r1, r3
 80052fc:	460f      	mov	r7, r1
 80052fe:	460e      	mov	r6, r1
 8005300:	f340 82e1 	ble.w	80058c6 <__ieee754_pow+0x93e>
 8005304:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005308:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800530c:	4303      	orrs	r3, r0
 800530e:	f000 81db 	beq.w	80056c8 <__ieee754_pow+0x740>
 8005312:	a30d      	add	r3, pc, #52	; (adr r3, 8005348 <__ieee754_pow+0x3c0>)
 8005314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005318:	e9dd 0100 	ldrd	r0, r1, [sp]
 800531c:	f7fb f8d4 	bl	80004c8 <__aeabi_dmul>
 8005320:	a309      	add	r3, pc, #36	; (adr r3, 8005348 <__ieee754_pow+0x3c0>)
 8005322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005326:	e6c4      	b.n	80050b2 <__ieee754_pow+0x12a>
 8005328:	60000000 	.word	0x60000000
 800532c:	3ff71547 	.word	0x3ff71547
 8005330:	f85ddf44 	.word	0xf85ddf44
 8005334:	3e54ae0b 	.word	0x3e54ae0b
 8005338:	55555555 	.word	0x55555555
 800533c:	3fd55555 	.word	0x3fd55555
 8005340:	652b82fe 	.word	0x652b82fe
 8005344:	3ff71547 	.word	0x3ff71547
 8005348:	8800759c 	.word	0x8800759c
 800534c:	7e37e43c 	.word	0x7e37e43c
 8005350:	3ff00000 	.word	0x3ff00000
 8005354:	3fd00000 	.word	0x3fd00000
 8005358:	3fe00000 	.word	0x3fe00000
 800535c:	bff00000 	.word	0xbff00000
 8005360:	408fffff 	.word	0x408fffff
 8005364:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	da08      	bge.n	8005380 <__ieee754_pow+0x3f8>
 800536e:	4658      	mov	r0, fp
 8005370:	4bcd      	ldr	r3, [pc, #820]	; (80056a8 <__ieee754_pow+0x720>)
 8005372:	4661      	mov	r1, ip
 8005374:	f7fb f8a8 	bl	80004c8 <__aeabi_dmul>
 8005378:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800537c:	4683      	mov	fp, r0
 800537e:	460c      	mov	r4, r1
 8005380:	1523      	asrs	r3, r4, #20
 8005382:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005386:	4413      	add	r3, r2
 8005388:	930c      	str	r3, [sp, #48]	; 0x30
 800538a:	4bc8      	ldr	r3, [pc, #800]	; (80056ac <__ieee754_pow+0x724>)
 800538c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005390:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005394:	429c      	cmp	r4, r3
 8005396:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800539a:	dd08      	ble.n	80053ae <__ieee754_pow+0x426>
 800539c:	4bc4      	ldr	r3, [pc, #784]	; (80056b0 <__ieee754_pow+0x728>)
 800539e:	429c      	cmp	r4, r3
 80053a0:	f340 815b 	ble.w	800565a <__ieee754_pow+0x6d2>
 80053a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80053aa:	3301      	adds	r3, #1
 80053ac:	930c      	str	r3, [sp, #48]	; 0x30
 80053ae:	f04f 0800 	mov.w	r8, #0
 80053b2:	4658      	mov	r0, fp
 80053b4:	4629      	mov	r1, r5
 80053b6:	4bbf      	ldr	r3, [pc, #764]	; (80056b4 <__ieee754_pow+0x72c>)
 80053b8:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80053bc:	444b      	add	r3, r9
 80053be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80053c2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80053c6:	461a      	mov	r2, r3
 80053c8:	4623      	mov	r3, r4
 80053ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80053ce:	f7fa fec3 	bl	8000158 <__aeabi_dsub>
 80053d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80053d6:	4606      	mov	r6, r0
 80053d8:	460f      	mov	r7, r1
 80053da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80053de:	f7fa febd 	bl	800015c <__adddf3>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	2000      	movs	r0, #0
 80053e8:	49b3      	ldr	r1, [pc, #716]	; (80056b8 <__ieee754_pow+0x730>)
 80053ea:	f7fb f997 	bl	800071c <__aeabi_ddiv>
 80053ee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4630      	mov	r0, r6
 80053f8:	4639      	mov	r1, r7
 80053fa:	f7fb f865 	bl	80004c8 <__aeabi_dmul>
 80053fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005402:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8005406:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800540a:	2300      	movs	r3, #0
 800540c:	2200      	movs	r2, #0
 800540e:	106d      	asrs	r5, r5, #1
 8005410:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005414:	9304      	str	r3, [sp, #16]
 8005416:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800541a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800541e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8005422:	4650      	mov	r0, sl
 8005424:	4659      	mov	r1, fp
 8005426:	4614      	mov	r4, r2
 8005428:	461d      	mov	r5, r3
 800542a:	f7fb f84d 	bl	80004c8 <__aeabi_dmul>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	4630      	mov	r0, r6
 8005434:	4639      	mov	r1, r7
 8005436:	f7fa fe8f 	bl	8000158 <__aeabi_dsub>
 800543a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800543e:	4606      	mov	r6, r0
 8005440:	460f      	mov	r7, r1
 8005442:	4620      	mov	r0, r4
 8005444:	4629      	mov	r1, r5
 8005446:	f7fa fe87 	bl	8000158 <__aeabi_dsub>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005452:	f7fa fe81 	bl	8000158 <__aeabi_dsub>
 8005456:	4652      	mov	r2, sl
 8005458:	465b      	mov	r3, fp
 800545a:	f7fb f835 	bl	80004c8 <__aeabi_dmul>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4630      	mov	r0, r6
 8005464:	4639      	mov	r1, r7
 8005466:	f7fa fe77 	bl	8000158 <__aeabi_dsub>
 800546a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800546e:	f7fb f82b 	bl	80004c8 <__aeabi_dmul>
 8005472:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005476:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800547a:	4610      	mov	r0, r2
 800547c:	4619      	mov	r1, r3
 800547e:	f7fb f823 	bl	80004c8 <__aeabi_dmul>
 8005482:	a377      	add	r3, pc, #476	; (adr r3, 8005660 <__ieee754_pow+0x6d8>)
 8005484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005488:	4604      	mov	r4, r0
 800548a:	460d      	mov	r5, r1
 800548c:	f7fb f81c 	bl	80004c8 <__aeabi_dmul>
 8005490:	a375      	add	r3, pc, #468	; (adr r3, 8005668 <__ieee754_pow+0x6e0>)
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	f7fa fe61 	bl	800015c <__adddf3>
 800549a:	4622      	mov	r2, r4
 800549c:	462b      	mov	r3, r5
 800549e:	f7fb f813 	bl	80004c8 <__aeabi_dmul>
 80054a2:	a373      	add	r3, pc, #460	; (adr r3, 8005670 <__ieee754_pow+0x6e8>)
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	f7fa fe58 	bl	800015c <__adddf3>
 80054ac:	4622      	mov	r2, r4
 80054ae:	462b      	mov	r3, r5
 80054b0:	f7fb f80a 	bl	80004c8 <__aeabi_dmul>
 80054b4:	a370      	add	r3, pc, #448	; (adr r3, 8005678 <__ieee754_pow+0x6f0>)
 80054b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ba:	f7fa fe4f 	bl	800015c <__adddf3>
 80054be:	4622      	mov	r2, r4
 80054c0:	462b      	mov	r3, r5
 80054c2:	f7fb f801 	bl	80004c8 <__aeabi_dmul>
 80054c6:	a36e      	add	r3, pc, #440	; (adr r3, 8005680 <__ieee754_pow+0x6f8>)
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	f7fa fe46 	bl	800015c <__adddf3>
 80054d0:	4622      	mov	r2, r4
 80054d2:	462b      	mov	r3, r5
 80054d4:	f7fa fff8 	bl	80004c8 <__aeabi_dmul>
 80054d8:	a36b      	add	r3, pc, #428	; (adr r3, 8005688 <__ieee754_pow+0x700>)
 80054da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054de:	f7fa fe3d 	bl	800015c <__adddf3>
 80054e2:	4622      	mov	r2, r4
 80054e4:	4606      	mov	r6, r0
 80054e6:	460f      	mov	r7, r1
 80054e8:	462b      	mov	r3, r5
 80054ea:	4620      	mov	r0, r4
 80054ec:	4629      	mov	r1, r5
 80054ee:	f7fa ffeb 	bl	80004c8 <__aeabi_dmul>
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	4630      	mov	r0, r6
 80054f8:	4639      	mov	r1, r7
 80054fa:	f7fa ffe5 	bl	80004c8 <__aeabi_dmul>
 80054fe:	4604      	mov	r4, r0
 8005500:	460d      	mov	r5, r1
 8005502:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005506:	4652      	mov	r2, sl
 8005508:	465b      	mov	r3, fp
 800550a:	f7fa fe27 	bl	800015c <__adddf3>
 800550e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005512:	f7fa ffd9 	bl	80004c8 <__aeabi_dmul>
 8005516:	4622      	mov	r2, r4
 8005518:	462b      	mov	r3, r5
 800551a:	f7fa fe1f 	bl	800015c <__adddf3>
 800551e:	4652      	mov	r2, sl
 8005520:	4606      	mov	r6, r0
 8005522:	460f      	mov	r7, r1
 8005524:	465b      	mov	r3, fp
 8005526:	4650      	mov	r0, sl
 8005528:	4659      	mov	r1, fp
 800552a:	f7fa ffcd 	bl	80004c8 <__aeabi_dmul>
 800552e:	2200      	movs	r2, #0
 8005530:	4b62      	ldr	r3, [pc, #392]	; (80056bc <__ieee754_pow+0x734>)
 8005532:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005536:	f7fa fe11 	bl	800015c <__adddf3>
 800553a:	4632      	mov	r2, r6
 800553c:	463b      	mov	r3, r7
 800553e:	f7fa fe0d 	bl	800015c <__adddf3>
 8005542:	9804      	ldr	r0, [sp, #16]
 8005544:	460d      	mov	r5, r1
 8005546:	4604      	mov	r4, r0
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4650      	mov	r0, sl
 800554e:	4659      	mov	r1, fp
 8005550:	f7fa ffba 	bl	80004c8 <__aeabi_dmul>
 8005554:	2200      	movs	r2, #0
 8005556:	4682      	mov	sl, r0
 8005558:	468b      	mov	fp, r1
 800555a:	4b58      	ldr	r3, [pc, #352]	; (80056bc <__ieee754_pow+0x734>)
 800555c:	4620      	mov	r0, r4
 800555e:	4629      	mov	r1, r5
 8005560:	f7fa fdfa 	bl	8000158 <__aeabi_dsub>
 8005564:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005568:	f7fa fdf6 	bl	8000158 <__aeabi_dsub>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4630      	mov	r0, r6
 8005572:	4639      	mov	r1, r7
 8005574:	f7fa fdf0 	bl	8000158 <__aeabi_dsub>
 8005578:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800557c:	f7fa ffa4 	bl	80004c8 <__aeabi_dmul>
 8005580:	4622      	mov	r2, r4
 8005582:	4606      	mov	r6, r0
 8005584:	460f      	mov	r7, r1
 8005586:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800558a:	462b      	mov	r3, r5
 800558c:	f7fa ff9c 	bl	80004c8 <__aeabi_dmul>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4630      	mov	r0, r6
 8005596:	4639      	mov	r1, r7
 8005598:	f7fa fde0 	bl	800015c <__adddf3>
 800559c:	4606      	mov	r6, r0
 800559e:	460f      	mov	r7, r1
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4650      	mov	r0, sl
 80055a6:	4659      	mov	r1, fp
 80055a8:	f7fa fdd8 	bl	800015c <__adddf3>
 80055ac:	a338      	add	r3, pc, #224	; (adr r3, 8005690 <__ieee754_pow+0x708>)
 80055ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b2:	9804      	ldr	r0, [sp, #16]
 80055b4:	460d      	mov	r5, r1
 80055b6:	4604      	mov	r4, r0
 80055b8:	f7fa ff86 	bl	80004c8 <__aeabi_dmul>
 80055bc:	4652      	mov	r2, sl
 80055be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80055c2:	465b      	mov	r3, fp
 80055c4:	4620      	mov	r0, r4
 80055c6:	4629      	mov	r1, r5
 80055c8:	f7fa fdc6 	bl	8000158 <__aeabi_dsub>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	4630      	mov	r0, r6
 80055d2:	4639      	mov	r1, r7
 80055d4:	f7fa fdc0 	bl	8000158 <__aeabi_dsub>
 80055d8:	a32f      	add	r3, pc, #188	; (adr r3, 8005698 <__ieee754_pow+0x710>)
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	f7fa ff73 	bl	80004c8 <__aeabi_dmul>
 80055e2:	a32f      	add	r3, pc, #188	; (adr r3, 80056a0 <__ieee754_pow+0x718>)
 80055e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e8:	4606      	mov	r6, r0
 80055ea:	460f      	mov	r7, r1
 80055ec:	4620      	mov	r0, r4
 80055ee:	4629      	mov	r1, r5
 80055f0:	f7fa ff6a 	bl	80004c8 <__aeabi_dmul>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4630      	mov	r0, r6
 80055fa:	4639      	mov	r1, r7
 80055fc:	f7fa fdae 	bl	800015c <__adddf3>
 8005600:	4b2f      	ldr	r3, [pc, #188]	; (80056c0 <__ieee754_pow+0x738>)
 8005602:	444b      	add	r3, r9
 8005604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005608:	f7fa fda8 	bl	800015c <__adddf3>
 800560c:	4604      	mov	r4, r0
 800560e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005610:	460d      	mov	r5, r1
 8005612:	f7fa feef 	bl	80003f4 <__aeabi_i2d>
 8005616:	4606      	mov	r6, r0
 8005618:	460f      	mov	r7, r1
 800561a:	4b2a      	ldr	r3, [pc, #168]	; (80056c4 <__ieee754_pow+0x73c>)
 800561c:	4622      	mov	r2, r4
 800561e:	444b      	add	r3, r9
 8005620:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005624:	462b      	mov	r3, r5
 8005626:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800562a:	f7fa fd97 	bl	800015c <__adddf3>
 800562e:	4642      	mov	r2, r8
 8005630:	464b      	mov	r3, r9
 8005632:	f7fa fd93 	bl	800015c <__adddf3>
 8005636:	4632      	mov	r2, r6
 8005638:	463b      	mov	r3, r7
 800563a:	f7fa fd8f 	bl	800015c <__adddf3>
 800563e:	9804      	ldr	r0, [sp, #16]
 8005640:	4632      	mov	r2, r6
 8005642:	463b      	mov	r3, r7
 8005644:	4682      	mov	sl, r0
 8005646:	468b      	mov	fp, r1
 8005648:	f7fa fd86 	bl	8000158 <__aeabi_dsub>
 800564c:	4642      	mov	r2, r8
 800564e:	464b      	mov	r3, r9
 8005650:	f7fa fd82 	bl	8000158 <__aeabi_dsub>
 8005654:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005658:	e60b      	b.n	8005272 <__ieee754_pow+0x2ea>
 800565a:	f04f 0801 	mov.w	r8, #1
 800565e:	e6a8      	b.n	80053b2 <__ieee754_pow+0x42a>
 8005660:	4a454eef 	.word	0x4a454eef
 8005664:	3fca7e28 	.word	0x3fca7e28
 8005668:	93c9db65 	.word	0x93c9db65
 800566c:	3fcd864a 	.word	0x3fcd864a
 8005670:	a91d4101 	.word	0xa91d4101
 8005674:	3fd17460 	.word	0x3fd17460
 8005678:	518f264d 	.word	0x518f264d
 800567c:	3fd55555 	.word	0x3fd55555
 8005680:	db6fabff 	.word	0xdb6fabff
 8005684:	3fdb6db6 	.word	0x3fdb6db6
 8005688:	33333303 	.word	0x33333303
 800568c:	3fe33333 	.word	0x3fe33333
 8005690:	e0000000 	.word	0xe0000000
 8005694:	3feec709 	.word	0x3feec709
 8005698:	dc3a03fd 	.word	0xdc3a03fd
 800569c:	3feec709 	.word	0x3feec709
 80056a0:	145b01f5 	.word	0x145b01f5
 80056a4:	be3e2fe0 	.word	0xbe3e2fe0
 80056a8:	43400000 	.word	0x43400000
 80056ac:	0003988e 	.word	0x0003988e
 80056b0:	000bb679 	.word	0x000bb679
 80056b4:	08005d90 	.word	0x08005d90
 80056b8:	3ff00000 	.word	0x3ff00000
 80056bc:	40080000 	.word	0x40080000
 80056c0:	08005db0 	.word	0x08005db0
 80056c4:	08005da0 	.word	0x08005da0
 80056c8:	a39b      	add	r3, pc, #620	; (adr r3, 8005938 <__ieee754_pow+0x9b0>)
 80056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ce:	4640      	mov	r0, r8
 80056d0:	4649      	mov	r1, r9
 80056d2:	f7fa fd43 	bl	800015c <__adddf3>
 80056d6:	4622      	mov	r2, r4
 80056d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056dc:	462b      	mov	r3, r5
 80056de:	4650      	mov	r0, sl
 80056e0:	4639      	mov	r1, r7
 80056e2:	f7fa fd39 	bl	8000158 <__aeabi_dsub>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056ee:	f7fb f97b 	bl	80009e8 <__aeabi_dcmpgt>
 80056f2:	2800      	cmp	r0, #0
 80056f4:	f47f ae0d 	bne.w	8005312 <__ieee754_pow+0x38a>
 80056f8:	4aa3      	ldr	r2, [pc, #652]	; (8005988 <__ieee754_pow+0xa00>)
 80056fa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80056fe:	4293      	cmp	r3, r2
 8005700:	f340 8103 	ble.w	800590a <__ieee754_pow+0x982>
 8005704:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005708:	2000      	movs	r0, #0
 800570a:	151b      	asrs	r3, r3, #20
 800570c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005710:	fa4a f303 	asr.w	r3, sl, r3
 8005714:	4433      	add	r3, r6
 8005716:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800571a:	4f9c      	ldr	r7, [pc, #624]	; (800598c <__ieee754_pow+0xa04>)
 800571c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005720:	4117      	asrs	r7, r2
 8005722:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005726:	ea23 0107 	bic.w	r1, r3, r7
 800572a:	f1c2 0214 	rsb	r2, r2, #20
 800572e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005732:	fa4a fa02 	asr.w	sl, sl, r2
 8005736:	2e00      	cmp	r6, #0
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	4620      	mov	r0, r4
 800573e:	4629      	mov	r1, r5
 8005740:	bfb8      	it	lt
 8005742:	f1ca 0a00 	rsblt	sl, sl, #0
 8005746:	f7fa fd07 	bl	8000158 <__aeabi_dsub>
 800574a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800574e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005752:	4642      	mov	r2, r8
 8005754:	464b      	mov	r3, r9
 8005756:	f7fa fd01 	bl	800015c <__adddf3>
 800575a:	a379      	add	r3, pc, #484	; (adr r3, 8005940 <__ieee754_pow+0x9b8>)
 800575c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005760:	2000      	movs	r0, #0
 8005762:	460d      	mov	r5, r1
 8005764:	4604      	mov	r4, r0
 8005766:	f7fa feaf 	bl	80004c8 <__aeabi_dmul>
 800576a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800576e:	4606      	mov	r6, r0
 8005770:	460f      	mov	r7, r1
 8005772:	4620      	mov	r0, r4
 8005774:	4629      	mov	r1, r5
 8005776:	f7fa fcef 	bl	8000158 <__aeabi_dsub>
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	4640      	mov	r0, r8
 8005780:	4649      	mov	r1, r9
 8005782:	f7fa fce9 	bl	8000158 <__aeabi_dsub>
 8005786:	a370      	add	r3, pc, #448	; (adr r3, 8005948 <__ieee754_pow+0x9c0>)
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	f7fa fe9c 	bl	80004c8 <__aeabi_dmul>
 8005790:	a36f      	add	r3, pc, #444	; (adr r3, 8005950 <__ieee754_pow+0x9c8>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	4680      	mov	r8, r0
 8005798:	4689      	mov	r9, r1
 800579a:	4620      	mov	r0, r4
 800579c:	4629      	mov	r1, r5
 800579e:	f7fa fe93 	bl	80004c8 <__aeabi_dmul>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4640      	mov	r0, r8
 80057a8:	4649      	mov	r1, r9
 80057aa:	f7fa fcd7 	bl	800015c <__adddf3>
 80057ae:	4604      	mov	r4, r0
 80057b0:	460d      	mov	r5, r1
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4630      	mov	r0, r6
 80057b8:	4639      	mov	r1, r7
 80057ba:	f7fa fccf 	bl	800015c <__adddf3>
 80057be:	4632      	mov	r2, r6
 80057c0:	463b      	mov	r3, r7
 80057c2:	4680      	mov	r8, r0
 80057c4:	4689      	mov	r9, r1
 80057c6:	f7fa fcc7 	bl	8000158 <__aeabi_dsub>
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	4620      	mov	r0, r4
 80057d0:	4629      	mov	r1, r5
 80057d2:	f7fa fcc1 	bl	8000158 <__aeabi_dsub>
 80057d6:	4642      	mov	r2, r8
 80057d8:	4606      	mov	r6, r0
 80057da:	460f      	mov	r7, r1
 80057dc:	464b      	mov	r3, r9
 80057de:	4640      	mov	r0, r8
 80057e0:	4649      	mov	r1, r9
 80057e2:	f7fa fe71 	bl	80004c8 <__aeabi_dmul>
 80057e6:	a35c      	add	r3, pc, #368	; (adr r3, 8005958 <__ieee754_pow+0x9d0>)
 80057e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ec:	4604      	mov	r4, r0
 80057ee:	460d      	mov	r5, r1
 80057f0:	f7fa fe6a 	bl	80004c8 <__aeabi_dmul>
 80057f4:	a35a      	add	r3, pc, #360	; (adr r3, 8005960 <__ieee754_pow+0x9d8>)
 80057f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fa:	f7fa fcad 	bl	8000158 <__aeabi_dsub>
 80057fe:	4622      	mov	r2, r4
 8005800:	462b      	mov	r3, r5
 8005802:	f7fa fe61 	bl	80004c8 <__aeabi_dmul>
 8005806:	a358      	add	r3, pc, #352	; (adr r3, 8005968 <__ieee754_pow+0x9e0>)
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	f7fa fca6 	bl	800015c <__adddf3>
 8005810:	4622      	mov	r2, r4
 8005812:	462b      	mov	r3, r5
 8005814:	f7fa fe58 	bl	80004c8 <__aeabi_dmul>
 8005818:	a355      	add	r3, pc, #340	; (adr r3, 8005970 <__ieee754_pow+0x9e8>)
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	f7fa fc9b 	bl	8000158 <__aeabi_dsub>
 8005822:	4622      	mov	r2, r4
 8005824:	462b      	mov	r3, r5
 8005826:	f7fa fe4f 	bl	80004c8 <__aeabi_dmul>
 800582a:	a353      	add	r3, pc, #332	; (adr r3, 8005978 <__ieee754_pow+0x9f0>)
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f7fa fc94 	bl	800015c <__adddf3>
 8005834:	4622      	mov	r2, r4
 8005836:	462b      	mov	r3, r5
 8005838:	f7fa fe46 	bl	80004c8 <__aeabi_dmul>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4640      	mov	r0, r8
 8005842:	4649      	mov	r1, r9
 8005844:	f7fa fc88 	bl	8000158 <__aeabi_dsub>
 8005848:	4604      	mov	r4, r0
 800584a:	460d      	mov	r5, r1
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4640      	mov	r0, r8
 8005852:	4649      	mov	r1, r9
 8005854:	f7fa fe38 	bl	80004c8 <__aeabi_dmul>
 8005858:	2200      	movs	r2, #0
 800585a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800585e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005862:	4620      	mov	r0, r4
 8005864:	4629      	mov	r1, r5
 8005866:	f7fa fc77 	bl	8000158 <__aeabi_dsub>
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005872:	f7fa ff53 	bl	800071c <__aeabi_ddiv>
 8005876:	4632      	mov	r2, r6
 8005878:	4604      	mov	r4, r0
 800587a:	460d      	mov	r5, r1
 800587c:	463b      	mov	r3, r7
 800587e:	4640      	mov	r0, r8
 8005880:	4649      	mov	r1, r9
 8005882:	f7fa fe21 	bl	80004c8 <__aeabi_dmul>
 8005886:	4632      	mov	r2, r6
 8005888:	463b      	mov	r3, r7
 800588a:	f7fa fc67 	bl	800015c <__adddf3>
 800588e:	4602      	mov	r2, r0
 8005890:	460b      	mov	r3, r1
 8005892:	4620      	mov	r0, r4
 8005894:	4629      	mov	r1, r5
 8005896:	f7fa fc5f 	bl	8000158 <__aeabi_dsub>
 800589a:	4642      	mov	r2, r8
 800589c:	464b      	mov	r3, r9
 800589e:	f7fa fc5b 	bl	8000158 <__aeabi_dsub>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	2000      	movs	r0, #0
 80058a8:	4939      	ldr	r1, [pc, #228]	; (8005990 <__ieee754_pow+0xa08>)
 80058aa:	f7fa fc55 	bl	8000158 <__aeabi_dsub>
 80058ae:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80058b2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80058b6:	da2b      	bge.n	8005910 <__ieee754_pow+0x988>
 80058b8:	4652      	mov	r2, sl
 80058ba:	f000 f9b9 	bl	8005c30 <scalbn>
 80058be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058c2:	f7ff bbf6 	b.w	80050b2 <__ieee754_pow+0x12a>
 80058c6:	4b33      	ldr	r3, [pc, #204]	; (8005994 <__ieee754_pow+0xa0c>)
 80058c8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80058cc:	429f      	cmp	r7, r3
 80058ce:	f77f af13 	ble.w	80056f8 <__ieee754_pow+0x770>
 80058d2:	4b31      	ldr	r3, [pc, #196]	; (8005998 <__ieee754_pow+0xa10>)
 80058d4:	440b      	add	r3, r1
 80058d6:	4303      	orrs	r3, r0
 80058d8:	d00b      	beq.n	80058f2 <__ieee754_pow+0x96a>
 80058da:	a329      	add	r3, pc, #164	; (adr r3, 8005980 <__ieee754_pow+0x9f8>)
 80058dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058e4:	f7fa fdf0 	bl	80004c8 <__aeabi_dmul>
 80058e8:	a325      	add	r3, pc, #148	; (adr r3, 8005980 <__ieee754_pow+0x9f8>)
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f7ff bbe0 	b.w	80050b2 <__ieee754_pow+0x12a>
 80058f2:	4622      	mov	r2, r4
 80058f4:	462b      	mov	r3, r5
 80058f6:	f7fa fc2f 	bl	8000158 <__aeabi_dsub>
 80058fa:	4642      	mov	r2, r8
 80058fc:	464b      	mov	r3, r9
 80058fe:	f7fb f869 	bl	80009d4 <__aeabi_dcmpge>
 8005902:	2800      	cmp	r0, #0
 8005904:	f43f aef8 	beq.w	80056f8 <__ieee754_pow+0x770>
 8005908:	e7e7      	b.n	80058da <__ieee754_pow+0x952>
 800590a:	f04f 0a00 	mov.w	sl, #0
 800590e:	e71e      	b.n	800574e <__ieee754_pow+0x7c6>
 8005910:	4621      	mov	r1, r4
 8005912:	e7d4      	b.n	80058be <__ieee754_pow+0x936>
 8005914:	f04f 0b00 	mov.w	fp, #0
 8005918:	f8df c074 	ldr.w	ip, [pc, #116]	; 8005990 <__ieee754_pow+0xa08>
 800591c:	f7ff bb95 	b.w	800504a <__ieee754_pow+0xc2>
 8005920:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8005924:	f7ff bb91 	b.w	800504a <__ieee754_pow+0xc2>
 8005928:	4638      	mov	r0, r7
 800592a:	4641      	mov	r1, r8
 800592c:	f7ff bbc3 	b.w	80050b6 <__ieee754_pow+0x12e>
 8005930:	9200      	str	r2, [sp, #0]
 8005932:	f7ff bb9f 	b.w	8005074 <__ieee754_pow+0xec>
 8005936:	bf00      	nop
 8005938:	652b82fe 	.word	0x652b82fe
 800593c:	3c971547 	.word	0x3c971547
 8005940:	00000000 	.word	0x00000000
 8005944:	3fe62e43 	.word	0x3fe62e43
 8005948:	fefa39ef 	.word	0xfefa39ef
 800594c:	3fe62e42 	.word	0x3fe62e42
 8005950:	0ca86c39 	.word	0x0ca86c39
 8005954:	be205c61 	.word	0xbe205c61
 8005958:	72bea4d0 	.word	0x72bea4d0
 800595c:	3e663769 	.word	0x3e663769
 8005960:	c5d26bf1 	.word	0xc5d26bf1
 8005964:	3ebbbd41 	.word	0x3ebbbd41
 8005968:	af25de2c 	.word	0xaf25de2c
 800596c:	3f11566a 	.word	0x3f11566a
 8005970:	16bebd93 	.word	0x16bebd93
 8005974:	3f66c16c 	.word	0x3f66c16c
 8005978:	5555553e 	.word	0x5555553e
 800597c:	3fc55555 	.word	0x3fc55555
 8005980:	c2f8f359 	.word	0xc2f8f359
 8005984:	01a56e1f 	.word	0x01a56e1f
 8005988:	3fe00000 	.word	0x3fe00000
 800598c:	000fffff 	.word	0x000fffff
 8005990:	3ff00000 	.word	0x3ff00000
 8005994:	4090cbff 	.word	0x4090cbff
 8005998:	3f6f3400 	.word	0x3f6f3400

0800599c <__ieee754_sqrt>:
 800599c:	4b54      	ldr	r3, [pc, #336]	; (8005af0 <__ieee754_sqrt+0x154>)
 800599e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a2:	438b      	bics	r3, r1
 80059a4:	4606      	mov	r6, r0
 80059a6:	460d      	mov	r5, r1
 80059a8:	460a      	mov	r2, r1
 80059aa:	460c      	mov	r4, r1
 80059ac:	d10f      	bne.n	80059ce <__ieee754_sqrt+0x32>
 80059ae:	4602      	mov	r2, r0
 80059b0:	460b      	mov	r3, r1
 80059b2:	f7fa fd89 	bl	80004c8 <__aeabi_dmul>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	4630      	mov	r0, r6
 80059bc:	4629      	mov	r1, r5
 80059be:	f7fa fbcd 	bl	800015c <__adddf3>
 80059c2:	4606      	mov	r6, r0
 80059c4:	460d      	mov	r5, r1
 80059c6:	4630      	mov	r0, r6
 80059c8:	4629      	mov	r1, r5
 80059ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ce:	2900      	cmp	r1, #0
 80059d0:	4607      	mov	r7, r0
 80059d2:	4603      	mov	r3, r0
 80059d4:	dc0e      	bgt.n	80059f4 <__ieee754_sqrt+0x58>
 80059d6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80059da:	ea5c 0707 	orrs.w	r7, ip, r7
 80059de:	d0f2      	beq.n	80059c6 <__ieee754_sqrt+0x2a>
 80059e0:	b141      	cbz	r1, 80059f4 <__ieee754_sqrt+0x58>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	f7fa fbb7 	bl	8000158 <__aeabi_dsub>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	f7fa fe95 	bl	800071c <__aeabi_ddiv>
 80059f2:	e7e6      	b.n	80059c2 <__ieee754_sqrt+0x26>
 80059f4:	1512      	asrs	r2, r2, #20
 80059f6:	d074      	beq.n	8005ae2 <__ieee754_sqrt+0x146>
 80059f8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80059fc:	07d5      	lsls	r5, r2, #31
 80059fe:	f04f 0500 	mov.w	r5, #0
 8005a02:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005a06:	bf48      	it	mi
 8005a08:	0fd9      	lsrmi	r1, r3, #31
 8005a0a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8005a0e:	bf44      	itt	mi
 8005a10:	005b      	lslmi	r3, r3, #1
 8005a12:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8005a16:	1051      	asrs	r1, r2, #1
 8005a18:	0fda      	lsrs	r2, r3, #31
 8005a1a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8005a1e:	4628      	mov	r0, r5
 8005a20:	2216      	movs	r2, #22
 8005a22:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	1987      	adds	r7, r0, r6
 8005a2a:	42a7      	cmp	r7, r4
 8005a2c:	bfde      	ittt	le
 8005a2e:	19b8      	addle	r0, r7, r6
 8005a30:	1be4      	suble	r4, r4, r7
 8005a32:	19ad      	addle	r5, r5, r6
 8005a34:	0fdf      	lsrs	r7, r3, #31
 8005a36:	3a01      	subs	r2, #1
 8005a38:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8005a3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005a40:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005a44:	d1f0      	bne.n	8005a28 <__ieee754_sqrt+0x8c>
 8005a46:	f04f 0c20 	mov.w	ip, #32
 8005a4a:	4696      	mov	lr, r2
 8005a4c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005a50:	4284      	cmp	r4, r0
 8005a52:	eb06 070e 	add.w	r7, r6, lr
 8005a56:	dc02      	bgt.n	8005a5e <__ieee754_sqrt+0xc2>
 8005a58:	d112      	bne.n	8005a80 <__ieee754_sqrt+0xe4>
 8005a5a:	429f      	cmp	r7, r3
 8005a5c:	d810      	bhi.n	8005a80 <__ieee754_sqrt+0xe4>
 8005a5e:	2f00      	cmp	r7, #0
 8005a60:	eb07 0e06 	add.w	lr, r7, r6
 8005a64:	da42      	bge.n	8005aec <__ieee754_sqrt+0x150>
 8005a66:	f1be 0f00 	cmp.w	lr, #0
 8005a6a:	db3f      	blt.n	8005aec <__ieee754_sqrt+0x150>
 8005a6c:	f100 0801 	add.w	r8, r0, #1
 8005a70:	1a24      	subs	r4, r4, r0
 8005a72:	4640      	mov	r0, r8
 8005a74:	429f      	cmp	r7, r3
 8005a76:	bf88      	it	hi
 8005a78:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 8005a7c:	1bdb      	subs	r3, r3, r7
 8005a7e:	4432      	add	r2, r6
 8005a80:	0064      	lsls	r4, r4, #1
 8005a82:	f1bc 0c01 	subs.w	ip, ip, #1
 8005a86:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8005a8a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005a8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005a92:	d1dd      	bne.n	8005a50 <__ieee754_sqrt+0xb4>
 8005a94:	4323      	orrs	r3, r4
 8005a96:	d006      	beq.n	8005aa6 <__ieee754_sqrt+0x10a>
 8005a98:	1c54      	adds	r4, r2, #1
 8005a9a:	bf0b      	itete	eq
 8005a9c:	4662      	moveq	r2, ip
 8005a9e:	3201      	addne	r2, #1
 8005aa0:	3501      	addeq	r5, #1
 8005aa2:	f022 0201 	bicne.w	r2, r2, #1
 8005aa6:	106b      	asrs	r3, r5, #1
 8005aa8:	0852      	lsrs	r2, r2, #1
 8005aaa:	07e8      	lsls	r0, r5, #31
 8005aac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005ab0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005ab4:	bf48      	it	mi
 8005ab6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005aba:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8005abe:	4616      	mov	r6, r2
 8005ac0:	e781      	b.n	80059c6 <__ieee754_sqrt+0x2a>
 8005ac2:	0adc      	lsrs	r4, r3, #11
 8005ac4:	3915      	subs	r1, #21
 8005ac6:	055b      	lsls	r3, r3, #21
 8005ac8:	2c00      	cmp	r4, #0
 8005aca:	d0fa      	beq.n	8005ac2 <__ieee754_sqrt+0x126>
 8005acc:	02e6      	lsls	r6, r4, #11
 8005ace:	d50a      	bpl.n	8005ae6 <__ieee754_sqrt+0x14a>
 8005ad0:	f1c2 0020 	rsb	r0, r2, #32
 8005ad4:	fa23 f000 	lsr.w	r0, r3, r0
 8005ad8:	1e55      	subs	r5, r2, #1
 8005ada:	4093      	lsls	r3, r2
 8005adc:	4304      	orrs	r4, r0
 8005ade:	1b4a      	subs	r2, r1, r5
 8005ae0:	e78a      	b.n	80059f8 <__ieee754_sqrt+0x5c>
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	e7f0      	b.n	8005ac8 <__ieee754_sqrt+0x12c>
 8005ae6:	0064      	lsls	r4, r4, #1
 8005ae8:	3201      	adds	r2, #1
 8005aea:	e7ef      	b.n	8005acc <__ieee754_sqrt+0x130>
 8005aec:	4680      	mov	r8, r0
 8005aee:	e7bf      	b.n	8005a70 <__ieee754_sqrt+0xd4>
 8005af0:	7ff00000 	.word	0x7ff00000

08005af4 <fabs>:
 8005af4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005af8:	4619      	mov	r1, r3
 8005afa:	4770      	bx	lr

08005afc <finite>:
 8005afc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005b00:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8005b04:	0fc0      	lsrs	r0, r0, #31
 8005b06:	4770      	bx	lr

08005b08 <matherr>:
 8005b08:	2000      	movs	r0, #0
 8005b0a:	4770      	bx	lr

08005b0c <nan>:
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	4901      	ldr	r1, [pc, #4]	; (8005b14 <nan+0x8>)
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	7ff80000 	.word	0x7ff80000

08005b18 <rint>:
 8005b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005b1e:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8005b22:	f1bc 0f13 	cmp.w	ip, #19
 8005b26:	4604      	mov	r4, r0
 8005b28:	460d      	mov	r5, r1
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4606      	mov	r6, r0
 8005b2e:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8005b32:	dc5a      	bgt.n	8005bea <rint+0xd2>
 8005b34:	f1bc 0f00 	cmp.w	ip, #0
 8005b38:	da2b      	bge.n	8005b92 <rint+0x7a>
 8005b3a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005b3e:	4302      	orrs	r2, r0
 8005b40:	d023      	beq.n	8005b8a <rint+0x72>
 8005b42:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005b46:	4302      	orrs	r2, r0
 8005b48:	4256      	negs	r6, r2
 8005b4a:	4316      	orrs	r6, r2
 8005b4c:	0c4b      	lsrs	r3, r1, #17
 8005b4e:	0b36      	lsrs	r6, r6, #12
 8005b50:	4934      	ldr	r1, [pc, #208]	; (8005c24 <rint+0x10c>)
 8005b52:	045b      	lsls	r3, r3, #17
 8005b54:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8005b58:	ea46 0503 	orr.w	r5, r6, r3
 8005b5c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8005b60:	4602      	mov	r2, r0
 8005b62:	462b      	mov	r3, r5
 8005b64:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005b68:	4620      	mov	r0, r4
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	f7fa faf6 	bl	800015c <__adddf3>
 8005b70:	e9cd 0100 	strd	r0, r1, [sp]
 8005b74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b78:	462b      	mov	r3, r5
 8005b7a:	4622      	mov	r2, r4
 8005b7c:	f7fa faec 	bl	8000158 <__aeabi_dsub>
 8005b80:	4604      	mov	r4, r0
 8005b82:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005b86:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	4629      	mov	r1, r5
 8005b8e:	b003      	add	sp, #12
 8005b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b92:	4a25      	ldr	r2, [pc, #148]	; (8005c28 <rint+0x110>)
 8005b94:	fa42 f20c 	asr.w	r2, r2, ip
 8005b98:	4011      	ands	r1, r2
 8005b9a:	4301      	orrs	r1, r0
 8005b9c:	d0f5      	beq.n	8005b8a <rint+0x72>
 8005b9e:	0852      	lsrs	r2, r2, #1
 8005ba0:	ea05 0102 	and.w	r1, r5, r2
 8005ba4:	ea50 0601 	orrs.w	r6, r0, r1
 8005ba8:	d00c      	beq.n	8005bc4 <rint+0xac>
 8005baa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005bae:	f1bc 0f13 	cmp.w	ip, #19
 8005bb2:	bf0c      	ite	eq
 8005bb4:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8005bb8:	2600      	movne	r6, #0
 8005bba:	ea25 0202 	bic.w	r2, r5, r2
 8005bbe:	fa43 f30c 	asr.w	r3, r3, ip
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	4917      	ldr	r1, [pc, #92]	; (8005c24 <rint+0x10c>)
 8005bc6:	4632      	mov	r2, r6
 8005bc8:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8005bcc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	f7fa fac2 	bl	800015c <__adddf3>
 8005bd8:	e9cd 0100 	strd	r0, r1, [sp]
 8005bdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005be0:	4622      	mov	r2, r4
 8005be2:	462b      	mov	r3, r5
 8005be4:	f7fa fab8 	bl	8000158 <__aeabi_dsub>
 8005be8:	e008      	b.n	8005bfc <rint+0xe4>
 8005bea:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8005bee:	dd08      	ble.n	8005c02 <rint+0xea>
 8005bf0:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8005bf4:	d1c9      	bne.n	8005b8a <rint+0x72>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	f7fa fab0 	bl	800015c <__adddf3>
 8005bfc:	4604      	mov	r4, r0
 8005bfe:	460d      	mov	r5, r1
 8005c00:	e7c3      	b.n	8005b8a <rint+0x72>
 8005c02:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8005c06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c0a:	40ca      	lsrs	r2, r1
 8005c0c:	4210      	tst	r0, r2
 8005c0e:	d0bc      	beq.n	8005b8a <rint+0x72>
 8005c10:	0852      	lsrs	r2, r2, #1
 8005c12:	4210      	tst	r0, r2
 8005c14:	bf1f      	itttt	ne
 8005c16:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8005c1a:	ea20 0202 	bicne.w	r2, r0, r2
 8005c1e:	410e      	asrne	r6, r1
 8005c20:	4316      	orrne	r6, r2
 8005c22:	e7cf      	b.n	8005bc4 <rint+0xac>
 8005c24:	08005dc0 	.word	0x08005dc0
 8005c28:	000fffff 	.word	0x000fffff
 8005c2c:	00000000 	.word	0x00000000

08005c30 <scalbn>:
 8005c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c32:	4616      	mov	r6, r2
 8005c34:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005c38:	4604      	mov	r4, r0
 8005c3a:	460d      	mov	r5, r1
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	b982      	cbnz	r2, 8005c62 <scalbn+0x32>
 8005c40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005c44:	4303      	orrs	r3, r0
 8005c46:	d034      	beq.n	8005cb2 <scalbn+0x82>
 8005c48:	4b2d      	ldr	r3, [pc, #180]	; (8005d00 <scalbn+0xd0>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f7fa fc3c 	bl	80004c8 <__aeabi_dmul>
 8005c50:	4b2c      	ldr	r3, [pc, #176]	; (8005d04 <scalbn+0xd4>)
 8005c52:	4604      	mov	r4, r0
 8005c54:	429e      	cmp	r6, r3
 8005c56:	460d      	mov	r5, r1
 8005c58:	da0d      	bge.n	8005c76 <scalbn+0x46>
 8005c5a:	a325      	add	r3, pc, #148	; (adr r3, 8005cf0 <scalbn+0xc0>)
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	e01c      	b.n	8005c9c <scalbn+0x6c>
 8005c62:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8005c66:	42ba      	cmp	r2, r7
 8005c68:	d109      	bne.n	8005c7e <scalbn+0x4e>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	f7fa fa76 	bl	800015c <__adddf3>
 8005c70:	4604      	mov	r4, r0
 8005c72:	460d      	mov	r5, r1
 8005c74:	e01d      	b.n	8005cb2 <scalbn+0x82>
 8005c76:	460b      	mov	r3, r1
 8005c78:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005c7c:	3a36      	subs	r2, #54	; 0x36
 8005c7e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005c82:	4432      	add	r2, r6
 8005c84:	428a      	cmp	r2, r1
 8005c86:	dd0c      	ble.n	8005ca2 <scalbn+0x72>
 8005c88:	4622      	mov	r2, r4
 8005c8a:	462b      	mov	r3, r5
 8005c8c:	a11a      	add	r1, pc, #104	; (adr r1, 8005cf8 <scalbn+0xc8>)
 8005c8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c92:	f000 f83b 	bl	8005d0c <copysign>
 8005c96:	a318      	add	r3, pc, #96	; (adr r3, 8005cf8 <scalbn+0xc8>)
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	f7fa fc14 	bl	80004c8 <__aeabi_dmul>
 8005ca0:	e7e6      	b.n	8005c70 <scalbn+0x40>
 8005ca2:	2a00      	cmp	r2, #0
 8005ca4:	dd08      	ble.n	8005cb8 <scalbn+0x88>
 8005ca6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005caa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005cae:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cb8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005cbc:	da0b      	bge.n	8005cd6 <scalbn+0xa6>
 8005cbe:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005cc2:	429e      	cmp	r6, r3
 8005cc4:	4622      	mov	r2, r4
 8005cc6:	462b      	mov	r3, r5
 8005cc8:	dce0      	bgt.n	8005c8c <scalbn+0x5c>
 8005cca:	a109      	add	r1, pc, #36	; (adr r1, 8005cf0 <scalbn+0xc0>)
 8005ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cd0:	f000 f81c 	bl	8005d0c <copysign>
 8005cd4:	e7c1      	b.n	8005c5a <scalbn+0x2a>
 8005cd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005cda:	3236      	adds	r2, #54	; 0x36
 8005cdc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ce0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	2200      	movs	r2, #0
 8005cea:	4b07      	ldr	r3, [pc, #28]	; (8005d08 <scalbn+0xd8>)
 8005cec:	e7d6      	b.n	8005c9c <scalbn+0x6c>
 8005cee:	bf00      	nop
 8005cf0:	c2f8f359 	.word	0xc2f8f359
 8005cf4:	01a56e1f 	.word	0x01a56e1f
 8005cf8:	8800759c 	.word	0x8800759c
 8005cfc:	7e37e43c 	.word	0x7e37e43c
 8005d00:	43500000 	.word	0x43500000
 8005d04:	ffff3cb0 	.word	0xffff3cb0
 8005d08:	3c900000 	.word	0x3c900000

08005d0c <copysign>:
 8005d0c:	b530      	push	{r4, r5, lr}
 8005d0e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005d12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d16:	ea42 0503 	orr.w	r5, r2, r3
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	bd30      	pop	{r4, r5, pc}
	...

08005d20 <_init>:
 8005d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d22:	bf00      	nop
 8005d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d26:	bc08      	pop	{r3}
 8005d28:	469e      	mov	lr, r3
 8005d2a:	4770      	bx	lr

08005d2c <_fini>:
 8005d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2e:	bf00      	nop
 8005d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d32:	bc08      	pop	{r3}
 8005d34:	469e      	mov	lr, r3
 8005d36:	4770      	bx	lr
